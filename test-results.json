{
  "config": {
    "configFile": "C:\\Learning\\Playwright\\playwright-stuff\\playwright.config.ts",
    "rootDir": "C:/Learning/Playwright/playwright-stuff/tests",
    "forbidOnly": false,
    "fullyParallel": true,
    "globalSetup": "C:\\Learning\\Playwright\\playwright-stuff\\global-setup.ts",
    "globalTeardown": null,
    "globalTimeout": 0,
    "grep": {},
    "grepInvert": null,
    "maxFailures": 0,
    "metadata": {
      "actualWorkers": 1
    },
    "preserveOutput": "always",
    "reporter": [
      [
        "html",
        null
      ],
      [
        "list",
        null
      ],
      [
        "json",
        {
          "outputFile": "test-results.json"
        }
      ],
      [
        "C:\\Learning\\Playwright\\playwright-stuff\\node_modules\\allure-playwright\\dist\\index.js",
        null
      ]
    ],
    "reportSlowTests": {
      "max": 5,
      "threshold": 15000
    },
    "quiet": false,
    "projects": [
      {
        "outputDir": "C:/Learning/Playwright/playwright-stuff/test-results",
        "repeatEach": 1,
        "retries": 2,
        "id": "chromium",
        "name": "chromium",
        "testDir": "C:/Learning/Playwright/playwright-stuff/tests",
        "testIgnore": [],
        "testMatch": [
          "**/*.@(spec|test).?(c|m)[jt]s?(x)"
        ],
        "timeout": 30000
      },
      {
        "outputDir": "C:/Learning/Playwright/playwright-stuff/test-results",
        "repeatEach": 1,
        "retries": 2,
        "id": "local",
        "name": "local",
        "testDir": "C:/Learning/Playwright/playwright-stuff/tests",
        "testIgnore": [],
        "testMatch": [
          "**/*.@(spec|test).?(c|m)[jt]s?(x)"
        ],
        "timeout": 30000
      },
      {
        "outputDir": "C:/Learning/Playwright/playwright-stuff/test-results",
        "repeatEach": 1,
        "retries": 2,
        "id": "ci",
        "name": "ci",
        "testDir": "C:/Learning/Playwright/playwright-stuff/tests",
        "testIgnore": [],
        "testMatch": [
          "**/*.@(spec|test).?(c|m)[jt]s?(x)"
        ],
        "timeout": 30000
      }
    ],
    "shard": null,
    "updateSnapshots": "missing",
    "version": "1.41.2",
    "workers": 1,
    "webServer": null
  },
  "suites": [
    {
      "title": "rom_travel\\acces.test.ts",
      "file": "rom_travel/acces.test.ts",
      "column": 0,
      "line": 0,
      "specs": [
        {
          "title": "1.Login to main page, expect Romania Travel Guide logo to be visible",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 30000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "chromium",
              "projectName": "chromium",
              "results": [
                {
                  "workerIndex": 0,
                  "status": "passed",
                  "duration": 3216,
                  "errors": [],
                  "stdout": [],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2024-03-03T13:02:33.838Z",
                  "attachments": []
                }
              ],
              "status": "expected"
            }
          ],
          "id": "771ea3b89d0f08002b38-36d1b1ac3d367c40ac6d",
          "file": "rom_travel/acces.test.ts",
          "line": 4,
          "column": 5
        },
        {
          "title": "should not have any automatically detectable accessibility issues",
          "ok": false,
          "tags": [],
          "tests": [
            {
              "timeout": 30000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "chromium",
              "projectName": "chromium",
              "results": [
                {
                  "workerIndex": 0,
                  "status": "failed",
                  "duration": 4124,
                  "error": {
                    "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected  -   1\u001b[39m\n\u001b[31m+ Received  + 498\u001b[39m\n\n\u001b[32m- Array []\u001b[39m\n\u001b[31m+ Array [\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensures the contrast between foreground and background colors meets WCAG 2 AA minimum contrast ratio thresholds\",\u001b[39m\n\u001b[31m+     \"help\": \"Elements must meet minimum color contrast ratio thresholds\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/color-contrast?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+     \"impact\": \"serious\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"bgColor\": \"#cfcfd7\",\u001b[39m\n\u001b[31m+               \"contrastRatio\": 1.54,\u001b[39m\n\u001b[31m+               \"expectedContrastRatio\": \"4.5:1\",\u001b[39m\n\u001b[31m+               \"fgColor\": \"#ffffff\",\u001b[39m\n\u001b[31m+               \"fontSize\": \"13.5pt (18px)\",\u001b[39m\n\u001b[31m+               \"fontWeight\": \"normal\",\u001b[39m\n\u001b[31m+               \"messageKey\": null,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element has insufficient color contrast of 1.54 (foreground color: #ffffff, background color: #cfcfd7, font size: 13.5pt (18px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [\u001b[39m\n\u001b[31m+               Object {\u001b[39m\n\u001b[31m+                 \"html\": \"<div class=\\\"oax_portal_stage oax_pad_top_1 oax-scroll-container\\\">\",\u001b[39m\n\u001b[31m+                 \"target\": Array [\u001b[39m\n\u001b[31m+                   \".oax_portal_stage\",\u001b[39m\n\u001b[31m+                 ],\u001b[39m\n\u001b[31m+               },\u001b[39m\n\u001b[31m+             ],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element has insufficient color contrast of 1.54 (foreground color: #ffffff, background color: #cfcfd7, font size: 13.5pt (18px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+         \"html\": \"<p>Ghidul nostru te va duce în cele mai interesante locuri&nbsp;din Româna și te&nbsp;va ajuta să-ți planifici călătoria.</p>\",\u001b[39m\n\u001b[31m+         \"impact\": \"serious\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \"section > p\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"bgColor\": \"#e8e9f2\",\u001b[39m\n\u001b[31m+               \"contrastRatio\": 4.15,\u001b[39m\n\u001b[31m+               \"expectedContrastRatio\": \"4.5:1\",\u001b[39m\n\u001b[31m+               \"fgColor\": \"#6f6f6f\",\u001b[39m\n\u001b[31m+               \"fontSize\": \"10.5pt (14px)\",\u001b[39m\n\u001b[31m+               \"fontWeight\": \"normal\",\u001b[39m\n\u001b[31m+               \"messageKey\": null,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element has insufficient color contrast of 4.15 (foreground color: #6f6f6f, background color: #e8e9f2, font size: 10.5pt (14px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [\u001b[39m\n\u001b[31m+               Object {\u001b[39m\n\u001b[31m+                 \"html\": \"<div class=\\\"oax_portal_stage oax_pad_top_1 oax-scroll-container\\\">\",\u001b[39m\n\u001b[31m+                 \"target\": Array [\u001b[39m\n\u001b[31m+                   \".oax_portal_stage\",\u001b[39m\n\u001b[31m+                 ],\u001b[39m\n\u001b[31m+               },\u001b[39m\n\u001b[31m+             ],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element has insufficient color contrast of 4.15 (foreground color: #6f6f6f, background color: #e8e9f2, font size: 10.5pt (14px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_copyright_on_light\\\">\u001b[39m\n\u001b[31m+ \t\t\u001b[39m\n\u001b[31m+ \tFoto:\tAgnes Elena Crăciun, Unsplash\u001b[39m\n\u001b[31m+ \t</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"serious\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_copyright_on_light\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.color\",\u001b[39m\n\u001b[31m+       \"wcag2aa\",\u001b[39m\n\u001b[31m+       \"wcag143\",\u001b[39m\n\u001b[31m+       \"TTv5\",\u001b[39m\n\u001b[31m+       \"TT13.c\",\u001b[39m\n\u001b[31m+       \"EN-301-549\",\u001b[39m\n\u001b[31m+       \"EN-9.1.4.3\",\u001b[39m\n\u001b[31m+       \"ACT\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensures all page content is contained by landmarks\",\u001b[39m\n\u001b[31m+     \"help\": \"All page content should be contained by landmarks\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/region?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"region\",\u001b[39m\n\u001b[31m+     \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_custompage_header_cont oax_index_title oax_marg_top_neg_22\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t<h1 class=\\\"oax_bold oax_custom_font\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tStai activ și în sezonul rece: Aventuri și peisaje de vis iarna</h1>\u001b[39m\n\u001b[31m+ \t\t\t\t</div>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_custompage_header_cont\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-25943403 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tPriveliște spre Semenic</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-25943403 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tPaul Wasicsek, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY</a>, Redacția Outdooractive</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-25943403 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-64579929 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tMunții Făgăraș</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-64579929 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tLucian Dachman, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY</a>, Unsplash</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-64579929 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-35929168 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tMuntele Băișorii, Cluj, Romania</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-35929168 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tLaurentiu Galdau, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/publicdomain/zero/1.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC0</a>, Unsplash</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-35929168 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tPădure lângă Mediaș</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-55124239 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\t<a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by-nd/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY-ND</a>, RomaniaTravel.guide</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-55124239 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_modal_content_wrap oax_modal_scroll\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_modal_content_wrap\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax-cookie-consent-open oax_hoverlink_colored oax_marg_left_12 oax_marg_bottom_11 oax_font_default oax_inline_block oax_marg_top_10\\\">Personalizează</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-cookie-consent-open\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_modal_actions oax_modal_footer oax_font_small\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_modal_actions\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.keyboard\",\u001b[39m\n\u001b[31m+       \"best-practice\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensure elements that have scrollable content are accessible by keyboard\",\u001b[39m\n\u001b[31m+     \"help\": \"Scrollable region must have keyboard access\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/scrollable-region-focusable?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"scrollable-region-focusable\",\u001b[39m\n\u001b[31m+     \"impact\": \"serious\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": null,\u001b[39m\n\u001b[31m+             \"id\": \"focusable-content\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element should have focusable content\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": null,\u001b[39m\n\u001b[31m+             \"id\": \"focusable-element\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element should be focusable\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element should have focusable content\u001b[39m\n\u001b[31m+   Element should be focusable\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_modal_content_wrap oax_modal_scroll\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"serious\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_modal_content_wrap\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.keyboard\",\u001b[39m\n\u001b[31m+       \"wcag2a\",\u001b[39m\n\u001b[31m+       \"wcag211\",\u001b[39m\n\u001b[31m+       \"TTv5\",\u001b[39m\n\u001b[31m+       \"TT4.a\",\u001b[39m\n\u001b[31m+       \"EN-301-549\",\u001b[39m\n\u001b[31m+       \"EN-9.2.1.1\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+ ]\u001b[39m",
                    "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected  -   1\u001b[39m\n\u001b[31m+ Received  + 498\u001b[39m\n\n\u001b[32m- Array []\u001b[39m\n\u001b[31m+ Array [\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensures the contrast between foreground and background colors meets WCAG 2 AA minimum contrast ratio thresholds\",\u001b[39m\n\u001b[31m+     \"help\": \"Elements must meet minimum color contrast ratio thresholds\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/color-contrast?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+     \"impact\": \"serious\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"bgColor\": \"#cfcfd7\",\u001b[39m\n\u001b[31m+               \"contrastRatio\": 1.54,\u001b[39m\n\u001b[31m+               \"expectedContrastRatio\": \"4.5:1\",\u001b[39m\n\u001b[31m+               \"fgColor\": \"#ffffff\",\u001b[39m\n\u001b[31m+               \"fontSize\": \"13.5pt (18px)\",\u001b[39m\n\u001b[31m+               \"fontWeight\": \"normal\",\u001b[39m\n\u001b[31m+               \"messageKey\": null,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element has insufficient color contrast of 1.54 (foreground color: #ffffff, background color: #cfcfd7, font size: 13.5pt (18px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [\u001b[39m\n\u001b[31m+               Object {\u001b[39m\n\u001b[31m+                 \"html\": \"<div class=\\\"oax_portal_stage oax_pad_top_1 oax-scroll-container\\\">\",\u001b[39m\n\u001b[31m+                 \"target\": Array [\u001b[39m\n\u001b[31m+                   \".oax_portal_stage\",\u001b[39m\n\u001b[31m+                 ],\u001b[39m\n\u001b[31m+               },\u001b[39m\n\u001b[31m+             ],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element has insufficient color contrast of 1.54 (foreground color: #ffffff, background color: #cfcfd7, font size: 13.5pt (18px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+         \"html\": \"<p>Ghidul nostru te va duce în cele mai interesante locuri&nbsp;din Româna și te&nbsp;va ajuta să-ți planifici călătoria.</p>\",\u001b[39m\n\u001b[31m+         \"impact\": \"serious\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \"section > p\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"bgColor\": \"#e8e9f2\",\u001b[39m\n\u001b[31m+               \"contrastRatio\": 4.15,\u001b[39m\n\u001b[31m+               \"expectedContrastRatio\": \"4.5:1\",\u001b[39m\n\u001b[31m+               \"fgColor\": \"#6f6f6f\",\u001b[39m\n\u001b[31m+               \"fontSize\": \"10.5pt (14px)\",\u001b[39m\n\u001b[31m+               \"fontWeight\": \"normal\",\u001b[39m\n\u001b[31m+               \"messageKey\": null,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element has insufficient color contrast of 4.15 (foreground color: #6f6f6f, background color: #e8e9f2, font size: 10.5pt (14px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [\u001b[39m\n\u001b[31m+               Object {\u001b[39m\n\u001b[31m+                 \"html\": \"<div class=\\\"oax_portal_stage oax_pad_top_1 oax-scroll-container\\\">\",\u001b[39m\n\u001b[31m+                 \"target\": Array [\u001b[39m\n\u001b[31m+                   \".oax_portal_stage\",\u001b[39m\n\u001b[31m+                 ],\u001b[39m\n\u001b[31m+               },\u001b[39m\n\u001b[31m+             ],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element has insufficient color contrast of 4.15 (foreground color: #6f6f6f, background color: #e8e9f2, font size: 10.5pt (14px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_copyright_on_light\\\">\u001b[39m\n\u001b[31m+ \t\t\u001b[39m\n\u001b[31m+ \tFoto:\tAgnes Elena Crăciun, Unsplash\u001b[39m\n\u001b[31m+ \t</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"serious\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_copyright_on_light\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.color\",\u001b[39m\n\u001b[31m+       \"wcag2aa\",\u001b[39m\n\u001b[31m+       \"wcag143\",\u001b[39m\n\u001b[31m+       \"TTv5\",\u001b[39m\n\u001b[31m+       \"TT13.c\",\u001b[39m\n\u001b[31m+       \"EN-301-549\",\u001b[39m\n\u001b[31m+       \"EN-9.1.4.3\",\u001b[39m\n\u001b[31m+       \"ACT\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensures all page content is contained by landmarks\",\u001b[39m\n\u001b[31m+     \"help\": \"All page content should be contained by landmarks\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/region?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"region\",\u001b[39m\n\u001b[31m+     \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_custompage_header_cont oax_index_title oax_marg_top_neg_22\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t<h1 class=\\\"oax_bold oax_custom_font\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tStai activ și în sezonul rece: Aventuri și peisaje de vis iarna</h1>\u001b[39m\n\u001b[31m+ \t\t\t\t</div>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_custompage_header_cont\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-25943403 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tPriveliște spre Semenic</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-25943403 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tPaul Wasicsek, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY</a>, Redacția Outdooractive</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-25943403 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-64579929 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tMunții Făgăraș</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-64579929 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tLucian Dachman, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY</a>, Unsplash</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-64579929 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-35929168 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tMuntele Băișorii, Cluj, Romania</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-35929168 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tLaurentiu Galdau, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/publicdomain/zero/1.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC0</a>, Unsplash</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-35929168 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tPădure lângă Mediaș</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-55124239 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\t<a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by-nd/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY-ND</a>, RomaniaTravel.guide</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-55124239 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_modal_content_wrap oax_modal_scroll\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_modal_content_wrap\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax-cookie-consent-open oax_hoverlink_colored oax_marg_left_12 oax_marg_bottom_11 oax_font_default oax_inline_block oax_marg_top_10\\\">Personalizează</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-cookie-consent-open\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_modal_actions oax_modal_footer oax_font_small\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_modal_actions\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.keyboard\",\u001b[39m\n\u001b[31m+       \"best-practice\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensure elements that have scrollable content are accessible by keyboard\",\u001b[39m\n\u001b[31m+     \"help\": \"Scrollable region must have keyboard access\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/scrollable-region-focusable?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"scrollable-region-focusable\",\u001b[39m\n\u001b[31m+     \"impact\": \"serious\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": null,\u001b[39m\n\u001b[31m+             \"id\": \"focusable-content\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element should have focusable content\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": null,\u001b[39m\n\u001b[31m+             \"id\": \"focusable-element\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element should be focusable\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element should have focusable content\u001b[39m\n\u001b[31m+   Element should be focusable\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_modal_content_wrap oax_modal_scroll\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"serious\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_modal_content_wrap\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.keyboard\",\u001b[39m\n\u001b[31m+       \"wcag2a\",\u001b[39m\n\u001b[31m+       \"wcag211\",\u001b[39m\n\u001b[31m+       \"TTv5\",\u001b[39m\n\u001b[31m+       \"TT4.a\",\u001b[39m\n\u001b[31m+       \"EN-301-549\",\u001b[39m\n\u001b[31m+       \"EN-9.2.1.1\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+ ]\u001b[39m\n    at C:\\Learning\\Playwright\\playwright-stuff\\tests\\rom_travel\\acces.test.ts:26:47",
                    "location": {
                      "file": "C:\\Learning\\Playwright\\playwright-stuff\\tests\\rom_travel\\acces.test.ts",
                      "column": 47,
                      "line": 26
                    },
                    "snippet": "\u001b[0m \u001b[90m 24 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 25 |\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 26 |\u001b[39m   expect(accessibilityScanResults\u001b[33m.\u001b[39mviolations)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m \u001b[90m// 5\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 27 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 28 |\u001b[39m\u001b[0m"
                  },
                  "errors": [
                    {
                      "location": {
                        "file": "C:\\Learning\\Playwright\\playwright-stuff\\tests\\rom_travel\\acces.test.ts",
                        "column": 47,
                        "line": 26
                      },
                      "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected  -   1\u001b[39m\n\u001b[31m+ Received  + 498\u001b[39m\n\n\u001b[32m- Array []\u001b[39m\n\u001b[31m+ Array [\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensures the contrast between foreground and background colors meets WCAG 2 AA minimum contrast ratio thresholds\",\u001b[39m\n\u001b[31m+     \"help\": \"Elements must meet minimum color contrast ratio thresholds\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/color-contrast?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+     \"impact\": \"serious\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"bgColor\": \"#cfcfd7\",\u001b[39m\n\u001b[31m+               \"contrastRatio\": 1.54,\u001b[39m\n\u001b[31m+               \"expectedContrastRatio\": \"4.5:1\",\u001b[39m\n\u001b[31m+               \"fgColor\": \"#ffffff\",\u001b[39m\n\u001b[31m+               \"fontSize\": \"13.5pt (18px)\",\u001b[39m\n\u001b[31m+               \"fontWeight\": \"normal\",\u001b[39m\n\u001b[31m+               \"messageKey\": null,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element has insufficient color contrast of 1.54 (foreground color: #ffffff, background color: #cfcfd7, font size: 13.5pt (18px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [\u001b[39m\n\u001b[31m+               Object {\u001b[39m\n\u001b[31m+                 \"html\": \"<div class=\\\"oax_portal_stage oax_pad_top_1 oax-scroll-container\\\">\",\u001b[39m\n\u001b[31m+                 \"target\": Array [\u001b[39m\n\u001b[31m+                   \".oax_portal_stage\",\u001b[39m\n\u001b[31m+                 ],\u001b[39m\n\u001b[31m+               },\u001b[39m\n\u001b[31m+             ],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element has insufficient color contrast of 1.54 (foreground color: #ffffff, background color: #cfcfd7, font size: 13.5pt (18px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+         \"html\": \"<p>Ghidul nostru te va duce în cele mai interesante locuri&nbsp;din Româna și te&nbsp;va ajuta să-ți planifici călătoria.</p>\",\u001b[39m\n\u001b[31m+         \"impact\": \"serious\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \"section > p\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"bgColor\": \"#e8e9f2\",\u001b[39m\n\u001b[31m+               \"contrastRatio\": 4.15,\u001b[39m\n\u001b[31m+               \"expectedContrastRatio\": \"4.5:1\",\u001b[39m\n\u001b[31m+               \"fgColor\": \"#6f6f6f\",\u001b[39m\n\u001b[31m+               \"fontSize\": \"10.5pt (14px)\",\u001b[39m\n\u001b[31m+               \"fontWeight\": \"normal\",\u001b[39m\n\u001b[31m+               \"messageKey\": null,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element has insufficient color contrast of 4.15 (foreground color: #6f6f6f, background color: #e8e9f2, font size: 10.5pt (14px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [\u001b[39m\n\u001b[31m+               Object {\u001b[39m\n\u001b[31m+                 \"html\": \"<div class=\\\"oax_portal_stage oax_pad_top_1 oax-scroll-container\\\">\",\u001b[39m\n\u001b[31m+                 \"target\": Array [\u001b[39m\n\u001b[31m+                   \".oax_portal_stage\",\u001b[39m\n\u001b[31m+                 ],\u001b[39m\n\u001b[31m+               },\u001b[39m\n\u001b[31m+             ],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element has insufficient color contrast of 4.15 (foreground color: #6f6f6f, background color: #e8e9f2, font size: 10.5pt (14px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_copyright_on_light\\\">\u001b[39m\n\u001b[31m+ \t\t\u001b[39m\n\u001b[31m+ \tFoto:\tAgnes Elena Crăciun, Unsplash\u001b[39m\n\u001b[31m+ \t</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"serious\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_copyright_on_light\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.color\",\u001b[39m\n\u001b[31m+       \"wcag2aa\",\u001b[39m\n\u001b[31m+       \"wcag143\",\u001b[39m\n\u001b[31m+       \"TTv5\",\u001b[39m\n\u001b[31m+       \"TT13.c\",\u001b[39m\n\u001b[31m+       \"EN-301-549\",\u001b[39m\n\u001b[31m+       \"EN-9.1.4.3\",\u001b[39m\n\u001b[31m+       \"ACT\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensures all page content is contained by landmarks\",\u001b[39m\n\u001b[31m+     \"help\": \"All page content should be contained by landmarks\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/region?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"region\",\u001b[39m\n\u001b[31m+     \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_custompage_header_cont oax_index_title oax_marg_top_neg_22\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t<h1 class=\\\"oax_bold oax_custom_font\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tStai activ și în sezonul rece: Aventuri și peisaje de vis iarna</h1>\u001b[39m\n\u001b[31m+ \t\t\t\t</div>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_custompage_header_cont\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-25943403 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tPriveliște spre Semenic</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-25943403 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tPaul Wasicsek, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY</a>, Redacția Outdooractive</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-25943403 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-64579929 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tMunții Făgăraș</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-64579929 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tLucian Dachman, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY</a>, Unsplash</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-64579929 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-35929168 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tMuntele Băișorii, Cluj, Romania</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-35929168 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tLaurentiu Galdau, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/publicdomain/zero/1.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC0</a>, Unsplash</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-35929168 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tPădure lângă Mediaș</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-55124239 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\t<a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by-nd/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY-ND</a>, RomaniaTravel.guide</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-55124239 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_modal_content_wrap oax_modal_scroll\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_modal_content_wrap\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax-cookie-consent-open oax_hoverlink_colored oax_marg_left_12 oax_marg_bottom_11 oax_font_default oax_inline_block oax_marg_top_10\\\">Personalizează</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-cookie-consent-open\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_modal_actions oax_modal_footer oax_font_small\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_modal_actions\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.keyboard\",\u001b[39m\n\u001b[31m+       \"best-practice\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensure elements that have scrollable content are accessible by keyboard\",\u001b[39m\n\u001b[31m+     \"help\": \"Scrollable region must have keyboard access\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/scrollable-region-focusable?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"scrollable-region-focusable\",\u001b[39m\n\u001b[31m+     \"impact\": \"serious\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": null,\u001b[39m\n\u001b[31m+             \"id\": \"focusable-content\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element should have focusable content\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": null,\u001b[39m\n\u001b[31m+             \"id\": \"focusable-element\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element should be focusable\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element should have focusable content\u001b[39m\n\u001b[31m+   Element should be focusable\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_modal_content_wrap oax_modal_scroll\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"serious\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_modal_content_wrap\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.keyboard\",\u001b[39m\n\u001b[31m+       \"wcag2a\",\u001b[39m\n\u001b[31m+       \"wcag211\",\u001b[39m\n\u001b[31m+       \"TTv5\",\u001b[39m\n\u001b[31m+       \"TT4.a\",\u001b[39m\n\u001b[31m+       \"EN-301-549\",\u001b[39m\n\u001b[31m+       \"EN-9.2.1.1\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+ ]\u001b[39m\n\n\u001b[0m \u001b[90m 24 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 25 |\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 26 |\u001b[39m   expect(accessibilityScanResults\u001b[33m.\u001b[39mviolations)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m \u001b[90m// 5\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 27 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 28 |\u001b[39m\u001b[0m\n\n\u001b[2m    at C:\\Learning\\Playwright\\playwright-stuff\\tests\\rom_travel\\acces.test.ts:26:47\u001b[22m"
                    }
                  ],
                  "stdout": [],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2024-03-03T13:02:37.630Z",
                  "attachments": [
                    {
                      "name": "accessibility-scan-results",
                      "contentType": "application/json",
                      "body": ""
                    },
                    {
                      "name": "screenshot",
                      "contentType": "image/png",
                      "path": "C:\\Learning\\Playwright\\playwright-stuff\\test-results\\rom_travel-acces-should-not-have-any-automatically-detectable-accessibility-issues-chromium\\test-failed-1.png"
                    }
                  ],
                  "errorLocation": {
                    "file": "C:\\Learning\\Playwright\\playwright-stuff\\tests\\rom_travel\\acces.test.ts",
                    "column": 47,
                    "line": 26
                  }
                },
                {
                  "workerIndex": 1,
                  "status": "failed",
                  "duration": 8109,
                  "error": {
                    "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected  -   1\u001b[39m\n\u001b[31m+ Received  + 462\u001b[39m\n\n\u001b[32m- Array []\u001b[39m\n\u001b[31m+ Array [\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensures the contrast between foreground and background colors meets WCAG 2 AA minimum contrast ratio thresholds\",\u001b[39m\n\u001b[31m+     \"help\": \"Elements must meet minimum color contrast ratio thresholds\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/color-contrast?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+     \"impact\": \"serious\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"bgColor\": \"#cfcfd7\",\u001b[39m\n\u001b[31m+               \"contrastRatio\": 1.54,\u001b[39m\n\u001b[31m+               \"expectedContrastRatio\": \"4.5:1\",\u001b[39m\n\u001b[31m+               \"fgColor\": \"#ffffff\",\u001b[39m\n\u001b[31m+               \"fontSize\": \"13.5pt (18px)\",\u001b[39m\n\u001b[31m+               \"fontWeight\": \"normal\",\u001b[39m\n\u001b[31m+               \"messageKey\": null,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element has insufficient color contrast of 1.54 (foreground color: #ffffff, background color: #cfcfd7, font size: 13.5pt (18px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [\u001b[39m\n\u001b[31m+               Object {\u001b[39m\n\u001b[31m+                 \"html\": \"<div class=\\\"oax_portal_stage oax_pad_top_1 oax-scroll-container\\\">\",\u001b[39m\n\u001b[31m+                 \"target\": Array [\u001b[39m\n\u001b[31m+                   \".oax_portal_stage\",\u001b[39m\n\u001b[31m+                 ],\u001b[39m\n\u001b[31m+               },\u001b[39m\n\u001b[31m+             ],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element has insufficient color contrast of 1.54 (foreground color: #ffffff, background color: #cfcfd7, font size: 13.5pt (18px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+         \"html\": \"<p>Ghidul nostru te va duce în cele mai interesante locuri&nbsp;din Româna și te&nbsp;va ajuta să-ți planifici călătoria.</p>\",\u001b[39m\n\u001b[31m+         \"impact\": \"serious\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \"section > p\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"bgColor\": \"#e8e9f2\",\u001b[39m\n\u001b[31m+               \"contrastRatio\": 4.15,\u001b[39m\n\u001b[31m+               \"expectedContrastRatio\": \"4.5:1\",\u001b[39m\n\u001b[31m+               \"fgColor\": \"#6f6f6f\",\u001b[39m\n\u001b[31m+               \"fontSize\": \"10.5pt (14px)\",\u001b[39m\n\u001b[31m+               \"fontWeight\": \"normal\",\u001b[39m\n\u001b[31m+               \"messageKey\": null,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element has insufficient color contrast of 4.15 (foreground color: #6f6f6f, background color: #e8e9f2, font size: 10.5pt (14px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [\u001b[39m\n\u001b[31m+               Object {\u001b[39m\n\u001b[31m+                 \"html\": \"<div class=\\\"oax_portal_stage oax_pad_top_1 oax-scroll-container\\\">\",\u001b[39m\n\u001b[31m+                 \"target\": Array [\u001b[39m\n\u001b[31m+                   \".oax_portal_stage\",\u001b[39m\n\u001b[31m+                 ],\u001b[39m\n\u001b[31m+               },\u001b[39m\n\u001b[31m+             ],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element has insufficient color contrast of 4.15 (foreground color: #6f6f6f, background color: #e8e9f2, font size: 10.5pt (14px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_copyright_on_light\\\">\u001b[39m\n\u001b[31m+ \t\t\u001b[39m\n\u001b[31m+ \tFoto:\tAgnes Elena Crăciun, Unsplash\u001b[39m\n\u001b[31m+ \t</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"serious\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_copyright_on_light\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.color\",\u001b[39m\n\u001b[31m+       \"wcag2aa\",\u001b[39m\n\u001b[31m+       \"wcag143\",\u001b[39m\n\u001b[31m+       \"TTv5\",\u001b[39m\n\u001b[31m+       \"TT13.c\",\u001b[39m\n\u001b[31m+       \"EN-301-549\",\u001b[39m\n\u001b[31m+       \"EN-9.1.4.3\",\u001b[39m\n\u001b[31m+       \"ACT\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensures <img> elements have alternate text or a role of none or presentation\",\u001b[39m\n\u001b[31m+     \"help\": \"Images must have alternate text\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/image-alt?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"image-alt\",\u001b[39m\n\u001b[31m+     \"impact\": \"critical\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": null,\u001b[39m\n\u001b[31m+             \"id\": \"has-alt\",\u001b[39m\n\u001b[31m+             \"impact\": \"critical\",\u001b[39m\n\u001b[31m+             \"message\": \"Element does not have an alt attribute\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": null,\u001b[39m\n\u001b[31m+             \"id\": \"aria-label\",\u001b[39m\n\u001b[31m+             \"impact\": \"critical\",\u001b[39m\n\u001b[31m+             \"message\": \"aria-label attribute does not exist or is empty\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": null,\u001b[39m\n\u001b[31m+             \"id\": \"aria-labelledby\",\u001b[39m\n\u001b[31m+             \"impact\": \"critical\",\u001b[39m\n\u001b[31m+             \"message\": \"aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"messageKey\": \"noAttr\",\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"non-empty-title\",\u001b[39m\n\u001b[31m+             \"impact\": \"critical\",\u001b[39m\n\u001b[31m+             \"message\": \"Element has no title attribute\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": null,\u001b[39m\n\u001b[31m+             \"id\": \"presentational-role\",\u001b[39m\n\u001b[31m+             \"impact\": \"critical\",\u001b[39m\n\u001b[31m+             \"message\": \"Element's default semantics were not overridden with role=\\\"none\\\" or role=\\\"presentation\\\"\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element does not have an alt attribute\u001b[39m\n\u001b[31m+   aria-label attribute does not exist or is empty\u001b[39m\n\u001b[31m+   aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty\u001b[39m\n\u001b[31m+   Element has no title attribute\u001b[39m\n\u001b[31m+   Element's default semantics were not overridden with role=\\\"none\\\" or role=\\\"presentation\\\"\",\u001b[39m\n\u001b[31m+         \"html\": \"<img src=\\\"https://res.oastatic.com/themes/oad-romaniatravel/css/images/EU-RO-logo.png\\\" style=\\\"position: absolute; width: 35%; left: 32px; bottom: 37px;\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"critical\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_portal_wrapper > img\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.text-alternatives\",\u001b[39m\n\u001b[31m+       \"wcag2a\",\u001b[39m\n\u001b[31m+       \"wcag111\",\u001b[39m\n\u001b[31m+       \"section508\",\u001b[39m\n\u001b[31m+       \"section508.22.a\",\u001b[39m\n\u001b[31m+       \"TTv5\",\u001b[39m\n\u001b[31m+       \"TT7.a\",\u001b[39m\n\u001b[31m+       \"TT7.b\",\u001b[39m\n\u001b[31m+       \"EN-301-549\",\u001b[39m\n\u001b[31m+       \"EN-9.1.1.1\",\u001b[39m\n\u001b[31m+       \"ACT\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensures all page content is contained by landmarks\",\u001b[39m\n\u001b[31m+     \"help\": \"All page content should be contained by landmarks\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/region?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"region\",\u001b[39m\n\u001b[31m+     \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_custompage_header_cont oax_index_title oax_marg_top_neg_22\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t<h1 class=\\\"oax_bold oax_custom_font\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tStai activ și în sezonul rece: Aventuri și peisaje de vis iarna</h1>\u001b[39m\n\u001b[31m+ \t\t\t\t</div>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_custompage_header_cont\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-25943403 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tPriveliște spre Semenic</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-25943403 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tPaul Wasicsek, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY</a>, Redacția Outdooractive</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-25943403 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-64579929 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tMunții Făgăraș</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-64579929 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tLucian Dachman, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY</a>, Unsplash</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-64579929 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-35929168 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tMuntele Băișorii, Cluj, Romania</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-35929168 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tLaurentiu Galdau, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/publicdomain/zero/1.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC0</a>, Unsplash</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-35929168 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tPădure lângă Mediaș</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-55124239 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\t<a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by-nd/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY-ND</a>, RomaniaTravel.guide</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-55124239 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.keyboard\",\u001b[39m\n\u001b[31m+       \"best-practice\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+ ]\u001b[39m",
                    "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected  -   1\u001b[39m\n\u001b[31m+ Received  + 462\u001b[39m\n\n\u001b[32m- Array []\u001b[39m\n\u001b[31m+ Array [\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensures the contrast between foreground and background colors meets WCAG 2 AA minimum contrast ratio thresholds\",\u001b[39m\n\u001b[31m+     \"help\": \"Elements must meet minimum color contrast ratio thresholds\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/color-contrast?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+     \"impact\": \"serious\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"bgColor\": \"#cfcfd7\",\u001b[39m\n\u001b[31m+               \"contrastRatio\": 1.54,\u001b[39m\n\u001b[31m+               \"expectedContrastRatio\": \"4.5:1\",\u001b[39m\n\u001b[31m+               \"fgColor\": \"#ffffff\",\u001b[39m\n\u001b[31m+               \"fontSize\": \"13.5pt (18px)\",\u001b[39m\n\u001b[31m+               \"fontWeight\": \"normal\",\u001b[39m\n\u001b[31m+               \"messageKey\": null,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element has insufficient color contrast of 1.54 (foreground color: #ffffff, background color: #cfcfd7, font size: 13.5pt (18px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [\u001b[39m\n\u001b[31m+               Object {\u001b[39m\n\u001b[31m+                 \"html\": \"<div class=\\\"oax_portal_stage oax_pad_top_1 oax-scroll-container\\\">\",\u001b[39m\n\u001b[31m+                 \"target\": Array [\u001b[39m\n\u001b[31m+                   \".oax_portal_stage\",\u001b[39m\n\u001b[31m+                 ],\u001b[39m\n\u001b[31m+               },\u001b[39m\n\u001b[31m+             ],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element has insufficient color contrast of 1.54 (foreground color: #ffffff, background color: #cfcfd7, font size: 13.5pt (18px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+         \"html\": \"<p>Ghidul nostru te va duce în cele mai interesante locuri&nbsp;din Româna și te&nbsp;va ajuta să-ți planifici călătoria.</p>\",\u001b[39m\n\u001b[31m+         \"impact\": \"serious\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \"section > p\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"bgColor\": \"#e8e9f2\",\u001b[39m\n\u001b[31m+               \"contrastRatio\": 4.15,\u001b[39m\n\u001b[31m+               \"expectedContrastRatio\": \"4.5:1\",\u001b[39m\n\u001b[31m+               \"fgColor\": \"#6f6f6f\",\u001b[39m\n\u001b[31m+               \"fontSize\": \"10.5pt (14px)\",\u001b[39m\n\u001b[31m+               \"fontWeight\": \"normal\",\u001b[39m\n\u001b[31m+               \"messageKey\": null,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element has insufficient color contrast of 4.15 (foreground color: #6f6f6f, background color: #e8e9f2, font size: 10.5pt (14px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [\u001b[39m\n\u001b[31m+               Object {\u001b[39m\n\u001b[31m+                 \"html\": \"<div class=\\\"oax_portal_stage oax_pad_top_1 oax-scroll-container\\\">\",\u001b[39m\n\u001b[31m+                 \"target\": Array [\u001b[39m\n\u001b[31m+                   \".oax_portal_stage\",\u001b[39m\n\u001b[31m+                 ],\u001b[39m\n\u001b[31m+               },\u001b[39m\n\u001b[31m+             ],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element has insufficient color contrast of 4.15 (foreground color: #6f6f6f, background color: #e8e9f2, font size: 10.5pt (14px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_copyright_on_light\\\">\u001b[39m\n\u001b[31m+ \t\t\u001b[39m\n\u001b[31m+ \tFoto:\tAgnes Elena Crăciun, Unsplash\u001b[39m\n\u001b[31m+ \t</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"serious\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_copyright_on_light\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.color\",\u001b[39m\n\u001b[31m+       \"wcag2aa\",\u001b[39m\n\u001b[31m+       \"wcag143\",\u001b[39m\n\u001b[31m+       \"TTv5\",\u001b[39m\n\u001b[31m+       \"TT13.c\",\u001b[39m\n\u001b[31m+       \"EN-301-549\",\u001b[39m\n\u001b[31m+       \"EN-9.1.4.3\",\u001b[39m\n\u001b[31m+       \"ACT\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensures <img> elements have alternate text or a role of none or presentation\",\u001b[39m\n\u001b[31m+     \"help\": \"Images must have alternate text\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/image-alt?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"image-alt\",\u001b[39m\n\u001b[31m+     \"impact\": \"critical\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": null,\u001b[39m\n\u001b[31m+             \"id\": \"has-alt\",\u001b[39m\n\u001b[31m+             \"impact\": \"critical\",\u001b[39m\n\u001b[31m+             \"message\": \"Element does not have an alt attribute\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": null,\u001b[39m\n\u001b[31m+             \"id\": \"aria-label\",\u001b[39m\n\u001b[31m+             \"impact\": \"critical\",\u001b[39m\n\u001b[31m+             \"message\": \"aria-label attribute does not exist or is empty\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": null,\u001b[39m\n\u001b[31m+             \"id\": \"aria-labelledby\",\u001b[39m\n\u001b[31m+             \"impact\": \"critical\",\u001b[39m\n\u001b[31m+             \"message\": \"aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"messageKey\": \"noAttr\",\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"non-empty-title\",\u001b[39m\n\u001b[31m+             \"impact\": \"critical\",\u001b[39m\n\u001b[31m+             \"message\": \"Element has no title attribute\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": null,\u001b[39m\n\u001b[31m+             \"id\": \"presentational-role\",\u001b[39m\n\u001b[31m+             \"impact\": \"critical\",\u001b[39m\n\u001b[31m+             \"message\": \"Element's default semantics were not overridden with role=\\\"none\\\" or role=\\\"presentation\\\"\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element does not have an alt attribute\u001b[39m\n\u001b[31m+   aria-label attribute does not exist or is empty\u001b[39m\n\u001b[31m+   aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty\u001b[39m\n\u001b[31m+   Element has no title attribute\u001b[39m\n\u001b[31m+   Element's default semantics were not overridden with role=\\\"none\\\" or role=\\\"presentation\\\"\",\u001b[39m\n\u001b[31m+         \"html\": \"<img src=\\\"https://res.oastatic.com/themes/oad-romaniatravel/css/images/EU-RO-logo.png\\\" style=\\\"position: absolute; width: 35%; left: 32px; bottom: 37px;\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"critical\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_portal_wrapper > img\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.text-alternatives\",\u001b[39m\n\u001b[31m+       \"wcag2a\",\u001b[39m\n\u001b[31m+       \"wcag111\",\u001b[39m\n\u001b[31m+       \"section508\",\u001b[39m\n\u001b[31m+       \"section508.22.a\",\u001b[39m\n\u001b[31m+       \"TTv5\",\u001b[39m\n\u001b[31m+       \"TT7.a\",\u001b[39m\n\u001b[31m+       \"TT7.b\",\u001b[39m\n\u001b[31m+       \"EN-301-549\",\u001b[39m\n\u001b[31m+       \"EN-9.1.1.1\",\u001b[39m\n\u001b[31m+       \"ACT\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensures all page content is contained by landmarks\",\u001b[39m\n\u001b[31m+     \"help\": \"All page content should be contained by landmarks\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/region?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"region\",\u001b[39m\n\u001b[31m+     \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_custompage_header_cont oax_index_title oax_marg_top_neg_22\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t<h1 class=\\\"oax_bold oax_custom_font\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tStai activ și în sezonul rece: Aventuri și peisaje de vis iarna</h1>\u001b[39m\n\u001b[31m+ \t\t\t\t</div>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_custompage_header_cont\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-25943403 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tPriveliște spre Semenic</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-25943403 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tPaul Wasicsek, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY</a>, Redacția Outdooractive</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-25943403 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-64579929 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tMunții Făgăraș</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-64579929 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tLucian Dachman, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY</a>, Unsplash</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-64579929 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-35929168 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tMuntele Băișorii, Cluj, Romania</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-35929168 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tLaurentiu Galdau, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/publicdomain/zero/1.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC0</a>, Unsplash</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-35929168 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tPădure lângă Mediaș</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-55124239 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\t<a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by-nd/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY-ND</a>, RomaniaTravel.guide</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-55124239 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.keyboard\",\u001b[39m\n\u001b[31m+       \"best-practice\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+ ]\u001b[39m\n    at C:\\Learning\\Playwright\\playwright-stuff\\tests\\rom_travel\\acces.test.ts:26:47",
                    "location": {
                      "file": "C:\\Learning\\Playwright\\playwright-stuff\\tests\\rom_travel\\acces.test.ts",
                      "column": 47,
                      "line": 26
                    },
                    "snippet": "\u001b[0m \u001b[90m 24 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 25 |\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 26 |\u001b[39m   expect(accessibilityScanResults\u001b[33m.\u001b[39mviolations)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m \u001b[90m// 5\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 27 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 28 |\u001b[39m\u001b[0m"
                  },
                  "errors": [
                    {
                      "location": {
                        "file": "C:\\Learning\\Playwright\\playwright-stuff\\tests\\rom_travel\\acces.test.ts",
                        "column": 47,
                        "line": 26
                      },
                      "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected  -   1\u001b[39m\n\u001b[31m+ Received  + 462\u001b[39m\n\n\u001b[32m- Array []\u001b[39m\n\u001b[31m+ Array [\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensures the contrast between foreground and background colors meets WCAG 2 AA minimum contrast ratio thresholds\",\u001b[39m\n\u001b[31m+     \"help\": \"Elements must meet minimum color contrast ratio thresholds\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/color-contrast?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+     \"impact\": \"serious\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"bgColor\": \"#cfcfd7\",\u001b[39m\n\u001b[31m+               \"contrastRatio\": 1.54,\u001b[39m\n\u001b[31m+               \"expectedContrastRatio\": \"4.5:1\",\u001b[39m\n\u001b[31m+               \"fgColor\": \"#ffffff\",\u001b[39m\n\u001b[31m+               \"fontSize\": \"13.5pt (18px)\",\u001b[39m\n\u001b[31m+               \"fontWeight\": \"normal\",\u001b[39m\n\u001b[31m+               \"messageKey\": null,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element has insufficient color contrast of 1.54 (foreground color: #ffffff, background color: #cfcfd7, font size: 13.5pt (18px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [\u001b[39m\n\u001b[31m+               Object {\u001b[39m\n\u001b[31m+                 \"html\": \"<div class=\\\"oax_portal_stage oax_pad_top_1 oax-scroll-container\\\">\",\u001b[39m\n\u001b[31m+                 \"target\": Array [\u001b[39m\n\u001b[31m+                   \".oax_portal_stage\",\u001b[39m\n\u001b[31m+                 ],\u001b[39m\n\u001b[31m+               },\u001b[39m\n\u001b[31m+             ],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element has insufficient color contrast of 1.54 (foreground color: #ffffff, background color: #cfcfd7, font size: 13.5pt (18px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+         \"html\": \"<p>Ghidul nostru te va duce în cele mai interesante locuri&nbsp;din Româna și te&nbsp;va ajuta să-ți planifici călătoria.</p>\",\u001b[39m\n\u001b[31m+         \"impact\": \"serious\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \"section > p\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"bgColor\": \"#e8e9f2\",\u001b[39m\n\u001b[31m+               \"contrastRatio\": 4.15,\u001b[39m\n\u001b[31m+               \"expectedContrastRatio\": \"4.5:1\",\u001b[39m\n\u001b[31m+               \"fgColor\": \"#6f6f6f\",\u001b[39m\n\u001b[31m+               \"fontSize\": \"10.5pt (14px)\",\u001b[39m\n\u001b[31m+               \"fontWeight\": \"normal\",\u001b[39m\n\u001b[31m+               \"messageKey\": null,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element has insufficient color contrast of 4.15 (foreground color: #6f6f6f, background color: #e8e9f2, font size: 10.5pt (14px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [\u001b[39m\n\u001b[31m+               Object {\u001b[39m\n\u001b[31m+                 \"html\": \"<div class=\\\"oax_portal_stage oax_pad_top_1 oax-scroll-container\\\">\",\u001b[39m\n\u001b[31m+                 \"target\": Array [\u001b[39m\n\u001b[31m+                   \".oax_portal_stage\",\u001b[39m\n\u001b[31m+                 ],\u001b[39m\n\u001b[31m+               },\u001b[39m\n\u001b[31m+             ],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element has insufficient color contrast of 4.15 (foreground color: #6f6f6f, background color: #e8e9f2, font size: 10.5pt (14px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_copyright_on_light\\\">\u001b[39m\n\u001b[31m+ \t\t\u001b[39m\n\u001b[31m+ \tFoto:\tAgnes Elena Crăciun, Unsplash\u001b[39m\n\u001b[31m+ \t</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"serious\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_copyright_on_light\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.color\",\u001b[39m\n\u001b[31m+       \"wcag2aa\",\u001b[39m\n\u001b[31m+       \"wcag143\",\u001b[39m\n\u001b[31m+       \"TTv5\",\u001b[39m\n\u001b[31m+       \"TT13.c\",\u001b[39m\n\u001b[31m+       \"EN-301-549\",\u001b[39m\n\u001b[31m+       \"EN-9.1.4.3\",\u001b[39m\n\u001b[31m+       \"ACT\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensures <img> elements have alternate text or a role of none or presentation\",\u001b[39m\n\u001b[31m+     \"help\": \"Images must have alternate text\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/image-alt?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"image-alt\",\u001b[39m\n\u001b[31m+     \"impact\": \"critical\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": null,\u001b[39m\n\u001b[31m+             \"id\": \"has-alt\",\u001b[39m\n\u001b[31m+             \"impact\": \"critical\",\u001b[39m\n\u001b[31m+             \"message\": \"Element does not have an alt attribute\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": null,\u001b[39m\n\u001b[31m+             \"id\": \"aria-label\",\u001b[39m\n\u001b[31m+             \"impact\": \"critical\",\u001b[39m\n\u001b[31m+             \"message\": \"aria-label attribute does not exist or is empty\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": null,\u001b[39m\n\u001b[31m+             \"id\": \"aria-labelledby\",\u001b[39m\n\u001b[31m+             \"impact\": \"critical\",\u001b[39m\n\u001b[31m+             \"message\": \"aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"messageKey\": \"noAttr\",\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"non-empty-title\",\u001b[39m\n\u001b[31m+             \"impact\": \"critical\",\u001b[39m\n\u001b[31m+             \"message\": \"Element has no title attribute\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": null,\u001b[39m\n\u001b[31m+             \"id\": \"presentational-role\",\u001b[39m\n\u001b[31m+             \"impact\": \"critical\",\u001b[39m\n\u001b[31m+             \"message\": \"Element's default semantics were not overridden with role=\\\"none\\\" or role=\\\"presentation\\\"\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element does not have an alt attribute\u001b[39m\n\u001b[31m+   aria-label attribute does not exist or is empty\u001b[39m\n\u001b[31m+   aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty\u001b[39m\n\u001b[31m+   Element has no title attribute\u001b[39m\n\u001b[31m+   Element's default semantics were not overridden with role=\\\"none\\\" or role=\\\"presentation\\\"\",\u001b[39m\n\u001b[31m+         \"html\": \"<img src=\\\"https://res.oastatic.com/themes/oad-romaniatravel/css/images/EU-RO-logo.png\\\" style=\\\"position: absolute; width: 35%; left: 32px; bottom: 37px;\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"critical\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_portal_wrapper > img\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.text-alternatives\",\u001b[39m\n\u001b[31m+       \"wcag2a\",\u001b[39m\n\u001b[31m+       \"wcag111\",\u001b[39m\n\u001b[31m+       \"section508\",\u001b[39m\n\u001b[31m+       \"section508.22.a\",\u001b[39m\n\u001b[31m+       \"TTv5\",\u001b[39m\n\u001b[31m+       \"TT7.a\",\u001b[39m\n\u001b[31m+       \"TT7.b\",\u001b[39m\n\u001b[31m+       \"EN-301-549\",\u001b[39m\n\u001b[31m+       \"EN-9.1.1.1\",\u001b[39m\n\u001b[31m+       \"ACT\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensures all page content is contained by landmarks\",\u001b[39m\n\u001b[31m+     \"help\": \"All page content should be contained by landmarks\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/region?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"region\",\u001b[39m\n\u001b[31m+     \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_custompage_header_cont oax_index_title oax_marg_top_neg_22\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t<h1 class=\\\"oax_bold oax_custom_font\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tStai activ și în sezonul rece: Aventuri și peisaje de vis iarna</h1>\u001b[39m\n\u001b[31m+ \t\t\t\t</div>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_custompage_header_cont\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-25943403 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tPriveliște spre Semenic</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-25943403 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tPaul Wasicsek, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY</a>, Redacția Outdooractive</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-25943403 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-64579929 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tMunții Făgăraș</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-64579929 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tLucian Dachman, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY</a>, Unsplash</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-64579929 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-35929168 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tMuntele Băișorii, Cluj, Romania</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-35929168 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tLaurentiu Galdau, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/publicdomain/zero/1.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC0</a>, Unsplash</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-35929168 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tPădure lângă Mediaș</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-55124239 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\t<a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by-nd/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY-ND</a>, RomaniaTravel.guide</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-55124239 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.keyboard\",\u001b[39m\n\u001b[31m+       \"best-practice\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+ ]\u001b[39m\n\n\u001b[0m \u001b[90m 24 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 25 |\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 26 |\u001b[39m   expect(accessibilityScanResults\u001b[33m.\u001b[39mviolations)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m \u001b[90m// 5\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 27 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 28 |\u001b[39m\u001b[0m\n\n\u001b[2m    at C:\\Learning\\Playwright\\playwright-stuff\\tests\\rom_travel\\acces.test.ts:26:47\u001b[22m"
                    }
                  ],
                  "stdout": [],
                  "stderr": [],
                  "retry": 1,
                  "startTime": "2024-03-03T13:02:42.994Z",
                  "attachments": [
                    {
                      "name": "accessibility-scan-results",
                      "contentType": "application/json",
                      "body": "ewogICJ0ZXN0RW5naW5lIjogewogICAgIm5hbWUiOiAiYXhlLWNvcmUiLAogICAgInZlcnNpb24iOiAiNC44LjQiCiAgfSwKICAidGVzdFJ1bm5lciI6IHsKICAgICJuYW1lIjogImF4ZSIKICB9LAogICJ0ZXN0RW52aXJvbm1lbnQiOiB7CiAgICAidXNlckFnZW50IjogIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMjEuMC42MTY3LjU3IFNhZmFyaS81MzcuMzYiLAogICAgIndpbmRvd1dpZHRoIjogMTI4MCwKICAgICJ3aW5kb3dIZWlnaHQiOiA3MjAsCiAgICAib3JpZW50YXRpb25BbmdsZSI6IDAsCiAgICAib3JpZW50YXRpb25UeXBlIjogImxhbmRzY2FwZS1wcmltYXJ5IgogIH0sCiAgInRpbWVzdGFtcCI6ICIyMDI0LTAzLTAzVDEzOjAyOjQ4LjU5MloiLAogICJ1cmwiOiAiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvLyIsCiAgInRvb2xPcHRpb25zIjogewogICAgInJlcG9ydGVyIjogInYxIgogIH0sCiAgImluYXBwbGljYWJsZSI6IFsKICAgIHsKICAgICAgImlkIjogImFjY2Vzc2tleXMiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5rZXlib2FyZCIsCiAgICAgICAgImJlc3QtcHJhY3RpY2UiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIGV2ZXJ5IGFjY2Vzc2tleSBhdHRyaWJ1dGUgdmFsdWUgaXMgdW5pcXVlIiwKICAgICAgImhlbHAiOiAiYWNjZXNza2V5IGF0dHJpYnV0ZSB2YWx1ZSBzaG91bGQgYmUgdW5pcXVlIiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80LjgvYWNjZXNza2V5cz9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogW10KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJhcmVhLWFsdCIsCiAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0LnRleHQtYWx0ZXJuYXRpdmVzIiwKICAgICAgICAid2NhZzJhIiwKICAgICAgICAid2NhZzI0NCIsCiAgICAgICAgIndjYWc0MTIiLAogICAgICAgICJzZWN0aW9uNTA4IiwKICAgICAgICAic2VjdGlvbjUwOC4yMi5hIiwKICAgICAgICAiVFR2NSIsCiAgICAgICAgIlRUNi5hIiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuMi40LjQiLAogICAgICAgICJFTi05LjQuMS4yIiwKICAgICAgICAiQUNUIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyA8YXJlYT4gZWxlbWVudHMgb2YgaW1hZ2UgbWFwcyBoYXZlIGFsdGVybmF0ZSB0ZXh0IiwKICAgICAgImhlbHAiOiAiQWN0aXZlIDxhcmVhPiBlbGVtZW50cyBtdXN0IGhhdmUgYWx0ZXJuYXRlIHRleHQiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9hcmVhLWFsdD9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogW10KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJhcmlhLWFsbG93ZWQtcm9sZSIsCiAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0LmFyaWEiLAogICAgICAgICJiZXN0LXByYWN0aWNlIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyByb2xlIGF0dHJpYnV0ZSBoYXMgYW4gYXBwcm9wcmlhdGUgdmFsdWUgZm9yIHRoZSBlbGVtZW50IiwKICAgICAgImhlbHAiOiAiQVJJQSByb2xlIHNob3VsZCBiZSBhcHByb3ByaWF0ZSBmb3IgdGhlIGVsZW1lbnQiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9hcmlhLWFsbG93ZWQtcm9sZT9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogW10KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJhcmlhLWJyYWlsbGUtZXF1aXZhbGVudCIsCiAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0LmFyaWEiLAogICAgICAgICJ3Y2FnMmEiLAogICAgICAgICJ3Y2FnNDEyIiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuNC4xLjIiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmUgYXJpYS1icmFpbGxlbGFiZWwgYW5kIGFyaWEtYnJhaWxsZXJvbGVkZXNjcmlwdGlvbiBoYXZlIGEgbm9uLWJyYWlsbGUgZXF1aXZhbGVudCIsCiAgICAgICJoZWxwIjogImFyaWEtYnJhaWxsZSBhdHRyaWJ1dGVzIG11c3QgaGF2ZSBhIG5vbi1icmFpbGxlIGVxdWl2YWxlbnQiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9hcmlhLWJyYWlsbGUtZXF1aXZhbGVudD9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogW10KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJhcmlhLWNvbW1hbmQtbmFtZSIsCiAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0LmFyaWEiLAogICAgICAgICJ3Y2FnMmEiLAogICAgICAgICJ3Y2FnNDEyIiwKICAgICAgICAiVFR2NSIsCiAgICAgICAgIlRUNi5hIiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuNC4xLjIiLAogICAgICAgICJBQ1QiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIGV2ZXJ5IEFSSUEgYnV0dG9uLCBsaW5rIGFuZCBtZW51aXRlbSBoYXMgYW4gYWNjZXNzaWJsZSBuYW1lIiwKICAgICAgImhlbHAiOiAiQVJJQSBjb21tYW5kcyBtdXN0IGhhdmUgYW4gYWNjZXNzaWJsZSBuYW1lIiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80LjgvYXJpYS1jb21tYW5kLW5hbWU/YXBwbGljYXRpb249cGxheXdyaWdodCIsCiAgICAgICJub2RlcyI6IFtdCiAgICB9LAogICAgewogICAgICAiaWQiOiAiYXJpYS1kZXByZWNhdGVkLXJvbGUiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5hcmlhIiwKICAgICAgICAid2NhZzJhIiwKICAgICAgICAid2NhZzQxMiIsCiAgICAgICAgIkVOLTMwMS01NDkiLAogICAgICAgICJFTi05LjQuMS4yIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyBlbGVtZW50cyBkbyBub3QgdXNlIGRlcHJlY2F0ZWQgcm9sZXMiLAogICAgICAiaGVscCI6ICJEZXByZWNhdGVkIEFSSUEgcm9sZXMgbXVzdCBub3QgYmUgdXNlZCIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L2FyaWEtZGVwcmVjYXRlZC1yb2xlP2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImFyaWEtZGlhbG9nLW5hbWUiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5hcmlhIiwKICAgICAgICAiYmVzdC1wcmFjdGljZSIKICAgICAgXSwKICAgICAgImRlc2NyaXB0aW9uIjogIkVuc3VyZXMgZXZlcnkgQVJJQSBkaWFsb2cgYW5kIGFsZXJ0ZGlhbG9nIG5vZGUgaGFzIGFuIGFjY2Vzc2libGUgbmFtZSIsCiAgICAgICJoZWxwIjogIkFSSUEgZGlhbG9nIGFuZCBhbGVydGRpYWxvZyBub2RlcyBzaG91bGQgaGF2ZSBhbiBhY2Nlc3NpYmxlIG5hbWUiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9hcmlhLWRpYWxvZy1uYW1lP2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImFyaWEtaGlkZGVuLWZvY3VzIiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQubmFtZS1yb2xlLXZhbHVlIiwKICAgICAgICAid2NhZzJhIiwKICAgICAgICAid2NhZzQxMiIsCiAgICAgICAgIlRUdjUiLAogICAgICAgICJUVDYuYSIsCiAgICAgICAgIkVOLTMwMS01NDkiLAogICAgICAgICJFTi05LjQuMS4yIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyBhcmlhLWhpZGRlbiBlbGVtZW50cyBhcmUgbm90IGZvY3VzYWJsZSBub3IgY29udGFpbiBmb2N1c2FibGUgZWxlbWVudHMiLAogICAgICAiaGVscCI6ICJBUklBIGhpZGRlbiBlbGVtZW50IG11c3Qgbm90IGJlIGZvY3VzYWJsZSBvciBjb250YWluIGZvY3VzYWJsZSBlbGVtZW50cyIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L2FyaWEtaGlkZGVuLWZvY3VzP2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImFyaWEtaW5wdXQtZmllbGQtbmFtZSIsCiAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0LmFyaWEiLAogICAgICAgICJ3Y2FnMmEiLAogICAgICAgICJ3Y2FnNDEyIiwKICAgICAgICAiVFR2NSIsCiAgICAgICAgIlRUNS5jIiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuNC4xLjIiLAogICAgICAgICJBQ1QiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIGV2ZXJ5IEFSSUEgaW5wdXQgZmllbGQgaGFzIGFuIGFjY2Vzc2libGUgbmFtZSIsCiAgICAgICJoZWxwIjogIkFSSUEgaW5wdXQgZmllbGRzIG11c3QgaGF2ZSBhbiBhY2Nlc3NpYmxlIG5hbWUiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9hcmlhLWlucHV0LWZpZWxkLW5hbWU/YXBwbGljYXRpb249cGxheXdyaWdodCIsCiAgICAgICJub2RlcyI6IFtdCiAgICB9LAogICAgewogICAgICAiaWQiOiAiYXJpYS1tZXRlci1uYW1lIiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQuYXJpYSIsCiAgICAgICAgIndjYWcyYSIsCiAgICAgICAgIndjYWcxMTEiLAogICAgICAgICJFTi0zMDEtNTQ5IiwKICAgICAgICAiRU4tOS4xLjEuMSIKICAgICAgXSwKICAgICAgImRlc2NyaXB0aW9uIjogIkVuc3VyZXMgZXZlcnkgQVJJQSBtZXRlciBub2RlIGhhcyBhbiBhY2Nlc3NpYmxlIG5hbWUiLAogICAgICAiaGVscCI6ICJBUklBIG1ldGVyIG5vZGVzIG11c3QgaGF2ZSBhbiBhY2Nlc3NpYmxlIG5hbWUiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9hcmlhLW1ldGVyLW5hbWU/YXBwbGljYXRpb249cGxheXdyaWdodCIsCiAgICAgICJub2RlcyI6IFtdCiAgICB9LAogICAgewogICAgICAiaWQiOiAiYXJpYS1wcm9ncmVzc2Jhci1uYW1lIiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQuYXJpYSIsCiAgICAgICAgIndjYWcyYSIsCiAgICAgICAgIndjYWcxMTEiLAogICAgICAgICJFTi0zMDEtNTQ5IiwKICAgICAgICAiRU4tOS4xLjEuMSIKICAgICAgXSwKICAgICAgImRlc2NyaXB0aW9uIjogIkVuc3VyZXMgZXZlcnkgQVJJQSBwcm9ncmVzc2JhciBub2RlIGhhcyBhbiBhY2Nlc3NpYmxlIG5hbWUiLAogICAgICAiaGVscCI6ICJBUklBIHByb2dyZXNzYmFyIG5vZGVzIG11c3QgaGF2ZSBhbiBhY2Nlc3NpYmxlIG5hbWUiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9hcmlhLXByb2dyZXNzYmFyLW5hbWU/YXBwbGljYXRpb249cGxheXdyaWdodCIsCiAgICAgICJub2RlcyI6IFtdCiAgICB9LAogICAgewogICAgICAiaWQiOiAiYXJpYS1yZXF1aXJlZC1hdHRyIiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQuYXJpYSIsCiAgICAgICAgIndjYWcyYSIsCiAgICAgICAgIndjYWc0MTIiLAogICAgICAgICJFTi0zMDEtNTQ5IiwKICAgICAgICAiRU4tOS40LjEuMiIKICAgICAgXSwKICAgICAgImRlc2NyaXB0aW9uIjogIkVuc3VyZXMgZWxlbWVudHMgd2l0aCBBUklBIHJvbGVzIGhhdmUgYWxsIHJlcXVpcmVkIEFSSUEgYXR0cmlidXRlcyIsCiAgICAgICJoZWxwIjogIlJlcXVpcmVkIEFSSUEgYXR0cmlidXRlcyBtdXN0IGJlIHByb3ZpZGVkIiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80LjgvYXJpYS1yZXF1aXJlZC1hdHRyP2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImFyaWEtcmVxdWlyZWQtY2hpbGRyZW4iLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5hcmlhIiwKICAgICAgICAid2NhZzJhIiwKICAgICAgICAid2NhZzEzMSIsCiAgICAgICAgIkVOLTMwMS01NDkiLAogICAgICAgICJFTi05LjEuMy4xIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyBlbGVtZW50cyB3aXRoIGFuIEFSSUEgcm9sZSB0aGF0IHJlcXVpcmUgY2hpbGQgcm9sZXMgY29udGFpbiB0aGVtIiwKICAgICAgImhlbHAiOiAiQ2VydGFpbiBBUklBIHJvbGVzIG11c3QgY29udGFpbiBwYXJ0aWN1bGFyIGNoaWxkcmVuIiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80LjgvYXJpYS1yZXF1aXJlZC1jaGlsZHJlbj9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogW10KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJhcmlhLXJlcXVpcmVkLXBhcmVudCIsCiAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0LmFyaWEiLAogICAgICAgICJ3Y2FnMmEiLAogICAgICAgICJ3Y2FnMTMxIiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuMS4zLjEiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIGVsZW1lbnRzIHdpdGggYW4gQVJJQSByb2xlIHRoYXQgcmVxdWlyZSBwYXJlbnQgcm9sZXMgYXJlIGNvbnRhaW5lZCBieSB0aGVtIiwKICAgICAgImhlbHAiOiAiQ2VydGFpbiBBUklBIHJvbGVzIG11c3QgYmUgY29udGFpbmVkIGJ5IHBhcnRpY3VsYXIgcGFyZW50cyIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L2FyaWEtcmVxdWlyZWQtcGFyZW50P2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImFyaWEtcm9sZXMiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5hcmlhIiwKICAgICAgICAid2NhZzJhIiwKICAgICAgICAid2NhZzQxMiIsCiAgICAgICAgIkVOLTMwMS01NDkiLAogICAgICAgICJFTi05LjQuMS4yIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyBhbGwgZWxlbWVudHMgd2l0aCBhIHJvbGUgYXR0cmlidXRlIHVzZSBhIHZhbGlkIHZhbHVlIiwKICAgICAgImhlbHAiOiAiQVJJQSByb2xlcyB1c2VkIG11c3QgY29uZm9ybSB0byB2YWxpZCB2YWx1ZXMiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9hcmlhLXJvbGVzP2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImFyaWEtdGV4dCIsCiAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0LmFyaWEiLAogICAgICAgICJiZXN0LXByYWN0aWNlIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyByb2xlPVwidGV4dFwiIGlzIHVzZWQgb24gZWxlbWVudHMgd2l0aCBubyBmb2N1c2FibGUgZGVzY2VuZGFudHMiLAogICAgICAiaGVscCI6ICJcInJvbGU9dGV4dFwiIHNob3VsZCBoYXZlIG5vIGZvY3VzYWJsZSBkZXNjZW5kYW50cyIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L2FyaWEtdGV4dD9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogW10KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJhcmlhLXRvZ2dsZS1maWVsZC1uYW1lIiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQuYXJpYSIsCiAgICAgICAgIndjYWcyYSIsCiAgICAgICAgIndjYWc0MTIiLAogICAgICAgICJUVHY1IiwKICAgICAgICAiVFQ1LmMiLAogICAgICAgICJFTi0zMDEtNTQ5IiwKICAgICAgICAiRU4tOS40LjEuMiIsCiAgICAgICAgIkFDVCIKICAgICAgXSwKICAgICAgImRlc2NyaXB0aW9uIjogIkVuc3VyZXMgZXZlcnkgQVJJQSB0b2dnbGUgZmllbGQgaGFzIGFuIGFjY2Vzc2libGUgbmFtZSIsCiAgICAgICJoZWxwIjogIkFSSUEgdG9nZ2xlIGZpZWxkcyBtdXN0IGhhdmUgYW4gYWNjZXNzaWJsZSBuYW1lIiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80LjgvYXJpYS10b2dnbGUtZmllbGQtbmFtZT9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogW10KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJhcmlhLXRvb2x0aXAtbmFtZSIsCiAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0LmFyaWEiLAogICAgICAgICJ3Y2FnMmEiLAogICAgICAgICJ3Y2FnNDEyIiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuNC4xLjIiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIGV2ZXJ5IEFSSUEgdG9vbHRpcCBub2RlIGhhcyBhbiBhY2Nlc3NpYmxlIG5hbWUiLAogICAgICAiaGVscCI6ICJBUklBIHRvb2x0aXAgbm9kZXMgbXVzdCBoYXZlIGFuIGFjY2Vzc2libGUgbmFtZSIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L2FyaWEtdG9vbHRpcC1uYW1lP2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImFyaWEtdHJlZWl0ZW0tbmFtZSIsCiAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0LmFyaWEiLAogICAgICAgICJiZXN0LXByYWN0aWNlIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyBldmVyeSBBUklBIHRyZWVpdGVtIG5vZGUgaGFzIGFuIGFjY2Vzc2libGUgbmFtZSIsCiAgICAgICJoZWxwIjogIkFSSUEgdHJlZWl0ZW0gbm9kZXMgc2hvdWxkIGhhdmUgYW4gYWNjZXNzaWJsZSBuYW1lIiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80LjgvYXJpYS10cmVlaXRlbS1uYW1lP2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImF1dG9jb21wbGV0ZS12YWxpZCIsCiAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0LmZvcm1zIiwKICAgICAgICAid2NhZzIxYWEiLAogICAgICAgICJ3Y2FnMTM1IiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuMS4zLjUiLAogICAgICAgICJBQ1QiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmUgdGhlIGF1dG9jb21wbGV0ZSBhdHRyaWJ1dGUgaXMgY29ycmVjdCBhbmQgc3VpdGFibGUgZm9yIHRoZSBmb3JtIGZpZWxkIiwKICAgICAgImhlbHAiOiAiYXV0b2NvbXBsZXRlIGF0dHJpYnV0ZSBtdXN0IGJlIHVzZWQgY29ycmVjdGx5IiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80LjgvYXV0b2NvbXBsZXRlLXZhbGlkP2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImJsaW5rIiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQudGltZS1hbmQtbWVkaWEiLAogICAgICAgICJ3Y2FnMmEiLAogICAgICAgICJ3Y2FnMjIyIiwKICAgICAgICAic2VjdGlvbjUwOCIsCiAgICAgICAgInNlY3Rpb241MDguMjIuaiIsCiAgICAgICAgIlRUdjUiLAogICAgICAgICJUVDIuYiIsCiAgICAgICAgIkVOLTMwMS01NDkiLAogICAgICAgICJFTi05LjIuMi4yIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyA8Ymxpbms+IGVsZW1lbnRzIGFyZSBub3QgdXNlZCIsCiAgICAgICJoZWxwIjogIjxibGluaz4gZWxlbWVudHMgYXJlIGRlcHJlY2F0ZWQgYW5kIG11c3Qgbm90IGJlIHVzZWQiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9ibGluaz9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogW10KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJkZWZpbml0aW9uLWxpc3QiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5zdHJ1Y3R1cmUiLAogICAgICAgICJ3Y2FnMmEiLAogICAgICAgICJ3Y2FnMTMxIiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuMS4zLjEiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIDxkbD4gZWxlbWVudHMgYXJlIHN0cnVjdHVyZWQgY29ycmVjdGx5IiwKICAgICAgImhlbHAiOiAiPGRsPiBlbGVtZW50cyBtdXN0IG9ubHkgZGlyZWN0bHkgY29udGFpbiBwcm9wZXJseS1vcmRlcmVkIDxkdD4gYW5kIDxkZD4gZ3JvdXBzLCA8c2NyaXB0PiwgPHRlbXBsYXRlPiBvciA8ZGl2PiBlbGVtZW50cyIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L2RlZmluaXRpb24tbGlzdD9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogW10KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJkbGl0ZW0iLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5zdHJ1Y3R1cmUiLAogICAgICAgICJ3Y2FnMmEiLAogICAgICAgICJ3Y2FnMTMxIiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuMS4zLjEiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIDxkdD4gYW5kIDxkZD4gZWxlbWVudHMgYXJlIGNvbnRhaW5lZCBieSBhIDxkbD4iLAogICAgICAiaGVscCI6ICI8ZHQ+IGFuZCA8ZGQ+IGVsZW1lbnRzIG11c3QgYmUgY29udGFpbmVkIGJ5IGEgPGRsPiIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L2RsaXRlbT9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogW10KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJlbXB0eS10YWJsZS1oZWFkZXIiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5uYW1lLXJvbGUtdmFsdWUiLAogICAgICAgICJiZXN0LXByYWN0aWNlIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyB0YWJsZSBoZWFkZXJzIGhhdmUgZGlzY2VybmlibGUgdGV4dCIsCiAgICAgICJoZWxwIjogIlRhYmxlIGhlYWRlciB0ZXh0IHNob3VsZCBub3QgYmUgZW1wdHkiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9lbXB0eS10YWJsZS1oZWFkZXI/YXBwbGljYXRpb249cGxheXdyaWdodCIsCiAgICAgICJub2RlcyI6IFtdCiAgICB9LAogICAgewogICAgICAiaWQiOiAiZnJhbWUtZm9jdXNhYmxlLWNvbnRlbnQiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5rZXlib2FyZCIsCiAgICAgICAgIndjYWcyYSIsCiAgICAgICAgIndjYWcyMTEiLAogICAgICAgICJUVHY1IiwKICAgICAgICAiVFQ0LmEiLAogICAgICAgICJFTi0zMDEtNTQ5IiwKICAgICAgICAiRU4tOS4yLjEuMSIKICAgICAgXSwKICAgICAgImRlc2NyaXB0aW9uIjogIkVuc3VyZXMgPGZyYW1lPiBhbmQgPGlmcmFtZT4gZWxlbWVudHMgd2l0aCBmb2N1c2FibGUgY29udGVudCBkbyBub3QgaGF2ZSB0YWJpbmRleD0tMSIsCiAgICAgICJoZWxwIjogIkZyYW1lcyB3aXRoIGZvY3VzYWJsZSBjb250ZW50IG11c3Qgbm90IGhhdmUgdGFiaW5kZXg9LTEiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9mcmFtZS1mb2N1c2FibGUtY29udGVudD9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogW10KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJmcmFtZS10ZXN0ZWQiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5zdHJ1Y3R1cmUiLAogICAgICAgICJiZXN0LXByYWN0aWNlIiwKICAgICAgICAicmV2aWV3LWl0ZW0iCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIDxpZnJhbWU+IGFuZCA8ZnJhbWU+IGVsZW1lbnRzIGNvbnRhaW4gdGhlIGF4ZS1jb3JlIHNjcmlwdCIsCiAgICAgICJoZWxwIjogIkZyYW1lcyBzaG91bGQgYmUgdGVzdGVkIHdpdGggYXhlLWNvcmUiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9mcmFtZS10ZXN0ZWQ/YXBwbGljYXRpb249cGxheXdyaWdodCIsCiAgICAgICJub2RlcyI6IFtdCiAgICB9LAogICAgewogICAgICAiaWQiOiAiZnJhbWUtdGl0bGUtdW5pcXVlIiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQudGV4dC1hbHRlcm5hdGl2ZXMiLAogICAgICAgICJ3Y2FnMmEiLAogICAgICAgICJ3Y2FnNDEyIiwKICAgICAgICAiVFR2NSIsCiAgICAgICAgIlRUMTIuZCIsCiAgICAgICAgIkVOLTMwMS01NDkiLAogICAgICAgICJFTi05LjQuMS4yIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyA8aWZyYW1lPiBhbmQgPGZyYW1lPiBlbGVtZW50cyBjb250YWluIGEgdW5pcXVlIHRpdGxlIGF0dHJpYnV0ZSIsCiAgICAgICJoZWxwIjogIkZyYW1lcyBtdXN0IGhhdmUgYSB1bmlxdWUgdGl0bGUgYXR0cmlidXRlIiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80LjgvZnJhbWUtdGl0bGUtdW5pcXVlP2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImZyYW1lLXRpdGxlIiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQudGV4dC1hbHRlcm5hdGl2ZXMiLAogICAgICAgICJ3Y2FnMmEiLAogICAgICAgICJ3Y2FnNDEyIiwKICAgICAgICAic2VjdGlvbjUwOCIsCiAgICAgICAgInNlY3Rpb241MDguMjIuaSIsCiAgICAgICAgIlRUdjUiLAogICAgICAgICJUVDEyLmQiLAogICAgICAgICJFTi0zMDEtNTQ5IiwKICAgICAgICAiRU4tOS40LjEuMiIKICAgICAgXSwKICAgICAgImRlc2NyaXB0aW9uIjogIkVuc3VyZXMgPGlmcmFtZT4gYW5kIDxmcmFtZT4gZWxlbWVudHMgaGF2ZSBhbiBhY2Nlc3NpYmxlIG5hbWUiLAogICAgICAiaGVscCI6ICJGcmFtZXMgbXVzdCBoYXZlIGFuIGFjY2Vzc2libGUgbmFtZSIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L2ZyYW1lLXRpdGxlP2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImh0bWwteG1sLWxhbmctbWlzbWF0Y2giLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5sYW5ndWFnZSIsCiAgICAgICAgIndjYWcyYSIsCiAgICAgICAgIndjYWczMTEiLAogICAgICAgICJFTi0zMDEtNTQ5IiwKICAgICAgICAiRU4tOS4zLjEuMSIsCiAgICAgICAgIkFDVCIKICAgICAgXSwKICAgICAgImRlc2NyaXB0aW9uIjogIkVuc3VyZSB0aGF0IEhUTUwgZWxlbWVudHMgd2l0aCBib3RoIHZhbGlkIGxhbmcgYW5kIHhtbDpsYW5nIGF0dHJpYnV0ZXMgYWdyZWUgb24gdGhlIGJhc2UgbGFuZ3VhZ2Ugb2YgdGhlIHBhZ2UiLAogICAgICAiaGVscCI6ICJIVE1MIGVsZW1lbnRzIHdpdGggbGFuZyBhbmQgeG1sOmxhbmcgbXVzdCBoYXZlIHRoZSBzYW1lIGJhc2UgbGFuZ3VhZ2UiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9odG1sLXhtbC1sYW5nLW1pc21hdGNoP2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImlucHV0LWltYWdlLWFsdCIsCiAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0LnRleHQtYWx0ZXJuYXRpdmVzIiwKICAgICAgICAid2NhZzJhIiwKICAgICAgICAid2NhZzExMSIsCiAgICAgICAgIndjYWc0MTIiLAogICAgICAgICJzZWN0aW9uNTA4IiwKICAgICAgICAic2VjdGlvbjUwOC4yMi5hIiwKICAgICAgICAiVFR2NSIsCiAgICAgICAgIlRUNy5hIiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuMS4xLjEiLAogICAgICAgICJFTi05LjQuMS4yIiwKICAgICAgICAiQUNUIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyA8aW5wdXQgdHlwZT1cImltYWdlXCI+IGVsZW1lbnRzIGhhdmUgYWx0ZXJuYXRlIHRleHQiLAogICAgICAiaGVscCI6ICJJbWFnZSBidXR0b25zIG11c3QgaGF2ZSBhbHRlcm5hdGUgdGV4dCIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L2lucHV0LWltYWdlLWFsdD9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogW10KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJsYW5kbWFyay1jb21wbGVtZW50YXJ5LWlzLXRvcC1sZXZlbCIsCiAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0LnNlbWFudGljcyIsCiAgICAgICAgImJlc3QtcHJhY3RpY2UiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIHRoZSBjb21wbGVtZW50YXJ5IGxhbmRtYXJrIG9yIGFzaWRlIGlzIGF0IHRvcCBsZXZlbCIsCiAgICAgICJoZWxwIjogIkFzaWRlIHNob3VsZCBub3QgYmUgY29udGFpbmVkIGluIGFub3RoZXIgbGFuZG1hcmsiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9sYW5kbWFyay1jb21wbGVtZW50YXJ5LWlzLXRvcC1sZXZlbD9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogW10KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJsaW5rLWluLXRleHQtYmxvY2siLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5jb2xvciIsCiAgICAgICAgIndjYWcyYSIsCiAgICAgICAgIndjYWcxNDEiLAogICAgICAgICJUVHY1IiwKICAgICAgICAiVFQxMy5hIiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuMS40LjEiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmUgbGlua3MgYXJlIGRpc3Rpbmd1aXNoZWQgZnJvbSBzdXJyb3VuZGluZyB0ZXh0IGluIGEgd2F5IHRoYXQgZG9lcyBub3QgcmVseSBvbiBjb2xvciIsCiAgICAgICJoZWxwIjogIkxpbmtzIG11c3QgYmUgZGlzdGluZ3Vpc2hhYmxlIHdpdGhvdXQgcmVseWluZyBvbiBjb2xvciIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L2xpbmstaW4tdGV4dC1ibG9jaz9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogW10KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJtYXJxdWVlIiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQucGFyc2luZyIsCiAgICAgICAgIndjYWcyYSIsCiAgICAgICAgIndjYWcyMjIiLAogICAgICAgICJUVHY1IiwKICAgICAgICAiVFQyLmIiLAogICAgICAgICJFTi0zMDEtNTQ5IiwKICAgICAgICAiRU4tOS4yLjIuMiIKICAgICAgXSwKICAgICAgImRlc2NyaXB0aW9uIjogIkVuc3VyZXMgPG1hcnF1ZWU+IGVsZW1lbnRzIGFyZSBub3QgdXNlZCIsCiAgICAgICJoZWxwIjogIjxtYXJxdWVlPiBlbGVtZW50cyBhcmUgZGVwcmVjYXRlZCBhbmQgbXVzdCBub3QgYmUgdXNlZCIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L21hcnF1ZWU/YXBwbGljYXRpb249cGxheXdyaWdodCIsCiAgICAgICJub2RlcyI6IFtdCiAgICB9LAogICAgewogICAgICAiaWQiOiAibWV0YS1yZWZyZXNoIiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQudGltZS1hbmQtbWVkaWEiLAogICAgICAgICJ3Y2FnMmEiLAogICAgICAgICJ3Y2FnMjIxIiwKICAgICAgICAiVFR2NSIsCiAgICAgICAgIlRUOC5hIiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuMi4yLjEiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIDxtZXRhIGh0dHAtZXF1aXY9XCJyZWZyZXNoXCI+IGlzIG5vdCB1c2VkIGZvciBkZWxheWVkIHJlZnJlc2giLAogICAgICAiaGVscCI6ICJEZWxheWVkIHJlZnJlc2ggdW5kZXIgMjAgaG91cnMgbXVzdCBub3QgYmUgdXNlZCIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L21ldGEtcmVmcmVzaD9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogW10KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJvYmplY3QtYWx0IiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQudGV4dC1hbHRlcm5hdGl2ZXMiLAogICAgICAgICJ3Y2FnMmEiLAogICAgICAgICJ3Y2FnMTExIiwKICAgICAgICAic2VjdGlvbjUwOCIsCiAgICAgICAgInNlY3Rpb241MDguMjIuYSIsCiAgICAgICAgIkVOLTMwMS01NDkiLAogICAgICAgICJFTi05LjEuMS4xIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyA8b2JqZWN0PiBlbGVtZW50cyBoYXZlIGFsdGVybmF0ZSB0ZXh0IiwKICAgICAgImhlbHAiOiAiPG9iamVjdD4gZWxlbWVudHMgbXVzdCBoYXZlIGFsdGVybmF0ZSB0ZXh0IiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80Ljgvb2JqZWN0LWFsdD9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogW10KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJyb2xlLWltZy1hbHQiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC50ZXh0LWFsdGVybmF0aXZlcyIsCiAgICAgICAgIndjYWcyYSIsCiAgICAgICAgIndjYWcxMTEiLAogICAgICAgICJzZWN0aW9uNTA4IiwKICAgICAgICAic2VjdGlvbjUwOC4yMi5hIiwKICAgICAgICAiVFR2NSIsCiAgICAgICAgIlRUNy5hIiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuMS4xLjEiLAogICAgICAgICJBQ1QiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIFtyb2xlPVwiaW1nXCJdIGVsZW1lbnRzIGhhdmUgYWx0ZXJuYXRlIHRleHQiLAogICAgICAiaGVscCI6ICJbcm9sZT1cImltZ1wiXSBlbGVtZW50cyBtdXN0IGhhdmUgYW4gYWx0ZXJuYXRpdmUgdGV4dCIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L3JvbGUtaW1nLWFsdD9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogW10KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJzY29wZS1hdHRyLXZhbGlkIiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQudGFibGVzIiwKICAgICAgICAiYmVzdC1wcmFjdGljZSIKICAgICAgXSwKICAgICAgImRlc2NyaXB0aW9uIjogIkVuc3VyZXMgdGhlIHNjb3BlIGF0dHJpYnV0ZSBpcyB1c2VkIGNvcnJlY3RseSBvbiB0YWJsZXMiLAogICAgICAiaGVscCI6ICJzY29wZSBhdHRyaWJ1dGUgc2hvdWxkIGJlIHVzZWQgY29ycmVjdGx5IiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80Ljgvc2NvcGUtYXR0ci12YWxpZD9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogW10KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJzY3JvbGxhYmxlLXJlZ2lvbi1mb2N1c2FibGUiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5rZXlib2FyZCIsCiAgICAgICAgIndjYWcyYSIsCiAgICAgICAgIndjYWcyMTEiLAogICAgICAgICJUVHY1IiwKICAgICAgICAiVFQ0LmEiLAogICAgICAgICJFTi0zMDEtNTQ5IiwKICAgICAgICAiRU4tOS4yLjEuMSIKICAgICAgXSwKICAgICAgImRlc2NyaXB0aW9uIjogIkVuc3VyZSBlbGVtZW50cyB0aGF0IGhhdmUgc2Nyb2xsYWJsZSBjb250ZW50IGFyZSBhY2Nlc3NpYmxlIGJ5IGtleWJvYXJkIiwKICAgICAgImhlbHAiOiAiU2Nyb2xsYWJsZSByZWdpb24gbXVzdCBoYXZlIGtleWJvYXJkIGFjY2VzcyIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L3Njcm9sbGFibGUtcmVnaW9uLWZvY3VzYWJsZT9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogW10KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJzZWxlY3QtbmFtZSIsCiAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0LmZvcm1zIiwKICAgICAgICAid2NhZzJhIiwKICAgICAgICAid2NhZzQxMiIsCiAgICAgICAgInNlY3Rpb241MDgiLAogICAgICAgICJzZWN0aW9uNTA4LjIyLm4iLAogICAgICAgICJUVHY1IiwKICAgICAgICAiVFQ1LmMiLAogICAgICAgICJFTi0zMDEtNTQ5IiwKICAgICAgICAiRU4tOS40LjEuMiIsCiAgICAgICAgIkFDVCIKICAgICAgXSwKICAgICAgImRlc2NyaXB0aW9uIjogIkVuc3VyZXMgc2VsZWN0IGVsZW1lbnQgaGFzIGFuIGFjY2Vzc2libGUgbmFtZSIsCiAgICAgICJoZWxwIjogIlNlbGVjdCBlbGVtZW50IG11c3QgaGF2ZSBhbiBhY2Nlc3NpYmxlIG5hbWUiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9zZWxlY3QtbmFtZT9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogW10KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJzZXJ2ZXItc2lkZS1pbWFnZS1tYXAiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC50ZXh0LWFsdGVybmF0aXZlcyIsCiAgICAgICAgIndjYWcyYSIsCiAgICAgICAgIndjYWcyMTEiLAogICAgICAgICJzZWN0aW9uNTA4IiwKICAgICAgICAic2VjdGlvbjUwOC4yMi5mIiwKICAgICAgICAiVFR2NSIsCiAgICAgICAgIlRUNC5hIiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuMi4xLjEiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIHRoYXQgc2VydmVyLXNpZGUgaW1hZ2UgbWFwcyBhcmUgbm90IHVzZWQiLAogICAgICAiaGVscCI6ICJTZXJ2ZXItc2lkZSBpbWFnZSBtYXBzIG11c3Qgbm90IGJlIHVzZWQiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9zZXJ2ZXItc2lkZS1pbWFnZS1tYXA/YXBwbGljYXRpb249cGxheXdyaWdodCIsCiAgICAgICJub2RlcyI6IFtdCiAgICB9LAogICAgewogICAgICAiaWQiOiAic3ZnLWltZy1hbHQiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC50ZXh0LWFsdGVybmF0aXZlcyIsCiAgICAgICAgIndjYWcyYSIsCiAgICAgICAgIndjYWcxMTEiLAogICAgICAgICJzZWN0aW9uNTA4IiwKICAgICAgICAic2VjdGlvbjUwOC4yMi5hIiwKICAgICAgICAiVFR2NSIsCiAgICAgICAgIlRUNy5hIiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuMS4xLjEiLAogICAgICAgICJBQ1QiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIDxzdmc+IGVsZW1lbnRzIHdpdGggYW4gaW1nLCBncmFwaGljcy1kb2N1bWVudCBvciBncmFwaGljcy1zeW1ib2wgcm9sZSBoYXZlIGFuIGFjY2Vzc2libGUgdGV4dCIsCiAgICAgICJoZWxwIjogIjxzdmc+IGVsZW1lbnRzIHdpdGggYW4gaW1nIHJvbGUgbXVzdCBoYXZlIGFuIGFsdGVybmF0aXZlIHRleHQiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9zdmctaW1nLWFsdD9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogW10KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJ0YWJsZS1kdXBsaWNhdGUtbmFtZSIsCiAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0LnRhYmxlcyIsCiAgICAgICAgImJlc3QtcHJhY3RpY2UiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmUgdGhlIDxjYXB0aW9uPiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gdGhlIHNhbWUgdGV4dCBhcyB0aGUgc3VtbWFyeSBhdHRyaWJ1dGUiLAogICAgICAiaGVscCI6ICJ0YWJsZXMgc2hvdWxkIG5vdCBoYXZlIHRoZSBzYW1lIHN1bW1hcnkgYW5kIGNhcHRpb24iLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC90YWJsZS1kdXBsaWNhdGUtbmFtZT9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogW10KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJ0ZC1oZWFkZXJzLWF0dHIiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC50YWJsZXMiLAogICAgICAgICJ3Y2FnMmEiLAogICAgICAgICJ3Y2FnMTMxIiwKICAgICAgICAic2VjdGlvbjUwOCIsCiAgICAgICAgInNlY3Rpb241MDguMjIuZyIsCiAgICAgICAgIlRUdjUiLAogICAgICAgICJUVDE0LmIiLAogICAgICAgICJFTi0zMDEtNTQ5IiwKICAgICAgICAiRU4tOS4xLjMuMSIKICAgICAgXSwKICAgICAgImRlc2NyaXB0aW9uIjogIkVuc3VyZSB0aGF0IGVhY2ggY2VsbCBpbiBhIHRhYmxlIHRoYXQgdXNlcyB0aGUgaGVhZGVycyBhdHRyaWJ1dGUgcmVmZXJzIG9ubHkgdG8gb3RoZXIgY2VsbHMgaW4gdGhhdCB0YWJsZSIsCiAgICAgICJoZWxwIjogIlRhYmxlIGNlbGxzIHRoYXQgdXNlIHRoZSBoZWFkZXJzIGF0dHJpYnV0ZSBtdXN0IG9ubHkgcmVmZXIgdG8gY2VsbHMgaW4gdGhlIHNhbWUgdGFibGUiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC90ZC1oZWFkZXJzLWF0dHI/YXBwbGljYXRpb249cGxheXdyaWdodCIsCiAgICAgICJub2RlcyI6IFtdCiAgICB9LAogICAgewogICAgICAiaWQiOiAidGgtaGFzLWRhdGEtY2VsbHMiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC50YWJsZXMiLAogICAgICAgICJ3Y2FnMmEiLAogICAgICAgICJ3Y2FnMTMxIiwKICAgICAgICAic2VjdGlvbjUwOCIsCiAgICAgICAgInNlY3Rpb241MDguMjIuZyIsCiAgICAgICAgIlRUdjUiLAogICAgICAgICJUVDE0LmIiLAogICAgICAgICJFTi0zMDEtNTQ5IiwKICAgICAgICAiRU4tOS4xLjMuMSIKICAgICAgXSwKICAgICAgImRlc2NyaXB0aW9uIjogIkVuc3VyZSB0aGF0IDx0aD4gZWxlbWVudHMgYW5kIGVsZW1lbnRzIHdpdGggcm9sZT1jb2x1bW5oZWFkZXIvcm93aGVhZGVyIGhhdmUgZGF0YSBjZWxscyB0aGV5IGRlc2NyaWJlIiwKICAgICAgImhlbHAiOiAiVGFibGUgaGVhZGVycyBpbiBhIGRhdGEgdGFibGUgbXVzdCByZWZlciB0byBkYXRhIGNlbGxzIiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80LjgvdGgtaGFzLWRhdGEtY2VsbHM/YXBwbGljYXRpb249cGxheXdyaWdodCIsCiAgICAgICJub2RlcyI6IFtdCiAgICB9LAogICAgewogICAgICAiaWQiOiAidmFsaWQtbGFuZyIsCiAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0Lmxhbmd1YWdlIiwKICAgICAgICAid2NhZzJhYSIsCiAgICAgICAgIndjYWczMTIiLAogICAgICAgICJUVHY1IiwKICAgICAgICAiVFQxMS5iIiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuMy4xLjIiLAogICAgICAgICJBQ1QiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIGxhbmcgYXR0cmlidXRlcyBoYXZlIHZhbGlkIHZhbHVlcyIsCiAgICAgICJoZWxwIjogImxhbmcgYXR0cmlidXRlIG11c3QgaGF2ZSBhIHZhbGlkIHZhbHVlIiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80LjgvdmFsaWQtbGFuZz9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogW10KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJ2aWRlby1jYXB0aW9uIiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQudGV4dC1hbHRlcm5hdGl2ZXMiLAogICAgICAgICJ3Y2FnMmEiLAogICAgICAgICJ3Y2FnMTIyIiwKICAgICAgICAic2VjdGlvbjUwOCIsCiAgICAgICAgInNlY3Rpb241MDguMjIuYSIsCiAgICAgICAgIlRUdjUiLAogICAgICAgICJUVDE3LmEiLAogICAgICAgICJFTi0zMDEtNTQ5IiwKICAgICAgICAiRU4tOS4xLjIuMiIKICAgICAgXSwKICAgICAgImRlc2NyaXB0aW9uIjogIkVuc3VyZXMgPHZpZGVvPiBlbGVtZW50cyBoYXZlIGNhcHRpb25zIiwKICAgICAgImhlbHAiOiAiPHZpZGVvPiBlbGVtZW50cyBtdXN0IGhhdmUgY2FwdGlvbnMiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC92aWRlby1jYXB0aW9uP2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbXQogICAgfSwKICAgIHsKICAgICAgImlkIjogIm5vLWF1dG9wbGF5LWF1ZGlvIiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQudGltZS1hbmQtbWVkaWEiLAogICAgICAgICJ3Y2FnMmEiLAogICAgICAgICJ3Y2FnMTQyIiwKICAgICAgICAiVFR2NSIsCiAgICAgICAgIlRUMi5hIiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuMS40LjIiLAogICAgICAgICJBQ1QiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIDx2aWRlbz4gb3IgPGF1ZGlvPiBlbGVtZW50cyBkbyBub3QgYXV0b3BsYXkgYXVkaW8gZm9yIG1vcmUgdGhhbiAzIHNlY29uZHMgd2l0aG91dCBhIGNvbnRyb2wgbWVjaGFuaXNtIHRvIHN0b3Agb3IgbXV0ZSB0aGUgYXVkaW8iLAogICAgICAiaGVscCI6ICI8dmlkZW8+IG9yIDxhdWRpbz4gZWxlbWVudHMgbXVzdCBub3QgcGxheSBhdXRvbWF0aWNhbGx5IiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80Ljgvbm8tYXV0b3BsYXktYXVkaW8/YXBwbGljYXRpb249cGxheXdyaWdodCIsCiAgICAgICJub2RlcyI6IFtdCiAgICB9CiAgXSwKICAicGFzc2VzIjogWwogICAgewogICAgICAiaWQiOiAiYXJpYS1hbGxvd2VkLWF0dHIiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5hcmlhIiwKICAgICAgICAid2NhZzJhIiwKICAgICAgICAid2NhZzQxMiIsCiAgICAgICAgIkVOLTMwMS01NDkiLAogICAgICAgICJFTi05LjQuMS4yIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyBhbiBlbGVtZW50J3Mgcm9sZSBzdXBwb3J0cyBpdHMgQVJJQSBhdHRyaWJ1dGVzIiwKICAgICAgImhlbHAiOiAiRWxlbWVudHMgbXVzdCBvbmx5IHVzZSBzdXBwb3J0ZWQgQVJJQSBhdHRyaWJ1dGVzIiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80LjgvYXJpYS1hbGxvd2VkLWF0dHI/YXBwbGljYXRpb249cGxheXdyaWdodCIsCiAgICAgICJub2RlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYW55IjogW10sCiAgICAgICAgICAiYWxsIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtYWxsb3dlZC1hdHRyIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFSSUEgYXR0cmlidXRlcyBhcmUgdXNlZCBjb3JyZWN0bHkgZm9yIHRoZSBkZWZpbmVkIHJvbGUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLXVuc3VwcG9ydGVkLWF0dHIiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQVJJQSBhdHRyaWJ1dGUgaXMgc3VwcG9ydGVkIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YnV0dG9uIGNsYXNzPVwib2F4X2J0biBvYXhfZmwgb2F4X2JvYXJkX3RvZ2dsZSBvYXhfcG9pbnRlciBvYXgtaGVhZGVyLWJvYXJkLXRvZ2dsZSBvYXgtaGVhZGVyLWJvYXJkLXRvZ2dsZS1idG5cIiBhcmlhLWxhYmVsPVwiRGVzY2hpZGUgbWVuaXVsXCIgZGF0YS1jbG9zZS1sYWJlbD1cIsOObmNoaWRlIG1lbml1bFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9ib2FyZF90b2dnbGUiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogW10sCiAgICAgICAgICAiYWxsIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtYWxsb3dlZC1hdHRyIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFSSUEgYXR0cmlidXRlcyBhcmUgdXNlZCBjb3JyZWN0bHkgZm9yIHRoZSBkZWZpbmVkIHJvbGUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLXVuc3VwcG9ydGVkLWF0dHIiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQVJJQSBhdHRyaWJ1dGUgaXMgc3VwcG9ydGVkIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW5wdXQgdGFiaW5kZXg9XCItMVwiIHR5cGU9XCJzdWJtaXRcIiBhcmlhLWxhYmVsPVwiUG9ybmXImXRlIGPEg3V0YXJlYVwiIGNsYXNzPVwib2F4X2ljb25fZm9udCBvYXhfZm9udF9sYXJnZTI4XCIgdmFsdWU9XCLwn5SNXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2ljb25fZm9udCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbXSwKICAgICAgICAgICJhbGwiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYXJpYS1hbGxvd2VkLWF0dHIiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQVJJQSBhdHRyaWJ1dGVzIGFyZSB1c2VkIGNvcnJlY3RseSBmb3IgdGhlIGRlZmluZWQgcm9sZSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtdW5zdXBwb3J0ZWQtYXR0ciIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBUklBIGF0dHJpYnV0ZSBpcyBzdXBwb3J0ZWQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxidXR0b24gY2xhc3M9XCJvYXhfYnRuIG9heF9zZWFyY2hfdG9nZ2xlIG9heF9wb2ludGVyIG9heF9mbCBvYXgtaGVhZGVyLWJhci10b2dnbGUgb2F4LWhlYWRlci1iYXItdG9nZ2xlLW9wZW5cIiBhcmlhLWxhYmVsPVwiRGVzY2hpZGUgY8SDdXRhcmVhXCI+XG5cdFx0XHRcdFx0XHQgIFx0XHRcdDxzcGFuIGNsYXNzPVwib2F4LWljb24tbWFnbmlmaWVyIG9heF9mb250X2xhcmdlMjhcIj48L3NwYW4+XG5cdFx0XHRcdFx0XHQgIFx0XHQ8L2J1dHRvbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaGVhZGVyLWJhci10b2dnbGUtb3BlbiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbXSwKICAgICAgICAgICJhbGwiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYXJpYS1hbGxvd2VkLWF0dHIiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQVJJQSBhdHRyaWJ1dGVzIGFyZSB1c2VkIGNvcnJlY3RseSBmb3IgdGhlIGRlZmluZWQgcm9sZSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtdW5zdXBwb3J0ZWQtYXR0ciIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBUklBIGF0dHJpYnV0ZSBpcyBzdXBwb3J0ZWQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3d3dy5mYWNlYm9vay5jb20vRGlnaXRhbFRyYXZlbEd1aWRlU1JMXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9mb2xsb3cgbm9vcGVuZXJcIiBjbGFzcz1cIm9heC1pY29uLWZhY2Vib29rIG9heF9kZXRhaWxfc29jaWFsX2ZiIG9heF9mb290ZXJfaWNvblwiIHRpdGxlPVwiQ8SDdHJlIHByb2ZpbHVsIEZhY2Vib29rXCIgYXJpYS1sYWJlbD1cImZhY2Vib29rXCI+PC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pY29uLWZhY2Vib29rIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLWFsbG93ZWQtYXR0ciIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBUklBIGF0dHJpYnV0ZXMgYXJlIHVzZWQgY29ycmVjdGx5IGZvciB0aGUgZGVmaW5lZCByb2xlIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYXJpYS11bnN1cHBvcnRlZC1hdHRyIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFSSUEgYXR0cmlidXRlIGlzIHN1cHBvcnRlZCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vZWNoaXBhX3JvbWFuaWF0cmF2ZWwuZ3VpZGUvXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9mb2xsb3cgbm9vcGVuZXJcIiBjbGFzcz1cIm9heC1pY29uLWluc3RhZ3JhbSBvYXhfZGV0YWlsX3NvY2lhbF9pbnN0YWdyYW0gb2F4X2Zvb3Rlcl9pY29uXCIgdGl0bGU9XCJDxIN0cmUgcHJvZmlsdWwgSW5zdGFncmFtXCIgYXJpYS1sYWJlbD1cImluc3RhZ3JhbVwiPjwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWNvbi1pbnN0YWdyYW0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogW10sCiAgICAgICAgICAiYWxsIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtYWxsb3dlZC1hdHRyIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFSSUEgYXR0cmlidXRlcyBhcmUgdXNlZCBjb3JyZWN0bHkgZm9yIHRoZSBkZWZpbmVkIHJvbGUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLXVuc3VwcG9ydGVkLWF0dHIiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQVJJQSBhdHRyaWJ1dGUgaXMgc3VwcG9ydGVkIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vY2hhbm5lbC9VQ0NTX0dVT2xZeVp4c0Mwbm1oeTF3SXdcIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub2ZvbGxvdyBub29wZW5lclwiIGNsYXNzPVwib2F4LWljb24teW91dHViZSBvYXhfZGV0YWlsX3NvY2lhbF95b3V0dWJlIG9heF9mb290ZXJfaWNvblwiIHRpdGxlPVwiQ8SDdHJlIGNhbmFsdWwgWW91VHViZVwiIGFyaWEtbGFiZWw9XCJ5b3V0dWJlXCI+PC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pY29uLXlvdXR1YmUiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogW10sCiAgICAgICAgICAiYWxsIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtYWxsb3dlZC1hdHRyIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFSSUEgYXR0cmlidXRlcyBhcmUgdXNlZCBjb3JyZWN0bHkgZm9yIHRoZSBkZWZpbmVkIHJvbGUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLXVuc3VwcG9ydGVkLWF0dHIiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQVJJQSBhdHRyaWJ1dGUgaXMgc3VwcG9ydGVkIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly90d2l0dGVyLmNvbS9Sb21hbmlhVHJhdmVsR1wiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vZm9sbG93IG5vb3BlbmVyXCIgY2xhc3M9XCJvYXgtaWNvbi14IG9heF9kZXRhaWxfc29jaWFsX3ggb2F4X2Zvb3Rlcl9pY29uXCIgdGl0bGU9XCJDxIN0cmUgY29udHVsIFhcIiBhcmlhLWxhYmVsPVwieFwiPjwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWNvbi14IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLWFsbG93ZWQtYXR0ciIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBUklBIGF0dHJpYnV0ZXMgYXJlIHVzZWQgY29ycmVjdGx5IGZvciB0aGUgZGVmaW5lZCByb2xlIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYXJpYS11bnN1cHBvcnRlZC1hdHRyIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFSSUEgYXR0cmlidXRlIGlzIHN1cHBvcnRlZCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9jb21wYW55L2RpZ2l0YWwtdHJhdmVsLWd1aWRlL1wiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vZm9sbG93IG5vb3BlbmVyXCIgY2xhc3M9XCJvYXgtaWNvbi1saW5rZWRpbiBvYXhfZGV0YWlsX3NvY2lhbF9saW5rZWRpbiBvYXhfZm9vdGVyX2ljb25cIiB0aXRsZT1cIkPEg3RyZSBjb250dWwgTGlua2VkSW5cIiBhcmlhLWxhYmVsPVwibGlua2VkaW5cIj48L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWljb24tbGlua2VkaW4iCiAgICAgICAgICBdCiAgICAgICAgfQogICAgICBdCiAgICB9LAogICAgewogICAgICAiaWQiOiAiYXJpYS1jb25kaXRpb25hbC1hdHRyIiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQuYXJpYSIsCiAgICAgICAgIndjYWcyYSIsCiAgICAgICAgIndjYWc0MTIiLAogICAgICAgICJFTi0zMDEtNTQ5IiwKICAgICAgICAiRU4tOS40LjEuMiIKICAgICAgXSwKICAgICAgImRlc2NyaXB0aW9uIjogIkVuc3VyZXMgQVJJQSBhdHRyaWJ1dGVzIGFyZSB1c2VkIGFzIGRlc2NyaWJlZCBpbiB0aGUgc3BlY2lmaWNhdGlvbiBvZiB0aGUgZWxlbWVudCdzIHJvbGUiLAogICAgICAiaGVscCI6ICJBUklBIGF0dHJpYnV0ZXMgbXVzdCBiZSB1c2VkIGFzIHNwZWNpZmllZCBmb3IgdGhlIGVsZW1lbnQncyByb2xlIiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80LjgvYXJpYS1jb25kaXRpb25hbC1hdHRyP2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLWNvbmRpdGlvbmFsLWF0dHIiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBUklBIGF0dHJpYnV0ZSBpcyBhbGxvd2VkIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGJ1dHRvbiBjbGFzcz1cIm9heF9idG4gb2F4X2ZsIG9heF9ib2FyZF90b2dnbGUgb2F4X3BvaW50ZXIgb2F4LWhlYWRlci1ib2FyZC10b2dnbGUgb2F4LWhlYWRlci1ib2FyZC10b2dnbGUtYnRuXCIgYXJpYS1sYWJlbD1cIkRlc2NoaWRlIG1lbml1bFwiIGRhdGEtY2xvc2UtbGFiZWw9XCLDjm5jaGlkZSBtZW5pdWxcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfYm9hcmRfdG9nZ2xlIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLWNvbmRpdGlvbmFsLWF0dHIiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBUklBIGF0dHJpYnV0ZSBpcyBhbGxvd2VkIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGlucHV0IHRhYmluZGV4PVwiLTFcIiB0eXBlPVwic3VibWl0XCIgYXJpYS1sYWJlbD1cIlBvcm5lyJl0ZSBjxIN1dGFyZWFcIiBjbGFzcz1cIm9heF9pY29uX2ZvbnQgb2F4X2ZvbnRfbGFyZ2UyOFwiIHZhbHVlPVwi8J+UjVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9pY29uX2ZvbnQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogW10sCiAgICAgICAgICAiYWxsIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtY29uZGl0aW9uYWwtYXR0ciIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFSSUEgYXR0cmlidXRlIGlzIGFsbG93ZWQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YnV0dG9uIGNsYXNzPVwib2F4X2J0biBvYXhfc2VhcmNoX3RvZ2dsZSBvYXhfcG9pbnRlciBvYXhfZmwgb2F4LWhlYWRlci1iYXItdG9nZ2xlIG9heC1oZWFkZXItYmFyLXRvZ2dsZS1vcGVuXCIgYXJpYS1sYWJlbD1cIkRlc2NoaWRlIGPEg3V0YXJlYVwiPlxuXHRcdFx0XHRcdFx0ICBcdFx0XHQ8c3BhbiBjbGFzcz1cIm9heC1pY29uLW1hZ25pZmllciBvYXhfZm9udF9sYXJnZTI4XCI+PC9zcGFuPlxuXHRcdFx0XHRcdFx0ICBcdFx0PC9idXR0b24+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWhlYWRlci1iYXItdG9nZ2xlLW9wZW4iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogW10sCiAgICAgICAgICAiYWxsIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtY29uZGl0aW9uYWwtYXR0ciIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFSSUEgYXR0cmlidXRlIGlzIGFsbG93ZWQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL0RpZ2l0YWxUcmF2ZWxHdWlkZVNSTFwiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vZm9sbG93IG5vb3BlbmVyXCIgY2xhc3M9XCJvYXgtaWNvbi1mYWNlYm9vayBvYXhfZGV0YWlsX3NvY2lhbF9mYiBvYXhfZm9vdGVyX2ljb25cIiB0aXRsZT1cIkPEg3RyZSBwcm9maWx1bCBGYWNlYm9va1wiIGFyaWEtbGFiZWw9XCJmYWNlYm9va1wiPjwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWNvbi1mYWNlYm9vayIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbXSwKICAgICAgICAgICJhbGwiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYXJpYS1jb25kaXRpb25hbC1hdHRyIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQVJJQSBhdHRyaWJ1dGUgaXMgYWxsb3dlZCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2VjaGlwYV9yb21hbmlhdHJhdmVsLmd1aWRlL1wiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vZm9sbG93IG5vb3BlbmVyXCIgY2xhc3M9XCJvYXgtaWNvbi1pbnN0YWdyYW0gb2F4X2RldGFpbF9zb2NpYWxfaW5zdGFncmFtIG9heF9mb290ZXJfaWNvblwiIHRpdGxlPVwiQ8SDdHJlIHByb2ZpbHVsIEluc3RhZ3JhbVwiIGFyaWEtbGFiZWw9XCJpbnN0YWdyYW1cIj48L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWljb24taW5zdGFncmFtIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLWNvbmRpdGlvbmFsLWF0dHIiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBUklBIGF0dHJpYnV0ZSBpcyBhbGxvd2VkIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2NoYW5uZWwvVUNDU19HVU9sWXlaeHNDMG5taHkxd0l3XCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9mb2xsb3cgbm9vcGVuZXJcIiBjbGFzcz1cIm9heC1pY29uLXlvdXR1YmUgb2F4X2RldGFpbF9zb2NpYWxfeW91dHViZSBvYXhfZm9vdGVyX2ljb25cIiB0aXRsZT1cIkPEg3RyZSBjYW5hbHVsIFlvdVR1YmVcIiBhcmlhLWxhYmVsPVwieW91dHViZVwiPjwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWNvbi15b3V0dWJlIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLWNvbmRpdGlvbmFsLWF0dHIiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBUklBIGF0dHJpYnV0ZSBpcyBhbGxvd2VkIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vdHdpdHRlci5jb20vUm9tYW5pYVRyYXZlbEdcIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub2ZvbGxvdyBub29wZW5lclwiIGNsYXNzPVwib2F4LWljb24teCBvYXhfZGV0YWlsX3NvY2lhbF94IG9heF9mb290ZXJfaWNvblwiIHRpdGxlPVwiQ8SDdHJlIGNvbnR1bCBYXCIgYXJpYS1sYWJlbD1cInhcIj48L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWljb24teCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbXSwKICAgICAgICAgICJhbGwiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYXJpYS1jb25kaXRpb25hbC1hdHRyIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQVJJQSBhdHRyaWJ1dGUgaXMgYWxsb3dlZCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3d3dy5saW5rZWRpbi5jb20vY29tcGFueS9kaWdpdGFsLXRyYXZlbC1ndWlkZS9cIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub2ZvbGxvdyBub29wZW5lclwiIGNsYXNzPVwib2F4LWljb24tbGlua2VkaW4gb2F4X2RldGFpbF9zb2NpYWxfbGlua2VkaW4gb2F4X2Zvb3Rlcl9pY29uXCIgdGl0bGU9XCJDxIN0cmUgY29udHVsIExpbmtlZEluXCIgYXJpYS1sYWJlbD1cImxpbmtlZGluXCI+PC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pY29uLWxpbmtlZGluIgogICAgICAgICAgXQogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImFyaWEtaGlkZGVuLWJvZHkiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5hcmlhIiwKICAgICAgICAid2NhZzJhIiwKICAgICAgICAid2NhZzQxMiIsCiAgICAgICAgIkVOLTMwMS01NDkiLAogICAgICAgICJFTi05LjQuMS4yIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyBhcmlhLWhpZGRlbj1cInRydWVcIiBpcyBub3QgcHJlc2VudCBvbiB0aGUgZG9jdW1lbnQgYm9keS4iLAogICAgICAiaGVscCI6ICJhcmlhLWhpZGRlbj1cInRydWVcIiBtdXN0IG5vdCBiZSBwcmVzZW50IG9uIHRoZSBkb2N1bWVudCBib2R5IiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80LjgvYXJpYS1oaWRkZW4tYm9keT9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYXJpYS1oaWRkZW4tYm9keSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJObyBhcmlhLWhpZGRlbiBhdHRyaWJ1dGUgaXMgcHJlc2VudCBvbiBkb2N1bWVudCBib2R5IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGJvZHkgY2xhc3M9XCJvYXggb2F4X2luZGV4cGFnZSBvYXhfaGVhZGVyX21pbl93aWR0aCBvYXhfb3B0aW9uYWxfZnVsbHdpZHRoIG9heF9oYXNIZWFkZXJfdHJhbnNwIG9heF9oZWFkZXJfdHJhbnNwXCIgc3R5bGU9XCJcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImJvZHkiCiAgICAgICAgICBdCiAgICAgICAgfQogICAgICBdCiAgICB9LAogICAgewogICAgICAiaWQiOiAiYXJpYS1wcm9oaWJpdGVkLWF0dHIiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5hcmlhIiwKICAgICAgICAid2NhZzJhIiwKICAgICAgICAid2NhZzQxMiIsCiAgICAgICAgIkVOLTMwMS01NDkiLAogICAgICAgICJFTi05LjQuMS4yIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyBBUklBIGF0dHJpYnV0ZXMgYXJlIG5vdCBwcm9oaWJpdGVkIGZvciBhbiBlbGVtZW50J3Mgcm9sZSIsCiAgICAgICJoZWxwIjogIkVsZW1lbnRzIG11c3Qgb25seSB1c2UgcGVybWl0dGVkIEFSSUEgYXR0cmlidXRlcyIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L2FyaWEtcHJvaGliaXRlZC1hdHRyP2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYXJpYS1wcm9oaWJpdGVkLWF0dHIiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBUklBIGF0dHJpYnV0ZSBpcyBhbGxvd2VkIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YnV0dG9uIGNsYXNzPVwib2F4X2J0biBvYXhfZmwgb2F4X2JvYXJkX3RvZ2dsZSBvYXhfcG9pbnRlciBvYXgtaGVhZGVyLWJvYXJkLXRvZ2dsZSBvYXgtaGVhZGVyLWJvYXJkLXRvZ2dsZS1idG5cIiBhcmlhLWxhYmVsPVwiRGVzY2hpZGUgbWVuaXVsXCIgZGF0YS1jbG9zZS1sYWJlbD1cIsOObmNoaWRlIG1lbml1bFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9ib2FyZF90b2dnbGUiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogW10sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLXByb2hpYml0ZWQtYXR0ciIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFSSUEgYXR0cmlidXRlIGlzIGFsbG93ZWQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbnB1dCB0YWJpbmRleD1cIi0xXCIgdHlwZT1cInN1Ym1pdFwiIGFyaWEtbGFiZWw9XCJQb3JuZciZdGUgY8SDdXRhcmVhXCIgY2xhc3M9XCJvYXhfaWNvbl9mb250IG9heF9mb250X2xhcmdlMjhcIiB2YWx1ZT1cIvCflI1cIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfaWNvbl9mb250IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYXJpYS1wcm9oaWJpdGVkLWF0dHIiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBUklBIGF0dHJpYnV0ZSBpcyBhbGxvd2VkIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YnV0dG9uIGNsYXNzPVwib2F4X2J0biBvYXhfc2VhcmNoX3RvZ2dsZSBvYXhfcG9pbnRlciBvYXhfZmwgb2F4LWhlYWRlci1iYXItdG9nZ2xlIG9heC1oZWFkZXItYmFyLXRvZ2dsZS1vcGVuXCIgYXJpYS1sYWJlbD1cIkRlc2NoaWRlIGPEg3V0YXJlYVwiPlxuXHRcdFx0XHRcdFx0ICBcdFx0XHQ8c3BhbiBjbGFzcz1cIm9heC1pY29uLW1hZ25pZmllciBvYXhfZm9udF9sYXJnZTI4XCI+PC9zcGFuPlxuXHRcdFx0XHRcdFx0ICBcdFx0PC9idXR0b24+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWhlYWRlci1iYXItdG9nZ2xlLW9wZW4iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogW10sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLXByb2hpYml0ZWQtYXR0ciIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFSSUEgYXR0cmlidXRlIGlzIGFsbG93ZWQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3d3dy5mYWNlYm9vay5jb20vRGlnaXRhbFRyYXZlbEd1aWRlU1JMXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9mb2xsb3cgbm9vcGVuZXJcIiBjbGFzcz1cIm9heC1pY29uLWZhY2Vib29rIG9heF9kZXRhaWxfc29jaWFsX2ZiIG9heF9mb290ZXJfaWNvblwiIHRpdGxlPVwiQ8SDdHJlIHByb2ZpbHVsIEZhY2Vib29rXCIgYXJpYS1sYWJlbD1cImZhY2Vib29rXCI+PC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pY29uLWZhY2Vib29rIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYXJpYS1wcm9oaWJpdGVkLWF0dHIiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBUklBIGF0dHJpYnV0ZSBpcyBhbGxvd2VkIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9lY2hpcGFfcm9tYW5pYXRyYXZlbC5ndWlkZS9cIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub2ZvbGxvdyBub29wZW5lclwiIGNsYXNzPVwib2F4LWljb24taW5zdGFncmFtIG9heF9kZXRhaWxfc29jaWFsX2luc3RhZ3JhbSBvYXhfZm9vdGVyX2ljb25cIiB0aXRsZT1cIkPEg3RyZSBwcm9maWx1bCBJbnN0YWdyYW1cIiBhcmlhLWxhYmVsPVwiaW5zdGFncmFtXCI+PC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pY29uLWluc3RhZ3JhbSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtcHJvaGliaXRlZC1hdHRyIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQVJJQSBhdHRyaWJ1dGUgaXMgYWxsb3dlZCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2NoYW5uZWwvVUNDU19HVU9sWXlaeHNDMG5taHkxd0l3XCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9mb2xsb3cgbm9vcGVuZXJcIiBjbGFzcz1cIm9heC1pY29uLXlvdXR1YmUgb2F4X2RldGFpbF9zb2NpYWxfeW91dHViZSBvYXhfZm9vdGVyX2ljb25cIiB0aXRsZT1cIkPEg3RyZSBjYW5hbHVsIFlvdVR1YmVcIiBhcmlhLWxhYmVsPVwieW91dHViZVwiPjwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWNvbi15b3V0dWJlIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYXJpYS1wcm9oaWJpdGVkLWF0dHIiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBUklBIGF0dHJpYnV0ZSBpcyBhbGxvd2VkIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly90d2l0dGVyLmNvbS9Sb21hbmlhVHJhdmVsR1wiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vZm9sbG93IG5vb3BlbmVyXCIgY2xhc3M9XCJvYXgtaWNvbi14IG9heF9kZXRhaWxfc29jaWFsX3ggb2F4X2Zvb3Rlcl9pY29uXCIgdGl0bGU9XCJDxIN0cmUgY29udHVsIFhcIiBhcmlhLWxhYmVsPVwieFwiPjwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWNvbi14IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYXJpYS1wcm9oaWJpdGVkLWF0dHIiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBUklBIGF0dHJpYnV0ZSBpcyBhbGxvd2VkIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2NvbXBhbnkvZGlnaXRhbC10cmF2ZWwtZ3VpZGUvXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9mb2xsb3cgbm9vcGVuZXJcIiBjbGFzcz1cIm9heC1pY29uLWxpbmtlZGluIG9heF9kZXRhaWxfc29jaWFsX2xpbmtlZGluIG9heF9mb290ZXJfaWNvblwiIHRpdGxlPVwiQ8SDdHJlIGNvbnR1bCBMaW5rZWRJblwiIGFyaWEtbGFiZWw9XCJsaW5rZWRpblwiPjwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWNvbi1saW5rZWRpbiIKICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJhcmlhLXZhbGlkLWF0dHItdmFsdWUiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5hcmlhIiwKICAgICAgICAid2NhZzJhIiwKICAgICAgICAid2NhZzQxMiIsCiAgICAgICAgIkVOLTMwMS01NDkiLAogICAgICAgICJFTi05LjQuMS4yIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyBhbGwgQVJJQSBhdHRyaWJ1dGVzIGhhdmUgdmFsaWQgdmFsdWVzIiwKICAgICAgImhlbHAiOiAiQVJJQSBhdHRyaWJ1dGVzIG11c3QgY29uZm9ybSB0byB2YWxpZCB2YWx1ZXMiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9hcmlhLXZhbGlkLWF0dHItdmFsdWU/YXBwbGljYXRpb249cGxheXdyaWdodCIsCiAgICAgICJub2RlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYW55IjogW10sCiAgICAgICAgICAiYWxsIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtdmFsaWQtYXR0ci12YWx1ZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBUklBIGF0dHJpYnV0ZSB2YWx1ZXMgYXJlIHZhbGlkIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtZXJyb3JtZXNzYWdlIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogImFyaWEtZXJyb3JtZXNzYWdlIGV4aXN0cyBhbmQgcmVmZXJlbmNlcyBlbGVtZW50cyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzIHRoYXQgdXNlIGEgc3VwcG9ydGVkIGFyaWEtZXJyb3JtZXNzYWdlIHRlY2huaXF1ZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLWxldmVsIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogImFyaWEtbGV2ZWwgdmFsdWVzIGFyZSB2YWxpZCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxidXR0b24gY2xhc3M9XCJvYXhfYnRuIG9heF9mbCBvYXhfYm9hcmRfdG9nZ2xlIG9heF9wb2ludGVyIG9heC1oZWFkZXItYm9hcmQtdG9nZ2xlIG9heC1oZWFkZXItYm9hcmQtdG9nZ2xlLWJ0blwiIGFyaWEtbGFiZWw9XCJEZXNjaGlkZSBtZW5pdWxcIiBkYXRhLWNsb3NlLWxhYmVsPVwiw45uY2hpZGUgbWVuaXVsXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2JvYXJkX3RvZ2dsZSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbXSwKICAgICAgICAgICJhbGwiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYXJpYS12YWxpZC1hdHRyLXZhbHVlIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFSSUEgYXR0cmlidXRlIHZhbHVlcyBhcmUgdmFsaWQiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYXJpYS1lcnJvcm1lc3NhZ2UiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiYXJpYS1lcnJvcm1lc3NhZ2UgZXhpc3RzIGFuZCByZWZlcmVuY2VzIGVsZW1lbnRzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMgdGhhdCB1c2UgYSBzdXBwb3J0ZWQgYXJpYS1lcnJvcm1lc3NhZ2UgdGVjaG5pcXVlIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtbGV2ZWwiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiYXJpYS1sZXZlbCB2YWx1ZXMgYXJlIHZhbGlkIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGlucHV0IHRhYmluZGV4PVwiLTFcIiB0eXBlPVwic3VibWl0XCIgYXJpYS1sYWJlbD1cIlBvcm5lyJl0ZSBjxIN1dGFyZWFcIiBjbGFzcz1cIm9heF9pY29uX2ZvbnQgb2F4X2ZvbnRfbGFyZ2UyOFwiIHZhbHVlPVwi8J+UjVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9pY29uX2ZvbnQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogW10sCiAgICAgICAgICAiYWxsIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtdmFsaWQtYXR0ci12YWx1ZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBUklBIGF0dHJpYnV0ZSB2YWx1ZXMgYXJlIHZhbGlkIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtZXJyb3JtZXNzYWdlIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogImFyaWEtZXJyb3JtZXNzYWdlIGV4aXN0cyBhbmQgcmVmZXJlbmNlcyBlbGVtZW50cyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzIHRoYXQgdXNlIGEgc3VwcG9ydGVkIGFyaWEtZXJyb3JtZXNzYWdlIHRlY2huaXF1ZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLWxldmVsIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogImFyaWEtbGV2ZWwgdmFsdWVzIGFyZSB2YWxpZCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxidXR0b24gY2xhc3M9XCJvYXhfYnRuIG9heF9zZWFyY2hfdG9nZ2xlIG9heF9wb2ludGVyIG9heF9mbCBvYXgtaGVhZGVyLWJhci10b2dnbGUgb2F4LWhlYWRlci1iYXItdG9nZ2xlLW9wZW5cIiBhcmlhLWxhYmVsPVwiRGVzY2hpZGUgY8SDdXRhcmVhXCI+XG5cdFx0XHRcdFx0XHQgIFx0XHRcdDxzcGFuIGNsYXNzPVwib2F4LWljb24tbWFnbmlmaWVyIG9heF9mb250X2xhcmdlMjhcIj48L3NwYW4+XG5cdFx0XHRcdFx0XHQgIFx0XHQ8L2J1dHRvbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaGVhZGVyLWJhci10b2dnbGUtb3BlbiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbXSwKICAgICAgICAgICJhbGwiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYXJpYS12YWxpZC1hdHRyLXZhbHVlIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFSSUEgYXR0cmlidXRlIHZhbHVlcyBhcmUgdmFsaWQiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYXJpYS1lcnJvcm1lc3NhZ2UiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiYXJpYS1lcnJvcm1lc3NhZ2UgZXhpc3RzIGFuZCByZWZlcmVuY2VzIGVsZW1lbnRzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMgdGhhdCB1c2UgYSBzdXBwb3J0ZWQgYXJpYS1lcnJvcm1lc3NhZ2UgdGVjaG5pcXVlIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtbGV2ZWwiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiYXJpYS1sZXZlbCB2YWx1ZXMgYXJlIHZhbGlkIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9EaWdpdGFsVHJhdmVsR3VpZGVTUkxcIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub2ZvbGxvdyBub29wZW5lclwiIGNsYXNzPVwib2F4LWljb24tZmFjZWJvb2sgb2F4X2RldGFpbF9zb2NpYWxfZmIgb2F4X2Zvb3Rlcl9pY29uXCIgdGl0bGU9XCJDxIN0cmUgcHJvZmlsdWwgRmFjZWJvb2tcIiBhcmlhLWxhYmVsPVwiZmFjZWJvb2tcIj48L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWljb24tZmFjZWJvb2siCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogW10sCiAgICAgICAgICAiYWxsIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtdmFsaWQtYXR0ci12YWx1ZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBUklBIGF0dHJpYnV0ZSB2YWx1ZXMgYXJlIHZhbGlkIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtZXJyb3JtZXNzYWdlIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogImFyaWEtZXJyb3JtZXNzYWdlIGV4aXN0cyBhbmQgcmVmZXJlbmNlcyBlbGVtZW50cyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzIHRoYXQgdXNlIGEgc3VwcG9ydGVkIGFyaWEtZXJyb3JtZXNzYWdlIHRlY2huaXF1ZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLWxldmVsIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogImFyaWEtbGV2ZWwgdmFsdWVzIGFyZSB2YWxpZCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2VjaGlwYV9yb21hbmlhdHJhdmVsLmd1aWRlL1wiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vZm9sbG93IG5vb3BlbmVyXCIgY2xhc3M9XCJvYXgtaWNvbi1pbnN0YWdyYW0gb2F4X2RldGFpbF9zb2NpYWxfaW5zdGFncmFtIG9heF9mb290ZXJfaWNvblwiIHRpdGxlPVwiQ8SDdHJlIHByb2ZpbHVsIEluc3RhZ3JhbVwiIGFyaWEtbGFiZWw9XCJpbnN0YWdyYW1cIj48L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWljb24taW5zdGFncmFtIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLXZhbGlkLWF0dHItdmFsdWUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQVJJQSBhdHRyaWJ1dGUgdmFsdWVzIGFyZSB2YWxpZCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLWVycm9ybWVzc2FnZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJhcmlhLWVycm9ybWVzc2FnZSBleGlzdHMgYW5kIHJlZmVyZW5jZXMgZWxlbWVudHMgdmlzaWJsZSB0byBzY3JlZW4gcmVhZGVycyB0aGF0IHVzZSBhIHN1cHBvcnRlZCBhcmlhLWVycm9ybWVzc2FnZSB0ZWNobmlxdWUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYXJpYS1sZXZlbCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJhcmlhLWxldmVsIHZhbHVlcyBhcmUgdmFsaWQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vY2hhbm5lbC9VQ0NTX0dVT2xZeVp4c0Mwbm1oeTF3SXdcIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub2ZvbGxvdyBub29wZW5lclwiIGNsYXNzPVwib2F4LWljb24teW91dHViZSBvYXhfZGV0YWlsX3NvY2lhbF95b3V0dWJlIG9heF9mb290ZXJfaWNvblwiIHRpdGxlPVwiQ8SDdHJlIGNhbmFsdWwgWW91VHViZVwiIGFyaWEtbGFiZWw9XCJ5b3V0dWJlXCI+PC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pY29uLXlvdXR1YmUiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogW10sCiAgICAgICAgICAiYWxsIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtdmFsaWQtYXR0ci12YWx1ZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBUklBIGF0dHJpYnV0ZSB2YWx1ZXMgYXJlIHZhbGlkIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtZXJyb3JtZXNzYWdlIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogImFyaWEtZXJyb3JtZXNzYWdlIGV4aXN0cyBhbmQgcmVmZXJlbmNlcyBlbGVtZW50cyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzIHRoYXQgdXNlIGEgc3VwcG9ydGVkIGFyaWEtZXJyb3JtZXNzYWdlIHRlY2huaXF1ZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLWxldmVsIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogImFyaWEtbGV2ZWwgdmFsdWVzIGFyZSB2YWxpZCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3R3aXR0ZXIuY29tL1JvbWFuaWFUcmF2ZWxHXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9mb2xsb3cgbm9vcGVuZXJcIiBjbGFzcz1cIm9heC1pY29uLXggb2F4X2RldGFpbF9zb2NpYWxfeCBvYXhfZm9vdGVyX2ljb25cIiB0aXRsZT1cIkPEg3RyZSBjb250dWwgWFwiIGFyaWEtbGFiZWw9XCJ4XCI+PC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pY29uLXgiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogW10sCiAgICAgICAgICAiYWxsIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtdmFsaWQtYXR0ci12YWx1ZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBUklBIGF0dHJpYnV0ZSB2YWx1ZXMgYXJlIHZhbGlkIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtZXJyb3JtZXNzYWdlIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogImFyaWEtZXJyb3JtZXNzYWdlIGV4aXN0cyBhbmQgcmVmZXJlbmNlcyBlbGVtZW50cyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzIHRoYXQgdXNlIGEgc3VwcG9ydGVkIGFyaWEtZXJyb3JtZXNzYWdlIHRlY2huaXF1ZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLWxldmVsIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogImFyaWEtbGV2ZWwgdmFsdWVzIGFyZSB2YWxpZCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3d3dy5saW5rZWRpbi5jb20vY29tcGFueS9kaWdpdGFsLXRyYXZlbC1ndWlkZS9cIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub2ZvbGxvdyBub29wZW5lclwiIGNsYXNzPVwib2F4LWljb24tbGlua2VkaW4gb2F4X2RldGFpbF9zb2NpYWxfbGlua2VkaW4gb2F4X2Zvb3Rlcl9pY29uXCIgdGl0bGU9XCJDxIN0cmUgY29udHVsIExpbmtlZEluXCIgYXJpYS1sYWJlbD1cImxpbmtlZGluXCI+PC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pY29uLWxpbmtlZGluIgogICAgICAgICAgXQogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImFyaWEtdmFsaWQtYXR0ciIsCiAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0LmFyaWEiLAogICAgICAgICJ3Y2FnMmEiLAogICAgICAgICJ3Y2FnNDEyIiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuNC4xLjIiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIGF0dHJpYnV0ZXMgdGhhdCBiZWdpbiB3aXRoIGFyaWEtIGFyZSB2YWxpZCBBUklBIGF0dHJpYnV0ZXMiLAogICAgICAiaGVscCI6ICJBUklBIGF0dHJpYnV0ZXMgbXVzdCBjb25mb3JtIHRvIHZhbGlkIG5hbWVzIiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80LjgvYXJpYS12YWxpZC1hdHRyP2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLXZhbGlkLWF0dHIiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQVJJQSBhdHRyaWJ1dGUgbmFtZSBpcyB2YWxpZCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxidXR0b24gY2xhc3M9XCJvYXhfYnRuIG9heF9mbCBvYXhfYm9hcmRfdG9nZ2xlIG9heF9wb2ludGVyIG9heC1oZWFkZXItYm9hcmQtdG9nZ2xlIG9heC1oZWFkZXItYm9hcmQtdG9nZ2xlLWJ0blwiIGFyaWEtbGFiZWw9XCJEZXNjaGlkZSBtZW5pdWxcIiBkYXRhLWNsb3NlLWxhYmVsPVwiw45uY2hpZGUgbWVuaXVsXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2JvYXJkX3RvZ2dsZSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYXJpYS12YWxpZC1hdHRyIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFSSUEgYXR0cmlidXRlIG5hbWUgaXMgdmFsaWQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW5wdXQgdGFiaW5kZXg9XCItMVwiIHR5cGU9XCJzdWJtaXRcIiBhcmlhLWxhYmVsPVwiUG9ybmXImXRlIGPEg3V0YXJlYVwiIGNsYXNzPVwib2F4X2ljb25fZm9udCBvYXhfZm9udF9sYXJnZTI4XCIgdmFsdWU9XCLwn5SNXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2ljb25fZm9udCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYXJpYS12YWxpZC1hdHRyIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFSSUEgYXR0cmlidXRlIG5hbWUgaXMgdmFsaWQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YnV0dG9uIGNsYXNzPVwib2F4X2J0biBvYXhfc2VhcmNoX3RvZ2dsZSBvYXhfcG9pbnRlciBvYXhfZmwgb2F4LWhlYWRlci1iYXItdG9nZ2xlIG9heC1oZWFkZXItYmFyLXRvZ2dsZS1vcGVuXCIgYXJpYS1sYWJlbD1cIkRlc2NoaWRlIGPEg3V0YXJlYVwiPlxuXHRcdFx0XHRcdFx0ICBcdFx0XHQ8c3BhbiBjbGFzcz1cIm9heC1pY29uLW1hZ25pZmllciBvYXhfZm9udF9sYXJnZTI4XCI+PC9zcGFuPlxuXHRcdFx0XHRcdFx0ICBcdFx0PC9idXR0b24+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWhlYWRlci1iYXItdG9nZ2xlLW9wZW4iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtdmFsaWQtYXR0ciIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBUklBIGF0dHJpYnV0ZSBuYW1lIGlzIHZhbGlkIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9EaWdpdGFsVHJhdmVsR3VpZGVTUkxcIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub2ZvbGxvdyBub29wZW5lclwiIGNsYXNzPVwib2F4LWljb24tZmFjZWJvb2sgb2F4X2RldGFpbF9zb2NpYWxfZmIgb2F4X2Zvb3Rlcl9pY29uXCIgdGl0bGU9XCJDxIN0cmUgcHJvZmlsdWwgRmFjZWJvb2tcIiBhcmlhLWxhYmVsPVwiZmFjZWJvb2tcIj48L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWljb24tZmFjZWJvb2siCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtdmFsaWQtYXR0ciIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBUklBIGF0dHJpYnV0ZSBuYW1lIGlzIHZhbGlkIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vZWNoaXBhX3JvbWFuaWF0cmF2ZWwuZ3VpZGUvXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9mb2xsb3cgbm9vcGVuZXJcIiBjbGFzcz1cIm9heC1pY29uLWluc3RhZ3JhbSBvYXhfZGV0YWlsX3NvY2lhbF9pbnN0YWdyYW0gb2F4X2Zvb3Rlcl9pY29uXCIgdGl0bGU9XCJDxIN0cmUgcHJvZmlsdWwgSW5zdGFncmFtXCIgYXJpYS1sYWJlbD1cImluc3RhZ3JhbVwiPjwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWNvbi1pbnN0YWdyYW0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtdmFsaWQtYXR0ciIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBUklBIGF0dHJpYnV0ZSBuYW1lIGlzIHZhbGlkIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2NoYW5uZWwvVUNDU19HVU9sWXlaeHNDMG5taHkxd0l3XCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9mb2xsb3cgbm9vcGVuZXJcIiBjbGFzcz1cIm9heC1pY29uLXlvdXR1YmUgb2F4X2RldGFpbF9zb2NpYWxfeW91dHViZSBvYXhfZm9vdGVyX2ljb25cIiB0aXRsZT1cIkPEg3RyZSBjYW5hbHVsIFlvdVR1YmVcIiBhcmlhLWxhYmVsPVwieW91dHViZVwiPjwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWNvbi15b3V0dWJlIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLXZhbGlkLWF0dHIiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQVJJQSBhdHRyaWJ1dGUgbmFtZSBpcyB2YWxpZCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3R3aXR0ZXIuY29tL1JvbWFuaWFUcmF2ZWxHXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9mb2xsb3cgbm9vcGVuZXJcIiBjbGFzcz1cIm9heC1pY29uLXggb2F4X2RldGFpbF9zb2NpYWxfeCBvYXhfZm9vdGVyX2ljb25cIiB0aXRsZT1cIkPEg3RyZSBjb250dWwgWFwiIGFyaWEtbGFiZWw9XCJ4XCI+PC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pY29uLXgiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtdmFsaWQtYXR0ciIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBUklBIGF0dHJpYnV0ZSBuYW1lIGlzIHZhbGlkIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9jb21wYW55L2RpZ2l0YWwtdHJhdmVsLWd1aWRlL1wiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vZm9sbG93IG5vb3BlbmVyXCIgY2xhc3M9XCJvYXgtaWNvbi1saW5rZWRpbiBvYXhfZGV0YWlsX3NvY2lhbF9saW5rZWRpbiBvYXhfZm9vdGVyX2ljb25cIiB0aXRsZT1cIkPEg3RyZSBjb250dWwgTGlua2VkSW5cIiBhcmlhLWxhYmVsPVwibGlua2VkaW5cIj48L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWljb24tbGlua2VkaW4iCiAgICAgICAgICBdCiAgICAgICAgfQogICAgICBdCiAgICB9LAogICAgewogICAgICAiaWQiOiAiYXZvaWQtaW5saW5lLXNwYWNpbmciLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5zdHJ1Y3R1cmUiLAogICAgICAgICJ3Y2FnMjFhYSIsCiAgICAgICAgIndjYWcxNDEyIiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuMS40LjEyIiwKICAgICAgICAiQUNUIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlIHRoYXQgdGV4dCBzcGFjaW5nIHNldCB0aHJvdWdoIHN0eWxlIGF0dHJpYnV0ZXMgY2FuIGJlIGFkanVzdGVkIHdpdGggY3VzdG9tIHN0eWxlc2hlZXRzIiwKICAgICAgImhlbHAiOiAiSW5saW5lIHRleHQgc3BhY2luZyBtdXN0IGJlIGFkanVzdGFibGUgd2l0aCBjdXN0b20gc3R5bGVzaGVldHMiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9hdm9pZC1pbmxpbmUtc3BhY2luZz9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbXSwKICAgICAgICAgICJhbGwiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaW1wb3J0YW50LWxldHRlci1zcGFjaW5nIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiTGV0dGVyLXNwYWNpbmcgaW4gdGhlIHN0eWxlIGF0dHJpYnV0ZSBpcyBub3Qgc2V0IHRvICFpbXBvcnRhbnQsIG9yIG1lZXRzIHRoZSBtaW5pbXVtIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImltcG9ydGFudC13b3JkLXNwYWNpbmciLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJ3b3JkLXNwYWNpbmcgaW4gdGhlIHN0eWxlIGF0dHJpYnV0ZSBpcyBub3Qgc2V0IHRvICFpbXBvcnRhbnQsIG9yIG1lZXRzIHRoZSBtaW5pbXVtIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImltcG9ydGFudC1saW5lLWhlaWdodCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogImxpbmUtaGVpZ2h0IGluIHRoZSBzdHlsZSBhdHRyaWJ1dGUgaXMgbm90IHNldCB0byAhaW1wb3J0YW50LCBvciBtZWV0cyB0aGUgbWluaW11bSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxib2R5IGNsYXNzPVwib2F4IG9heF9pbmRleHBhZ2Ugb2F4X2hlYWRlcl9taW5fd2lkdGggb2F4X29wdGlvbmFsX2Z1bGx3aWR0aCBvYXhfaGFzSGVhZGVyX3RyYW5zcCBvYXhfaGVhZGVyX3RyYW5zcFwiIHN0eWxlPVwiXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJib2R5IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJpbXBvcnRhbnQtbGV0dGVyLXNwYWNpbmciLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJMZXR0ZXItc3BhY2luZyBpbiB0aGUgc3R5bGUgYXR0cmlidXRlIGlzIG5vdCBzZXQgdG8gIWltcG9ydGFudCwgb3IgbWVldHMgdGhlIG1pbmltdW0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaW1wb3J0YW50LXdvcmQtc3BhY2luZyIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIndvcmQtc3BhY2luZyBpbiB0aGUgc3R5bGUgYXR0cmlidXRlIGlzIG5vdCBzZXQgdG8gIWltcG9ydGFudCwgb3IgbWVldHMgdGhlIG1pbmltdW0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaW1wb3J0YW50LWxpbmUtaGVpZ2h0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAibGluZS1oZWlnaHQgaW4gdGhlIHN0eWxlIGF0dHJpYnV0ZSBpcyBub3Qgc2V0IHRvICFpbXBvcnRhbnQsIG9yIG1lZXRzIHRoZSBtaW5pbXVtIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHVsIGNsYXNzPVwib2F4LWNvbnRlbnQtc2xpZGVyLXNsaWRlcyAgb2F4X2ltZ19yZWxfcGFub3JhbWFcIiBzdHlsZT1cInBvc2l0aW9uOiByZWxhdGl2ZTsgei1pbmRleDogMTsgaGVpZ2h0OiA0NzEuOXB4O1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1jb250ZW50LXNsaWRlci1zbGlkZXMiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogW10sCiAgICAgICAgICAiYWxsIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImltcG9ydGFudC1sZXR0ZXItc3BhY2luZyIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkxldHRlci1zcGFjaW5nIGluIHRoZSBzdHlsZSBhdHRyaWJ1dGUgaXMgbm90IHNldCB0byAhaW1wb3J0YW50LCBvciBtZWV0cyB0aGUgbWluaW11bSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJpbXBvcnRhbnQtd29yZC1zcGFjaW5nIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAid29yZC1zcGFjaW5nIGluIHRoZSBzdHlsZSBhdHRyaWJ1dGUgaXMgbm90IHNldCB0byAhaW1wb3J0YW50LCBvciBtZWV0cyB0aGUgbWluaW11bSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJpbXBvcnRhbnQtbGluZS1oZWlnaHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJsaW5lLWhlaWdodCBpbiB0aGUgc3R5bGUgYXR0cmlidXRlIGlzIG5vdCBzZXQgdG8gIWltcG9ydGFudCwgb3IgbWVldHMgdGhlIG1pbmltdW0iCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGkgY2xhc3M9XCJvYXhfcG9pbnRlclwiIHN0eWxlPVwicG9zaXRpb246IGFic29sdXRlOyB6LWluZGV4OiA0OyBvcGFjaXR5OiAxO1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9wb2ludGVyOm50aC1jaGlsZCgxKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbXSwKICAgICAgICAgICJhbGwiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaW1wb3J0YW50LWxldHRlci1zcGFjaW5nIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiTGV0dGVyLXNwYWNpbmcgaW4gdGhlIHN0eWxlIGF0dHJpYnV0ZSBpcyBub3Qgc2V0IHRvICFpbXBvcnRhbnQsIG9yIG1lZXRzIHRoZSBtaW5pbXVtIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImltcG9ydGFudC13b3JkLXNwYWNpbmciLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJ3b3JkLXNwYWNpbmcgaW4gdGhlIHN0eWxlIGF0dHJpYnV0ZSBpcyBub3Qgc2V0IHRvICFpbXBvcnRhbnQsIG9yIG1lZXRzIHRoZSBtaW5pbXVtIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImltcG9ydGFudC1saW5lLWhlaWdodCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogImxpbmUtaGVpZ2h0IGluIHRoZSBzdHlsZSBhdHRyaWJ1dGUgaXMgbm90IHNldCB0byAhaW1wb3J0YW50LCBvciBtZWV0cyB0aGUgbWluaW11bSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjx1bCBjbGFzcz1cIm9heF9yb3cgb2F4LXNsaWRlLWxpc3Qgb2F4LXNuaXBwZXQtY29udGFpbmVyXCIgc3R5bGU9XCJ0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpO1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF90aWxlX3NuaXBwZXRfbGlzdCA+IC5vYXgtc2xpZGUtbGlzdC5vYXgtc25pcHBldC1jb250YWluZXIub2F4X3JvdyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbXSwKICAgICAgICAgICJhbGwiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaW1wb3J0YW50LWxldHRlci1zcGFjaW5nIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiTGV0dGVyLXNwYWNpbmcgaW4gdGhlIHN0eWxlIGF0dHJpYnV0ZSBpcyBub3Qgc2V0IHRvICFpbXBvcnRhbnQsIG9yIG1lZXRzIHRoZSBtaW5pbXVtIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImltcG9ydGFudC13b3JkLXNwYWNpbmciLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJ3b3JkLXNwYWNpbmcgaW4gdGhlIHN0eWxlIGF0dHJpYnV0ZSBpcyBub3Qgc2V0IHRvICFpbXBvcnRhbnQsIG9yIG1lZXRzIHRoZSBtaW5pbXVtIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImltcG9ydGFudC1saW5lLWhlaWdodCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogImxpbmUtaGVpZ2h0IGluIHRoZSBzdHlsZSBhdHRyaWJ1dGUgaXMgbm90IHNldCB0byAhaW1wb3J0YW50LCBvciBtZWV0cyB0aGUgbWluaW11bSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjx1bCBjbGFzcz1cIm9heF9yb3cgb2F4LXNsaWRlLWxpc3Qgb2F4LXNuaXBwZXQtY29udGFpbmVyXCIgc3R5bGU9XCJ0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpO1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9mbGF0X3NuaXBwZXRfbGlzdCA+IC5vYXgtc2xpZGUtbGlzdC5vYXgtc25pcHBldC1jb250YWluZXIub2F4X3JvdyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbXSwKICAgICAgICAgICJhbGwiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaW1wb3J0YW50LWxldHRlci1zcGFjaW5nIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiTGV0dGVyLXNwYWNpbmcgaW4gdGhlIHN0eWxlIGF0dHJpYnV0ZSBpcyBub3Qgc2V0IHRvICFpbXBvcnRhbnQsIG9yIG1lZXRzIHRoZSBtaW5pbXVtIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImltcG9ydGFudC13b3JkLXNwYWNpbmciLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJ3b3JkLXNwYWNpbmcgaW4gdGhlIHN0eWxlIGF0dHJpYnV0ZSBpcyBub3Qgc2V0IHRvICFpbXBvcnRhbnQsIG9yIG1lZXRzIHRoZSBtaW5pbXVtIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImltcG9ydGFudC1saW5lLWhlaWdodCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogImxpbmUtaGVpZ2h0IGluIHRoZSBzdHlsZSBhdHRyaWJ1dGUgaXMgbm90IHNldCB0byAhaW1wb3J0YW50LCBvciBtZWV0cyB0aGUgbWluaW11bSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbWcgc3JjPVwiaHR0cHM6Ly9yZXMub2FzdGF0aWMuY29tL3RoZW1lcy9vYWQtcm9tYW5pYXRyYXZlbC9jc3MvaW1hZ2VzL0VVLVJPLWxvZ28ucG5nXCIgc3R5bGU9XCJwb3NpdGlvbjogYWJzb2x1dGU7IHdpZHRoOiAzNSU7IGxlZnQ6IDMycHg7IGJvdHRvbTogMzdweDtcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfcG9ydGFsX3dyYXBwZXIgPiBpbWciCiAgICAgICAgICBdCiAgICAgICAgfQogICAgICBdCiAgICB9LAogICAgewogICAgICAiaWQiOiAiYnV0dG9uLW5hbWUiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5uYW1lLXJvbGUtdmFsdWUiLAogICAgICAgICJ3Y2FnMmEiLAogICAgICAgICJ3Y2FnNDEyIiwKICAgICAgICAic2VjdGlvbjUwOCIsCiAgICAgICAgInNlY3Rpb241MDguMjIuYSIsCiAgICAgICAgIlRUdjUiLAogICAgICAgICJUVDYuYSIsCiAgICAgICAgIkVOLTMwMS01NDkiLAogICAgICAgICJFTi05LjQuMS4yIiwKICAgICAgICAiQUNUIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyBidXR0b25zIGhhdmUgZGlzY2VybmlibGUgdGV4dCIsCiAgICAgICJoZWxwIjogIkJ1dHRvbnMgbXVzdCBoYXZlIGRpc2Nlcm5pYmxlIHRleHQiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9idXR0b24tbmFtZT9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYXJpYS1sYWJlbCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJhcmlhLWxhYmVsIGF0dHJpYnV0ZSBleGlzdHMgYW5kIGlzIG5vdCBlbXB0eSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxidXR0b24gY2xhc3M9XCJvYXhfYnRuIG9heF9mbCBvYXhfYm9hcmRfdG9nZ2xlIG9heF9wb2ludGVyIG9heC1oZWFkZXItYm9hcmQtdG9nZ2xlIG9heC1oZWFkZXItYm9hcmQtdG9nZ2xlLWJ0blwiIGFyaWEtbGFiZWw9XCJEZXNjaGlkZSBtZW5pdWxcIiBkYXRhLWNsb3NlLWxhYmVsPVwiw45uY2hpZGUgbWVuaXVsXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2JvYXJkX3RvZ2dsZSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYXJpYS1sYWJlbCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJhcmlhLWxhYmVsIGF0dHJpYnV0ZSBleGlzdHMgYW5kIGlzIG5vdCBlbXB0eSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxidXR0b24gY2xhc3M9XCJvYXhfYnRuIG9heF9zZWFyY2hfdG9nZ2xlIG9heF9wb2ludGVyIG9heF9mbCBvYXgtaGVhZGVyLWJhci10b2dnbGUgb2F4LWhlYWRlci1iYXItdG9nZ2xlLW9wZW5cIiBhcmlhLWxhYmVsPVwiRGVzY2hpZGUgY8SDdXRhcmVhXCI+XG5cdFx0XHRcdFx0XHQgIFx0XHRcdDxzcGFuIGNsYXNzPVwib2F4LWljb24tbWFnbmlmaWVyIG9heF9mb250X2xhcmdlMjhcIj48L3NwYW4+XG5cdFx0XHRcdFx0XHQgIFx0XHQ8L2J1dHRvbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaGVhZGVyLWJhci10b2dnbGUtb3BlbiIKICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJieXBhc3MiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5rZXlib2FyZCIsCiAgICAgICAgIndjYWcyYSIsCiAgICAgICAgIndjYWcyNDEiLAogICAgICAgICJzZWN0aW9uNTA4IiwKICAgICAgICAic2VjdGlvbjUwOC4yMi5vIiwKICAgICAgICAiVFR2NSIsCiAgICAgICAgIlRUOS5hIiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuMi40LjEiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIGVhY2ggcGFnZSBoYXMgYXQgbGVhc3Qgb25lIG1lY2hhbmlzbSBmb3IgYSB1c2VyIHRvIGJ5cGFzcyBuYXZpZ2F0aW9uIGFuZCBqdW1wIHN0cmFpZ2h0IHRvIHRoZSBjb250ZW50IiwKICAgICAgImhlbHAiOiAiUGFnZSBtdXN0IGhhdmUgbWVhbnMgdG8gYnlwYXNzIHJlcGVhdGVkIGJsb2NrcyIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L2J5cGFzcz9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaW50ZXJuYWwtbGluay1wcmVzZW50IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiVmFsaWQgc2tpcCBsaW5rIGZvdW5kIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhlYWRlci1wcmVzZW50IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImh0bWwiOiAiPGgxIGNsYXNzPVwib2F4X2JvbGQgb2F4X2N1c3RvbV9mb250XCI+XG5cdFx0XHRcdFx0XHRTdGFpIGFjdGl2IMiZaSDDrm4gc2V6b251bCByZWNlOiBBdmVudHVyaSDImWkgcGVpc2FqZSBkZSB2aXMgaWFybmE8L2gxPiIsCiAgICAgICAgICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICAgICAgICAgImgxIgogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiaHRtbCI6ICI8aDIgY2xhc3M9XCJvYXhfcGFnZVdpZGdldF9kaXZpZGVyX3RpdGxlIG9heF9tYXJnX3RvcF84IG9heF9saW5lX2hlaWdodF8zMyBvYXhfZm9udF9ncmV5X2Rhcmsgb2F4X2ZvbnRfbGFyZ2UyNCBvYXhfdXBwZXJjYXNlXCI+VmFjYW7Im2UgZGUgaWFybsSDIGFjdGl2ZTwvaDI+IiwKICAgICAgICAgICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgICAgICAgICAiI1xcMzEgID4gaDIiCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJodG1sIjogIjxoMyBjbGFzcz1cIm9heF9oIG9heF9jdXN0b21fZm9udCBvYXhfaDNcIj5PZmVydGU8L2gzPiIsCiAgICAgICAgICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICAgICAgICAgIiNcXDMzICA+IGRpdjpudGgtY2hpbGQoMSkgPiAub2F4X2gzIgogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiaHRtbCI6ICI8aDIgY2xhc3M9XCJvYXhfcGFnZVdpZGdldF9kaXZpZGVyX3RpdGxlIG9heF9tYXJnX3RvcF84IG9heF9saW5lX2hlaWdodF8zMyBvYXhfZm9udF9ncmV5X2Rhcmsgb2F4X2ZvbnRfbGFyZ2UyNCBvYXhfdXBwZXJjYXNlXCI+SW5zcGlyxIMtdGUgyJlpIGRlc2NvcGVyxIMgUm9tw6JuaWE8L2gyPiIsCiAgICAgICAgICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICAgICAgICAgIiNcXDM0ICA+IGgyIgogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiaHRtbCI6ICI8aDMgY2xhc3M9XCJvYXhfaCBvYXhfY3VzdG9tX2ZvbnQgb2F4X2gyIG9heF9tYXJnX2JvdHRvbV8xMSBvYXhfbWFyZ190b3BfMCBvYXhfaHlwaGVuc19hdXRvXCI+R2F0YSBkZSBkcnVtZcibaWU/PC9oMz4iLAogICAgICAgICAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAgICAgICAgICIub2F4X2gyIgogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiaHRtbCI6ICI8aDMgY2xhc3M9XCJvYXhfaCBvYXhfY3VzdG9tX2ZvbnQgb2F4X2gzXCI+T3JnYW5pemVhesSDLcibaSBncmF0dWl0IGV4Y3Vyc2lhIGN1IFBsYW5pZmljYXRvcnVsIGRlIFRyYXNlZTwvaDM+IiwKICAgICAgICAgICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgICAgICAgICAiI1xcMzggID4gZGl2Om50aC1jaGlsZCgyKSA+IC5vYXhfaDMiCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJodG1sIjogIjxoMyBjbGFzcz1cIm9heF9oIG9heF9jdXN0b21fZm9udCBvYXhfaDNcIj5EaXN0cmlidWllIHRyYXNlZWxlIHBhcmN1cnNlIMiZaSBleHBlcmllbsibZWxlIHRyxINpdGU8L2gzPiIsCiAgICAgICAgICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICAgICAgICAgIiNcXDMxIDEgPiBkaXY6bnRoLWNoaWxkKDIpID4gLm9heF9oMyIKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImh0bWwiOiAiPGgzIGNsYXNzPVwib2F4X2ggb2F4X2N1c3RvbV9mb250IG9heF9oM1wiPkluc3BpcmHIm2lhIHBvdHJpdml0xIMgcGVudHJ1IG9yaWNlIG9jYXppZTwvaDM+IiwKICAgICAgICAgICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgICAgICAgICAiI1xcMzEgMyA+IGRpdjpudGgtY2hpbGQoMSkgPiAub2F4X2gzIgogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIlBhZ2UgaGFzIGEgaGVhZGluZyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJsYW5kbWFyayIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJodG1sIjogIjxtYWluIGlkPVwibWFpbkNvbnRlbnRcIiBjbGFzcz1cIm9heC10b3AtY29udFwiPiIsCiAgICAgICAgICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICAgICAgICAgIiNtYWluQ29udGVudCIKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJQYWdlIGhhcyBhIGxhbmRtYXJrIHJlZ2lvbiIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxodG1sIGxhbmc9XCJyb1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiaHRtbCIKICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJjb2xvci1jb250cmFzdCIsCiAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQuY29sb3IiLAogICAgICAgICJ3Y2FnMmFhIiwKICAgICAgICAid2NhZzE0MyIsCiAgICAgICAgIlRUdjUiLAogICAgICAgICJUVDEzLmMiLAogICAgICAgICJFTi0zMDEtNTQ5IiwKICAgICAgICAiRU4tOS4xLjQuMyIsCiAgICAgICAgIkFDVCIKICAgICAgXSwKICAgICAgImRlc2NyaXB0aW9uIjogIkVuc3VyZXMgdGhlIGNvbnRyYXN0IGJldHdlZW4gZm9yZWdyb3VuZCBhbmQgYmFja2dyb3VuZCBjb2xvcnMgbWVldHMgV0NBRyAyIEFBIG1pbmltdW0gY29udHJhc3QgcmF0aW8gdGhyZXNob2xkcyIsCiAgICAgICJoZWxwIjogIkVsZW1lbnRzIG11c3QgbWVldCBtaW5pbXVtIGNvbG9yIGNvbnRyYXN0IHJhdGlvIHRocmVzaG9sZHMiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9jb2xvci1jb250cmFzdD9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgIm1lc3NhZ2VLZXkiOiAiaGlkZGVuIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBpcyBoaWRkZW4iCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW5wdXQgdGFiaW5kZXg9XCItMVwiIHR5cGU9XCJzdWJtaXRcIiBhcmlhLWxhYmVsPVwiUG9ybmXImXRlIGPEg3V0YXJlYVwiIGNsYXNzPVwib2F4X2ljb25fZm9udCBvYXhfZm9udF9sYXJnZTI4XCIgdmFsdWU9XCLwn5SNXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2ljb25fZm9udCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgIm1lc3NhZ2VLZXkiOiAiaGlkZGVuIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBpcyBoaWRkZW4iCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW5wdXQgdGFiaW5kZXg9XCItMVwiIGlkPVwic2VhcmNoRmllbGRcIiB0eXBlPVwidGV4dFwiIGNsYXNzPVwib2F4X3NlYXJjaGZvcm1fdGV4dCBvYXgtc2VhcmNoZm9ybS10ZXh0XCIgbmFtZT1cInFcIiB2YWx1ZT1cIlwiIHBsYWNlaG9sZGVyPVwiQ8SDdXRhcmVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNzZWFyY2hGaWVsZCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImZnQ29sb3IiOiAiIzZmNmY2ZiIsCiAgICAgICAgICAgICAgICAiYmdDb2xvciI6ICIjZThlOWYyIiwKICAgICAgICAgICAgICAgICJjb250cmFzdFJhdGlvIjogNC4xNSwKICAgICAgICAgICAgICAgICJmb250U2l6ZSI6ICIxOC4wcHQgKDI0cHgpIiwKICAgICAgICAgICAgICAgICJmb250V2VpZ2h0IjogIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAiZXhwZWN0ZWRDb250cmFzdFJhdGlvIjogIjM6MSIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHN1ZmZpY2llbnQgY29sb3IgY29udHJhc3Qgb2YgNC4xNSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxoMiBjbGFzcz1cIm9heF9wYWdlV2lkZ2V0X2RpdmlkZXJfdGl0bGUgb2F4X21hcmdfdG9wXzggb2F4X2xpbmVfaGVpZ2h0XzMzIG9heF9mb250X2dyZXlfZGFyayBvYXhfZm9udF9sYXJnZTI0IG9heF91cHBlcmNhc2VcIj5WYWNhbsibZSBkZSBpYXJuxIMgYWN0aXZlPC9oMj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDMxICA+IGgyIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJjb2xvci1jb250cmFzdCIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiZmdDb2xvciI6ICIjMzMzMzMzIiwKICAgICAgICAgICAgICAgICJiZ0NvbG9yIjogIiNlZWVlZWYiLAogICAgICAgICAgICAgICAgImNvbnRyYXN0UmF0aW8iOiAxMC44OSwKICAgICAgICAgICAgICAgICJmb250U2l6ZSI6ICIxMC4xcHQgKDEzLjVweCkiLAogICAgICAgICAgICAgICAgImZvbnRXZWlnaHQiOiAibm9ybWFsIiwKICAgICAgICAgICAgICAgICJleHBlY3RlZENvbnRyYXN0UmF0aW8iOiAiNC41OjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBzdWZmaWNpZW50IGNvbG9yIGNvbnRyYXN0IG9mIDEwLjg5IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHNwYW4gY2xhc3M9XCJvYXhfZWxsaXBzaXNcIj5NdW7Fo2lpIEJyYcWfb3Z1bHVpPC9zcGFuPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC00NDQyNTY1OCA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiAub2F4X3NuaXBwZXRfbG9jYXRvci5vYXhfaW1hZ2Vfc25pcHBldF9sb2NhdG9yID4gLm9heF9lbGxpcHNpcyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImZnQ29sb3IiOiAiIzMzMzMzMyIsCiAgICAgICAgICAgICAgICAiYmdDb2xvciI6ICIjZWVlZWVmIiwKICAgICAgICAgICAgICAgICJjb250cmFzdFJhdGlvIjogMTAuODksCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMTAuMXB0ICgxMy41cHgpIiwKICAgICAgICAgICAgICAgICJmb250V2VpZ2h0IjogIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAiZXhwZWN0ZWRDb250cmFzdFJhdGlvIjogIjQuNToxIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgc3VmZmljaWVudCBjb2xvciBjb250cmFzdCBvZiAxMC44OSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxzcGFuIGNsYXNzPVwib2F4X2VsbGlwc2lzXCI+TWFzaXZ1bCBNYXJhbXVyZcWfLVJvZG5hPC9zcGFuPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC00NDQyNTMzOCA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiAub2F4X3NuaXBwZXRfbG9jYXRvci5vYXhfaW1hZ2Vfc25pcHBldF9sb2NhdG9yID4gLm9heF9lbGxpcHNpcyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImZnQ29sb3IiOiAiIzI3MjcyNyIsCiAgICAgICAgICAgICAgICAiYmdDb2xvciI6ICIjZThlOWYyIiwKICAgICAgICAgICAgICAgICJjb250cmFzdFJhdGlvIjogMTIuMzUsCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMTguMHB0ICgyNHB4KSIsCiAgICAgICAgICAgICAgICAiZm9udFdlaWdodCI6ICJib2xkIiwKICAgICAgICAgICAgICAgICJleHBlY3RlZENvbnRyYXN0UmF0aW8iOiAiMzoxIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgc3VmZmljaWVudCBjb2xvciBjb250cmFzdCBvZiAxMi4zNSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxoMyBjbGFzcz1cIm9heF9oIG9heF9jdXN0b21fZm9udCBvYXhfaDNcIj5PZmVydGU8L2gzPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzMgID4gZGl2Om50aC1jaGlsZCgxKSA+IC5vYXhfaDMiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImNvbG9yLWNvbnRyYXN0IiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJmZ0NvbG9yIjogIiM2ZjZmNmYiLAogICAgICAgICAgICAgICAgImJnQ29sb3IiOiAiI2U4ZTlmMiIsCiAgICAgICAgICAgICAgICAiY29udHJhc3RSYXRpbyI6IDQuMTUsCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMTguMHB0ICgyNHB4KSIsCiAgICAgICAgICAgICAgICAiZm9udFdlaWdodCI6ICJub3JtYWwiLAogICAgICAgICAgICAgICAgImV4cGVjdGVkQ29udHJhc3RSYXRpbyI6ICIzOjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBzdWZmaWNpZW50IGNvbG9yIGNvbnRyYXN0IG9mIDQuMTUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aDIgY2xhc3M9XCJvYXhfcGFnZVdpZGdldF9kaXZpZGVyX3RpdGxlIG9heF9tYXJnX3RvcF84IG9heF9saW5lX2hlaWdodF8zMyBvYXhfZm9udF9ncmV5X2Rhcmsgb2F4X2ZvbnRfbGFyZ2UyNCBvYXhfdXBwZXJjYXNlXCI+SW5zcGlyxIMtdGUgyJlpIGRlc2NvcGVyxIMgUm9tw6JuaWE8L2gyPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzQgID4gaDIiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImNvbG9yLWNvbnRyYXN0IiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJmZ0NvbG9yIjogIiMyNzI3MjciLAogICAgICAgICAgICAgICAgImJnQ29sb3IiOiAiI2U4ZTlmMiIsCiAgICAgICAgICAgICAgICAiY29udHJhc3RSYXRpbyI6IDEyLjM1LAogICAgICAgICAgICAgICAgImZvbnRTaXplIjogIjEzLjVwdCAoMThweCkiLAogICAgICAgICAgICAgICAgImZvbnRXZWlnaHQiOiAibm9ybWFsIiwKICAgICAgICAgICAgICAgICJleHBlY3RlZENvbnRyYXN0UmF0aW8iOiAiNC41OjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBzdWZmaWNpZW50IGNvbG9yIGNvbnRyYXN0IG9mIDEyLjM1IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHA+Q2F1yJtpIGlkZWkgZGUgY8SDbMSDdG9yaWU/IEFjZXN0IGdoaWQgZGUgY8SDbMSDdG9yaWUgZXhjbHVzaXYgw67Im2kmbmJzcDt2YSBwZXJtaXRlIHBsYW5pZmljYXJlYSBzaW1wbMSDIGEmbmJzcDtjxINsxIN0b3JpZWkgcGVyZmVjdMSDLiBBZmzEgyBkZXNwcmUgY2VsZSBtYWkgaW50ZXJlc2FudGUgY29syJt1cmkgYWxlIFJvbcOibmllaSwgZXZlbmltZW50ZSBjYXJlIG51IHRyZWJ1aWUgcmF0YXRlLCBjZWxlIG1haSBub3RhYmlsZSBwdW5jdGUgZGUgaW50ZXJlcyDImWkgbG9jdXJpIGRlIGNhemFyZSBydXN0aWNlLjwvcD4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfdGV4dF9jZW50ZXJGaXJzdExpbmUub2F4X21hcmdfdG9wXzExID4gZGl2ID4gcCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImZnQ29sb3IiOiAiIzI3MjcyNyIsCiAgICAgICAgICAgICAgICAiYmdDb2xvciI6ICIjZmZmZmZmIiwKICAgICAgICAgICAgICAgICJjb250cmFzdFJhdGlvIjogMTQuOTMsCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMTIuMHB0ICgxNnB4KSIsCiAgICAgICAgICAgICAgICAiZm9udFdlaWdodCI6ICJub3JtYWwiLAogICAgICAgICAgICAgICAgImV4cGVjdGVkQ29udHJhc3RSYXRpbyI6ICI0LjU6MSIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHN1ZmZpY2llbnQgY29sb3IgY29udHJhc3Qgb2YgMTQuOTMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSB0YXJnZXQ9XCJfc2VsZlwiIHJlbD1cIlwiIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vdGFyYS9yb21hbmlhLzEwMzY5OTEvXCIgY2xhc3M9XCJvYXhfYnRuIG9heF9idG5fbGFyZ2Ugb2F4X2J0bl93aGl0ZVwiPlNwcmUgZ2hpZDwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfYnRuX3doaXRlIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJjb2xvci1jb250cmFzdCIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiZmdDb2xvciI6ICIjMjcyNzI3IiwKICAgICAgICAgICAgICAgICJiZ0NvbG9yIjogIiNlOGU5ZjIiLAogICAgICAgICAgICAgICAgImNvbnRyYXN0UmF0aW8iOiAxMi4zNSwKICAgICAgICAgICAgICAgICJmb250U2l6ZSI6ICIxOC4wcHQgKDI0cHgpIiwKICAgICAgICAgICAgICAgICJmb250V2VpZ2h0IjogImJvbGQiLAogICAgICAgICAgICAgICAgImV4cGVjdGVkQ29udHJhc3RSYXRpbyI6ICIzOjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBzdWZmaWNpZW50IGNvbG9yIGNvbnRyYXN0IG9mIDEyLjM1IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGgzIGNsYXNzPVwib2F4X2ggb2F4X2N1c3RvbV9mb250IG9heF9oM1wiPk9yZ2FuaXplYXrEgy3Im2kgZ3JhdHVpdCBleGN1cnNpYSBjdSBQbGFuaWZpY2F0b3J1bCBkZSBUcmFzZWU8L2gzPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzggID4gZGl2Om50aC1jaGlsZCgyKSA+IC5vYXhfaDMiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImNvbG9yLWNvbnRyYXN0IiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJmZ0NvbG9yIjogIiMyNzI3MjciLAogICAgICAgICAgICAgICAgImJnQ29sb3IiOiAiI2U4ZTlmMiIsCiAgICAgICAgICAgICAgICAiY29udHJhc3RSYXRpbyI6IDEyLjM1LAogICAgICAgICAgICAgICAgImZvbnRTaXplIjogIjEzLjVwdCAoMThweCkiLAogICAgICAgICAgICAgICAgImZvbnRXZWlnaHQiOiAibm9ybWFsIiwKICAgICAgICAgICAgICAgICJleHBlY3RlZENvbnRyYXN0UmF0aW8iOiAiNC41OjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBzdWZmaWNpZW50IGNvbG9yIGNvbnRyYXN0IG9mIDEyLjM1IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHA+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzOCAgPiAub2F4X3RleHRfY2VudGVyRmlyc3RMaW5lID4gZGl2ID4gcCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImZnQ29sb3IiOiAiIzI3MjcyNyIsCiAgICAgICAgICAgICAgICAiYmdDb2xvciI6ICIjYjdiN2I3IiwKICAgICAgICAgICAgICAgICJjb250cmFzdFJhdGlvIjogNy40NCwKICAgICAgICAgICAgICAgICJmb250U2l6ZSI6ICIxMi4wcHQgKDE2cHgpIiwKICAgICAgICAgICAgICAgICJmb250V2VpZ2h0IjogIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAiZXhwZWN0ZWRDb250cmFzdFJhdGlvIjogIjQuNToxIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgc3VmZmljaWVudCBjb2xvciBjb250cmFzdCBvZiA3LjQ0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgdGFyZ2V0PVwiX3NlbGZcIiByZWw9XCJcIiBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL3RvdXJwbGFubmVyL1wiIGNsYXNzPVwib2F4X2J0biBvYXhfYnRuX2xhcmdlIG9heF9idG5fY3VzdG9tIG9heF9idG5fbWluV2lkdGhfd2lkZVwiPlBsYW5pZmljxIMgYWN1bSBwcmltdWwgdHJhc2V1PC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9idG5fbWluV2lkdGhfd2lkZSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImZnQ29sb3IiOiAiIzI3MjcyNyIsCiAgICAgICAgICAgICAgICAiYmdDb2xvciI6ICIjZThlOWYyIiwKICAgICAgICAgICAgICAgICJjb250cmFzdFJhdGlvIjogMTIuMzUsCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMTguMHB0ICgyNHB4KSIsCiAgICAgICAgICAgICAgICAiZm9udFdlaWdodCI6ICJib2xkIiwKICAgICAgICAgICAgICAgICJleHBlY3RlZENvbnRyYXN0UmF0aW8iOiAiMzoxIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgc3VmZmljaWVudCBjb2xvciBjb250cmFzdCBvZiAxMi4zNSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxoMyBjbGFzcz1cIm9heF9oIG9heF9jdXN0b21fZm9udCBvYXhfaDNcIj5EaXN0cmlidWllIHRyYXNlZWxlIHBhcmN1cnNlIMiZaSBleHBlcmllbsibZWxlIHRyxINpdGU8L2gzPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzEgMSA+IGRpdjpudGgtY2hpbGQoMikgPiAub2F4X2gzIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJjb2xvci1jb250cmFzdCIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiZmdDb2xvciI6ICIjMjcyNzI3IiwKICAgICAgICAgICAgICAgICJiZ0NvbG9yIjogIiNlOGU5ZjIiLAogICAgICAgICAgICAgICAgImNvbnRyYXN0UmF0aW8iOiAxMi4zNSwKICAgICAgICAgICAgICAgICJmb250U2l6ZSI6ICIxMy41cHQgKDE4cHgpIiwKICAgICAgICAgICAgICAgICJmb250V2VpZ2h0IjogIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAiZXhwZWN0ZWRDb250cmFzdFJhdGlvIjogIjQuNToxIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgc3VmZmljaWVudCBjb2xvciBjb250cmFzdCBvZiAxMi4zNSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxwPk8gcGxhbmlmaWNhcmVhIHByZWNpc8SDJm5ic3A7YSB0cmFzZXVsdWkgbnUgZXN0ZSBkZWPDonQgbyBwYXJ0ZSBkaW4gZGludHItbyBhdmVudHVyxIMmbmJzcDtyZXXImWl0xIMuIEN1IGFkZXbEg3JhdCBpbnRlcmVzYW50ZSBkZXZpbiB0cmFzZWVsZSBhYmlhIGR1cMSDIHB1YmxpY2FyZWEgZGVzY3JpZXJlaWkgYWNlc3RvcmEgw65uc2/Im2l0xIMgZGUgaW1hZ2luaSBkaW4gZXhjdXJzaWUuJm5ic3A7PC9wPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzEgMSA+IC5vYXhfdGV4dF9jZW50ZXJGaXJzdExpbmUgPiBkaXYgPiBwOm50aC1jaGlsZCgxKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImZnQ29sb3IiOiAiIzI3MjcyNyIsCiAgICAgICAgICAgICAgICAiYmdDb2xvciI6ICIjZThlOWYyIiwKICAgICAgICAgICAgICAgICJjb250cmFzdFJhdGlvIjogMTIuMzUsCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMTMuNXB0ICgxOHB4KSIsCiAgICAgICAgICAgICAgICAiZm9udFdlaWdodCI6ICJub3JtYWwiLAogICAgICAgICAgICAgICAgImV4cGVjdGVkQ29udHJhc3RSYXRpbyI6ICI0LjU6MSIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHN1ZmZpY2llbnQgY29sb3IgY29udHJhc3Qgb2YgMTIuMzUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8cD4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgInA6bnRoLWNoaWxkKDIpIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJjb2xvci1jb250cmFzdCIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiZmdDb2xvciI6ICIjMjcyNzI3IiwKICAgICAgICAgICAgICAgICJiZ0NvbG9yIjogIiNlOGU5ZjIiLAogICAgICAgICAgICAgICAgImNvbnRyYXN0UmF0aW8iOiAxMi4zNSwKICAgICAgICAgICAgICAgICJmb250U2l6ZSI6ICIxOC4wcHQgKDI0cHgpIiwKICAgICAgICAgICAgICAgICJmb250V2VpZ2h0IjogImJvbGQiLAogICAgICAgICAgICAgICAgImV4cGVjdGVkQ29udHJhc3RSYXRpbyI6ICIzOjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBzdWZmaWNpZW50IGNvbG9yIGNvbnRyYXN0IG9mIDEyLjM1IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGgzIGNsYXNzPVwib2F4X2ggb2F4X2N1c3RvbV9mb250IG9heF9oM1wiPkluc3BpcmHIm2lhIHBvdHJpdml0xIMgcGVudHJ1IG9yaWNlIG9jYXppZTwvaDM+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzMSAzID4gZGl2Om50aC1jaGlsZCgxKSA+IC5vYXhfaDMiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImNvbG9yLWNvbnRyYXN0IiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJmZ0NvbG9yIjogIiMyNzI3MjciLAogICAgICAgICAgICAgICAgImJnQ29sb3IiOiAiI2U4ZTlmMiIsCiAgICAgICAgICAgICAgICAiY29udHJhc3RSYXRpbyI6IDEyLjM1LAogICAgICAgICAgICAgICAgImZvbnRTaXplIjogIjEzLjVwdCAoMThweCkiLAogICAgICAgICAgICAgICAgImZvbnRXZWlnaHQiOiAibm9ybWFsIiwKICAgICAgICAgICAgICAgICJleHBlY3RlZENvbnRyYXN0UmF0aW8iOiAiNC41OjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBzdWZmaWNpZW50IGNvbG9yIGNvbnRyYXN0IG9mIDEyLjM1IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHA+R2hpZHVsIFJvbWFuaWFUcmF2ZWwuZ3VpZGUgYXJlIHVuIHRyYXNldSBwZW50cnUgb3JpY2UgYWN0aXZpdGF0ZSDImWkgw65uIG9yaWNlIHJlZ2l1bmUgYWxlZ2kgc8SDIGV4cGxvcmV6aS4gVG9hdGUgdHJhc2VlbGUgc3VudCBpbnRyb2R1c2UgbWFudWFsLCBjaGlhciBkZSBjxIN0cmUgY2VpIGNlIGxlLWF1IHBhcmN1cnMsIMiZaSBwb3QgZmkgZmlsdHJhdGUgw65uIGZ1bmPIm2llIGRlIGRpc3RhbsibxIMsIGRpZmljdWx0YXRlIMiZaSBsZWfEg3R1cmlsZSBjdSZuYnNwO3RyYW5zcG9ydCBwdWJsaWMuPC9wPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9tYXJnX3RvcF8yMi5vYXhfdGV4dF9jZW50ZXJGaXJzdExpbmUub2F4X21hcmdfYm90dG9tXzQ0ID4gZGl2ID4gcCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImZnQ29sb3IiOiAiI2ZmZmZmZiIsCiAgICAgICAgICAgICAgICAiYmdDb2xvciI6ICIjY2UxMDI2IiwKICAgICAgICAgICAgICAgICJjb250cmFzdFJhdGlvIjogNS42MywKICAgICAgICAgICAgICAgICJmb250U2l6ZSI6ICIxMi4wcHQgKDE2cHgpIiwKICAgICAgICAgICAgICAgICJmb250V2VpZ2h0IjogImJvbGQiLAogICAgICAgICAgICAgICAgImV4cGVjdGVkQ29udHJhc3RSYXRpbyI6ICI0LjU6MSIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHN1ZmZpY2llbnQgY29sb3IgY29udHJhc3Qgb2YgNS42MyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxzcGFuIGNsYXNzPVwib2F4LW5hdi10b2dnbGVcIj5TZXJ2aWNlPC9zcGFuPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF91bnN0eWxlZF9saXN0Lm9heF9tZW51X2Zvb3Rlcl9saXN0Lm9heF9ub19tYXJnID4gLm9heF9oYXNfc3ViLm9heC10b2dnbGUtdHJhbnM6bnRoLWNoaWxkKDEpID4gLm9heC1uYXYtdG9nZ2xlIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJjb2xvci1jb250cmFzdCIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiZmdDb2xvciI6ICIjZmZmZmZmIiwKICAgICAgICAgICAgICAgICJiZ0NvbG9yIjogIiNjZTEwMjYiLAogICAgICAgICAgICAgICAgImNvbnRyYXN0UmF0aW8iOiA1LjYzLAogICAgICAgICAgICAgICAgImZvbnRTaXplIjogIjEwLjVwdCAoMTRweCkiLAogICAgICAgICAgICAgICAgImZvbnRXZWlnaHQiOiAibm9ybWFsIiwKICAgICAgICAgICAgICAgICJleHBlY3RlZENvbnRyYXN0UmF0aW8iOiAiNC41OjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBzdWZmaWNpZW50IGNvbG9yIGNvbnRyYXN0IG9mIDUuNjMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL3RvdXJwbGFubmVyL1wiIHRpdGxlPVwiUGxhbmlmaWNhdG9yIHRyYXNlZVwiPlBsYW5pZmljYXRvciB0cmFzZWU8L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJsaTpudGgtY2hpbGQoMSkgPiBhW3RpdGxlPVwiUGxhbmlmaWNhdG9yIHRyYXNlZVwiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImZnQ29sb3IiOiAiI2ZmZmZmZiIsCiAgICAgICAgICAgICAgICAiYmdDb2xvciI6ICIjY2UxMDI2IiwKICAgICAgICAgICAgICAgICJjb250cmFzdFJhdGlvIjogNS42MywKICAgICAgICAgICAgICAgICJmb250U2l6ZSI6ICIxMC41cHQgKDE0cHgpIiwKICAgICAgICAgICAgICAgICJmb250V2VpZ2h0IjogIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAiZXhwZWN0ZWRDb250cmFzdFJhdGlvIjogIjQuNToxIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgc3VmZmljaWVudCBjb2xvciBjb250cmFzdCBvZiA1LjYzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9wL2ZhY3RzLWFib3V0LXJvbWFuaWEvMzU5NjM2OTQvXCIgdGl0bGU9XCJGYWN0cyBhYm91dCBSb21hbmlhXCI+RmFjdHMgYWJvdXQgUm9tYW5pYTwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImxpOm50aC1jaGlsZCgyKSA+IGFbdGl0bGU9XCJGYWN0cyBhYm91dCBSb21hbmlhXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJjb2xvci1jb250cmFzdCIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiZmdDb2xvciI6ICIjZmZmZmZmIiwKICAgICAgICAgICAgICAgICJiZ0NvbG9yIjogIiNjZTEwMjYiLAogICAgICAgICAgICAgICAgImNvbnRyYXN0UmF0aW8iOiA1LjYzLAogICAgICAgICAgICAgICAgImZvbnRTaXplIjogIjEwLjVwdCAoMTRweCkiLAogICAgICAgICAgICAgICAgImZvbnRXZWlnaHQiOiAibm9ybWFsIiwKICAgICAgICAgICAgICAgICJleHBlY3RlZENvbnRyYXN0UmF0aW8iOiAiNC41OjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBzdWZmaWNpZW50IGNvbG9yIGNvbnRyYXN0IG9mIDUuNjMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cDovL3d3dy5hbnBjLmdvdi5yb1wiIHRpdGxlPVwiQU5QQyAtIFByb3RlY8ibaWEgQ29uc3VtYXRvcmlsb3JcIj5BTlBDIC0gUHJvdGVjyJtpYSBDb25zdW1hdG9yaWxvcjwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImFbaHJlZiQ9XCJ3d3cuYW5wYy5nb3Yucm9cIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImNvbG9yLWNvbnRyYXN0IiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJmZ0NvbG9yIjogIiNmZmZmZmYiLAogICAgICAgICAgICAgICAgImJnQ29sb3IiOiAiI2NlMTAyNiIsCiAgICAgICAgICAgICAgICAiY29udHJhc3RSYXRpbyI6IDUuNjMsCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMTIuMHB0ICgxNnB4KSIsCiAgICAgICAgICAgICAgICAiZm9udFdlaWdodCI6ICJib2xkIiwKICAgICAgICAgICAgICAgICJleHBlY3RlZENvbnRyYXN0UmF0aW8iOiAiNC41OjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBzdWZmaWNpZW50IGNvbG9yIGNvbnRyYXN0IG9mIDUuNjMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8c3BhbiBjbGFzcz1cIm9heC1uYXYtdG9nZ2xlXCI+SW5mb3JtYcibaWk8L3NwYW4+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X3Vuc3R5bGVkX2xpc3Qub2F4X21lbnVfZm9vdGVyX2xpc3Qub2F4X25vX21hcmcgPiAub2F4X2hhc19zdWIub2F4LXRvZ2dsZS10cmFuczpudGgtY2hpbGQoMikgPiAub2F4LW5hdi10b2dnbGUiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImNvbG9yLWNvbnRyYXN0IiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJmZ0NvbG9yIjogIiNmZmZmZmYiLAogICAgICAgICAgICAgICAgImJnQ29sb3IiOiAiI2NlMTAyNiIsCiAgICAgICAgICAgICAgICAiY29udHJhc3RSYXRpbyI6IDUuNjMsCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMTAuNXB0ICgxNHB4KSIsCiAgICAgICAgICAgICAgICAiZm9udFdlaWdodCI6ICJub3JtYWwiLAogICAgICAgICAgICAgICAgImV4cGVjdGVkQ29udHJhc3RSYXRpbyI6ICI0LjU6MSIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHN1ZmZpY2llbnQgY29sb3IgY29udHJhc3Qgb2YgNS42MyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vcC9lY29zaXN0ZW11bC1yb21hbmlhdHJhdmVsLmd1aWRlLzQ2NTE2ODk2L1wiIHRpdGxlPVwiRWNvc2lzdGVtdWwgVHVyaXN0aWNcIj5FY29zaXN0ZW11bCBUdXJpc3RpYzwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImFbdGl0bGU9XCJFY29zaXN0ZW11bCBUdXJpc3RpY1wiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImZnQ29sb3IiOiAiI2ZmZmZmZiIsCiAgICAgICAgICAgICAgICAiYmdDb2xvciI6ICIjY2UxMDI2IiwKICAgICAgICAgICAgICAgICJjb250cmFzdFJhdGlvIjogNS42MywKICAgICAgICAgICAgICAgICJmb250U2l6ZSI6ICIxMC41cHQgKDE0cHgpIiwKICAgICAgICAgICAgICAgICJmb250V2VpZ2h0IjogIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAiZXhwZWN0ZWRDb250cmFzdFJhdGlvIjogIjQuNToxIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgc3VmZmljaWVudCBjb2xvciBjb250cmFzdCBvZiA1LjYzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9wL21hcmtldGluZy1vbmxpbmUtcHJpbi1yb21hbmlhdHJhdmVsLmd1aWRlLzQ2NDk3MTU3L1wiIHRpdGxlPVwiTWFya2V0aW5nIE9ubGluZVwiPk1hcmtldGluZyBPbmxpbmU8L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJhW3RpdGxlPVwiTWFya2V0aW5nIE9ubGluZVwiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImZnQ29sb3IiOiAiI2ZmZmZmZiIsCiAgICAgICAgICAgICAgICAiYmdDb2xvciI6ICIjY2UxMDI2IiwKICAgICAgICAgICAgICAgICJjb250cmFzdFJhdGlvIjogNS42MywKICAgICAgICAgICAgICAgICJmb250U2l6ZSI6ICIxMC41cHQgKDE0cHgpIiwKICAgICAgICAgICAgICAgICJmb250V2VpZ2h0IjogIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAiZXhwZWN0ZWRDb250cmFzdFJhdGlvIjogIjQuNToxIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgc3VmZmljaWVudCBjb2xvciBjb250cmFzdCBvZiA1LjYzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9lbi9jb250YWN0Lmh0bWxcIiB0aXRsZT1cIkNvbnRhY3RcIj5Db250YWN0PC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiYVt0aXRsZT1cIkNvbnRhY3RcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImNvbG9yLWNvbnRyYXN0IiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJmZ0NvbG9yIjogIiNmZmZmZmYiLAogICAgICAgICAgICAgICAgImJnQ29sb3IiOiAiI2NlMTAyNiIsCiAgICAgICAgICAgICAgICAiY29udHJhc3RSYXRpbyI6IDUuNjMsCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMTIuMHB0ICgxNnB4KSIsCiAgICAgICAgICAgICAgICAiZm9udFdlaWdodCI6ICJib2xkIiwKICAgICAgICAgICAgICAgICJleHBlY3RlZENvbnRyYXN0UmF0aW8iOiAiNC41OjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBzdWZmaWNpZW50IGNvbG9yIGNvbnRyYXN0IG9mIDUuNjMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8c3BhbiBjbGFzcz1cIm9heC1uYXYtdG9nZ2xlXCI+QnVzaW5lc3M8L3NwYW4+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X3Vuc3R5bGVkX2xpc3Qub2F4X21lbnVfZm9vdGVyX2xpc3Qub2F4X25vX21hcmcgPiAub2F4X2hhc19zdWIub2F4LXRvZ2dsZS10cmFuczpudGgtY2hpbGQoMykgPiAub2F4LW5hdi10b2dnbGUiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImNvbG9yLWNvbnRyYXN0IiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJmZ0NvbG9yIjogIiNmZmZmZmYiLAogICAgICAgICAgICAgICAgImJnQ29sb3IiOiAiI2NlMTAyNiIsCiAgICAgICAgICAgICAgICAiY29udHJhc3RSYXRpbyI6IDUuNjMsCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMTAuNXB0ICgxNHB4KSIsCiAgICAgICAgICAgICAgICAiZm9udFdlaWdodCI6ICJub3JtYWwiLAogICAgICAgICAgICAgICAgImV4cGVjdGVkQ29udHJhc3RSYXRpbyI6ICI0LjU6MSIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHN1ZmZpY2llbnQgY29sb3IgY29udHJhc3Qgb2YgNS42MyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vcC9yb21hbmlhdHJhdmVsLmd1aWRlLXNwcmlqaW5hLW9yZ2FuaXphdGlpbGUtc2VhcmNoLXJlc2N1ZS81MjI1NzE2NS9cIiB0aXRsZT1cIlNlYXJjaCAmYW1wOyBSZXNjdWVcIj5TZWFyY2ggJmFtcDsgUmVzY3VlPC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiYVt0aXRsZT1cIlNlYXJjaCAmIFJlc2N1ZVwiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImZnQ29sb3IiOiAiI2ZmZmZmZiIsCiAgICAgICAgICAgICAgICAiYmdDb2xvciI6ICIjY2UxMDI2IiwKICAgICAgICAgICAgICAgICJjb250cmFzdFJhdGlvIjogNS42MywKICAgICAgICAgICAgICAgICJmb250U2l6ZSI6ICIxMC41cHQgKDE0cHgpIiwKICAgICAgICAgICAgICAgICJmb250V2VpZ2h0IjogIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAiZXhwZWN0ZWRDb250cmFzdFJhdGlvIjogIjQuNToxIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgc3VmZmljaWVudCBjb2xvciBjb250cmFzdCBvZiA1LjYzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9wL3BhZ2luaS1naGlkLXR1cmlzdGljLzQ2NTYxMDg3L1wiIHRpdGxlPVwiUGFnaW5pIEdoaWQgVHVyaXN0aWNcIj5QYWdpbmkgR2hpZCBUdXJpc3RpYzwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImFbdGl0bGU9XCJQYWdpbmkgR2hpZCBUdXJpc3RpY1wiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImZnQ29sb3IiOiAiI2ZmZmZmZiIsCiAgICAgICAgICAgICAgICAiYmdDb2xvciI6ICIjY2UxMDI2IiwKICAgICAgICAgICAgICAgICJjb250cmFzdFJhdGlvIjogNS42MywKICAgICAgICAgICAgICAgICJmb250U2l6ZSI6ICIxMC41cHQgKDE0cHgpIiwKICAgICAgICAgICAgICAgICJmb250V2VpZ2h0IjogIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAiZXhwZWN0ZWRDb250cmFzdFJhdGlvIjogIjQuNToxIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgc3VmZmljaWVudCBjb2xvciBjb250cmFzdCBvZiA1LjYzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby90ZXJtcy1hbmQtY29uZGl0aW9ucy5odG1sXCIgY2xhc3M9XCJvYXgtNG1hcC10ZXJtc1wiPlRlcm1lbmkgyJlpIGNvbmRpyJtpaTwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtNG1hcC10ZXJtcyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImZnQ29sb3IiOiAiI2ZmZmZmZiIsCiAgICAgICAgICAgICAgICAiYmdDb2xvciI6ICIjY2UxMDI2IiwKICAgICAgICAgICAgICAgICJjb250cmFzdFJhdGlvIjogNS42MywKICAgICAgICAgICAgICAgICJmb250U2l6ZSI6ICIxMC41cHQgKDE0cHgpIiwKICAgICAgICAgICAgICAgICJmb250V2VpZ2h0IjogIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAiZXhwZWN0ZWRDb250cmFzdFJhdGlvIjogIjQuNToxIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgc3VmZmljaWVudCBjb2xvciBjb250cmFzdCBvZiA1LjYzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9tYXAtY29weXJpZ2h0Lmh0bWxcIj5JbmZvcm1hyJtpaSBoYXJ0xIM8L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X21hcmdfcmlnaHRfMTAub2F4X2ZsOm50aC1jaGlsZCgyKSA+IGEiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImNvbG9yLWNvbnRyYXN0IiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJmZ0NvbG9yIjogIiNmZmZmZmYiLAogICAgICAgICAgICAgICAgImJnQ29sb3IiOiAiI2NlMTAyNiIsCiAgICAgICAgICAgICAgICAiY29udHJhc3RSYXRpbyI6IDUuNjMsCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMTAuNXB0ICgxNHB4KSIsCiAgICAgICAgICAgICAgICAiZm9udFdlaWdodCI6ICJub3JtYWwiLAogICAgICAgICAgICAgICAgImV4cGVjdGVkQ29udHJhc3RSYXRpbyI6ICI0LjU6MSIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHN1ZmZpY2llbnQgY29sb3IgY29udHJhc3Qgb2YgNS42MyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vcHJpdmFjeS5odG1sXCIgY2xhc3M9XCJvYXgtNG1hcC1wcml2YWN5XCI+UG9saXRpY2EgZGUgY29uZmlkZW7Im2lhbGl0YXRlPC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC00bWFwLXByaXZhY3kiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImNvbG9yLWNvbnRyYXN0IiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJmZ0NvbG9yIjogIiNmZmZmZmYiLAogICAgICAgICAgICAgICAgImJnQ29sb3IiOiAiI2NlMTAyNiIsCiAgICAgICAgICAgICAgICAiY29udHJhc3RSYXRpbyI6IDUuNjMsCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMTAuNXB0ICgxNHB4KSIsCiAgICAgICAgICAgICAgICAiZm9udFdlaWdodCI6ICJub3JtYWwiLAogICAgICAgICAgICAgICAgImV4cGVjdGVkQ29udHJhc3RSYXRpbyI6ICI0LjU6MSIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHN1ZmZpY2llbnQgY29sb3IgY29udHJhc3Qgb2YgNS42MyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vaW1wcmludC5odG1sXCIgY2xhc3M9XCJvYXgtNG1hcC1pbXByaW50XCI+TWVuyJtpdW5pIGxlZ2FsZTwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtNG1hcC1pbXByaW50IgogICAgICAgICAgXQogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImRvY3VtZW50LXRpdGxlIiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQudGV4dC1hbHRlcm5hdGl2ZXMiLAogICAgICAgICJ3Y2FnMmEiLAogICAgICAgICJ3Y2FnMjQyIiwKICAgICAgICAiVFR2NSIsCiAgICAgICAgIlRUMTIuYSIsCiAgICAgICAgIkVOLTMwMS01NDkiLAogICAgICAgICJFTi05LjIuNC4yIiwKICAgICAgICAiQUNUIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyBlYWNoIEhUTUwgZG9jdW1lbnQgY29udGFpbnMgYSBub24tZW1wdHkgPHRpdGxlPiBlbGVtZW50IiwKICAgICAgImhlbHAiOiAiRG9jdW1lbnRzIG11c3QgaGF2ZSA8dGl0bGU+IGVsZW1lbnQgdG8gYWlkIGluIG5hdmlnYXRpb24iLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9kb2N1bWVudC10aXRsZT9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZG9jLWhhcy10aXRsZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkRvY3VtZW50IGhhcyBhIG5vbi1lbXB0eSA8dGl0bGU+IGVsZW1lbnQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aHRtbCBsYW5nPVwicm9cIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImh0bWwiCiAgICAgICAgICBdCiAgICAgICAgfQogICAgICBdCiAgICB9LAogICAgewogICAgICAiaWQiOiAiZHVwbGljYXRlLWlkLWFyaWEiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5wYXJzaW5nIiwKICAgICAgICAid2NhZzJhIiwKICAgICAgICAid2NhZzQxMiIsCiAgICAgICAgIkVOLTMwMS01NDkiLAogICAgICAgICJFTi05LjQuMS4yIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyBldmVyeSBpZCBhdHRyaWJ1dGUgdmFsdWUgdXNlZCBpbiBBUklBIGFuZCBpbiBsYWJlbHMgaXMgdW5pcXVlIiwKICAgICAgImhlbHAiOiAiSURzIHVzZWQgaW4gQVJJQSBhbmQgbGFiZWxzIG11c3QgYmUgdW5pcXVlIiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80LjgvZHVwbGljYXRlLWlkLWFyaWE/YXBwbGljYXRpb249cGxheXdyaWdodCIsCiAgICAgICJub2RlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImR1cGxpY2F0ZS1pZC1hcmlhIiwKICAgICAgICAgICAgICAiZGF0YSI6ICJzZWFyY2hGaWVsZCIsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkRvY3VtZW50IGhhcyBubyBlbGVtZW50cyByZWZlcmVuY2VkIHdpdGggQVJJQSBvciBsYWJlbHMgdGhhdCBzaGFyZSB0aGUgc2FtZSBpZCBhdHRyaWJ1dGUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW5wdXQgdGFiaW5kZXg9XCItMVwiIGlkPVwic2VhcmNoRmllbGRcIiB0eXBlPVwidGV4dFwiIGNsYXNzPVwib2F4X3NlYXJjaGZvcm1fdGV4dCBvYXgtc2VhcmNoZm9ybS10ZXh0XCIgbmFtZT1cInFcIiB2YWx1ZT1cIlwiIHBsYWNlaG9sZGVyPVwiQ8SDdXRhcmVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNzZWFyY2hGaWVsZCIKICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJlbXB0eS1oZWFkaW5nIiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQubmFtZS1yb2xlLXZhbHVlIiwKICAgICAgICAiYmVzdC1wcmFjdGljZSIKICAgICAgXSwKICAgICAgImRlc2NyaXB0aW9uIjogIkVuc3VyZXMgaGVhZGluZ3MgaGF2ZSBkaXNjZXJuaWJsZSB0ZXh0IiwKICAgICAgImhlbHAiOiAiSGVhZGluZ3Mgc2hvdWxkIG5vdCBiZSBlbXB0eSIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L2VtcHR5LWhlYWRpbmc/YXBwbGljYXRpb249cGxheXdyaWdodCIsCiAgICAgICJub2RlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy12aXNpYmxlLXRleHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtaW5vciIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgdGV4dCB0aGF0IGlzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aDEgY2xhc3M9XCJvYXhfYm9sZCBvYXhfY3VzdG9tX2ZvbnRcIj5cblx0XHRcdFx0XHRcdFN0YWkgYWN0aXYgyJlpIMOubiBzZXpvbnVsIHJlY2U6IEF2ZW50dXJpIMiZaSBwZWlzYWplIGRlIHZpcyBpYXJuYTwvaDE+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJoMSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaGFzLXZpc2libGUtdGV4dCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1pbm9yIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyB0ZXh0IHRoYXQgaXMgdmlzaWJsZSB0byBzY3JlZW4gcmVhZGVycyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxoMiBjbGFzcz1cIm9heF9wYWdlV2lkZ2V0X2RpdmlkZXJfdGl0bGUgb2F4X21hcmdfdG9wXzggb2F4X2xpbmVfaGVpZ2h0XzMzIG9heF9mb250X2dyZXlfZGFyayBvYXhfZm9udF9sYXJnZTI0IG9heF91cHBlcmNhc2VcIj5WYWNhbsibZSBkZSBpYXJuxIMgYWN0aXZlPC9oMj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDMxICA+IGgyIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtdmlzaWJsZS10ZXh0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibWlub3IiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHRleHQgdGhhdCBpcyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGgzIGNsYXNzPVwib2F4X2ggb2F4X2N1c3RvbV9mb250IG9heF9oM1wiPk9mZXJ0ZTwvaDM+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzMyAgPiBkaXY6bnRoLWNoaWxkKDEpID4gLm9heF9oMyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaGFzLXZpc2libGUtdGV4dCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1pbm9yIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyB0ZXh0IHRoYXQgaXMgdmlzaWJsZSB0byBzY3JlZW4gcmVhZGVycyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxoMiBjbGFzcz1cIm9heF9wYWdlV2lkZ2V0X2RpdmlkZXJfdGl0bGUgb2F4X21hcmdfdG9wXzggb2F4X2xpbmVfaGVpZ2h0XzMzIG9heF9mb250X2dyZXlfZGFyayBvYXhfZm9udF9sYXJnZTI0IG9heF91cHBlcmNhc2VcIj5JbnNwaXLEgy10ZSDImWkgZGVzY29wZXLEgyBSb23Dom5pYTwvaDI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzNCAgPiBoMiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaGFzLXZpc2libGUtdGV4dCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1pbm9yIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyB0ZXh0IHRoYXQgaXMgdmlzaWJsZSB0byBzY3JlZW4gcmVhZGVycyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxoMyBjbGFzcz1cIm9heF9oIG9heF9jdXN0b21fZm9udCBvYXhfaDIgb2F4X21hcmdfYm90dG9tXzExIG9heF9tYXJnX3RvcF8wIG9heF9oeXBoZW5zX2F1dG9cIj5HYXRhIGRlIGRydW1lyJtpZT88L2gzPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9oMiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaGFzLXZpc2libGUtdGV4dCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1pbm9yIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyB0ZXh0IHRoYXQgaXMgdmlzaWJsZSB0byBzY3JlZW4gcmVhZGVycyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxoMyBjbGFzcz1cIm9heF9oIG9heF9jdXN0b21fZm9udCBvYXhfaDNcIj5Pcmdhbml6ZWF6xIMtyJtpIGdyYXR1aXQgZXhjdXJzaWEgY3UgUGxhbmlmaWNhdG9ydWwgZGUgVHJhc2VlPC9oMz4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDM4ICA+IGRpdjpudGgtY2hpbGQoMikgPiAub2F4X2gzIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtdmlzaWJsZS10ZXh0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibWlub3IiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHRleHQgdGhhdCBpcyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGgzIGNsYXNzPVwib2F4X2ggb2F4X2N1c3RvbV9mb250IG9heF9oM1wiPkRpc3RyaWJ1aWUgdHJhc2VlbGUgcGFyY3Vyc2UgyJlpIGV4cGVyaWVuyJtlbGUgdHLEg2l0ZTwvaDM+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzMSAxID4gZGl2Om50aC1jaGlsZCgyKSA+IC5vYXhfaDMiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy12aXNpYmxlLXRleHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtaW5vciIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgdGV4dCB0aGF0IGlzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aDMgY2xhc3M9XCJvYXhfaCBvYXhfY3VzdG9tX2ZvbnQgb2F4X2gzXCI+SW5zcGlyYcibaWEgcG90cml2aXTEgyBwZW50cnUgb3JpY2Ugb2NhemllPC9oMz4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDMxIDMgPiBkaXY6bnRoLWNoaWxkKDEpID4gLm9heF9oMyIKICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJmb3JtLWZpZWxkLW11bHRpcGxlLWxhYmVscyIsCiAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0LmZvcm1zIiwKICAgICAgICAid2NhZzJhIiwKICAgICAgICAid2NhZzMzMiIsCiAgICAgICAgIlRUdjUiLAogICAgICAgICJUVDUuYyIsCiAgICAgICAgIkVOLTMwMS01NDkiLAogICAgICAgICJFTi05LjMuMy4yIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyBmb3JtIGZpZWxkIGRvZXMgbm90IGhhdmUgbXVsdGlwbGUgbGFiZWwgZWxlbWVudHMiLAogICAgICAiaGVscCI6ICJGb3JtIGZpZWxkIG11c3Qgbm90IGhhdmUgbXVsdGlwbGUgbGFiZWwgZWxlbWVudHMiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9mb3JtLWZpZWxkLW11bHRpcGxlLWxhYmVscz9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogIm11bHRpcGxlLWxhYmVsIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImh0bWwiOiAiPGxhYmVsIGNsYXNzPVwib2F4X3Zpc3VhbGx5X2hpZGRlblwiIGZvcj1cInNlYXJjaEZpZWxkXCI+Q8SDdXRhcmU8L2xhYmVsPiIsCiAgICAgICAgICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICAgICAgICAgImxhYmVsIgogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJGb3JtIGZpZWxkIGRvZXMgbm90IGhhdmUgbXVsdGlwbGUgbGFiZWwgZWxlbWVudHMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbnB1dCB0YWJpbmRleD1cIi0xXCIgaWQ9XCJzZWFyY2hGaWVsZFwiIHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJvYXhfc2VhcmNoZm9ybV90ZXh0IG9heC1zZWFyY2hmb3JtLXRleHRcIiBuYW1lPVwicVwiIHZhbHVlPVwiXCIgcGxhY2Vob2xkZXI9XCJDxIN1dGFyZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI3NlYXJjaEZpZWxkIgogICAgICAgICAgXQogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImhlYWRpbmctb3JkZXIiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5zZW1hbnRpY3MiLAogICAgICAgICJiZXN0LXByYWN0aWNlIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyB0aGUgb3JkZXIgb2YgaGVhZGluZ3MgaXMgc2VtYW50aWNhbGx5IGNvcnJlY3QiLAogICAgICAiaGVscCI6ICJIZWFkaW5nIGxldmVscyBzaG91bGQgb25seSBpbmNyZWFzZSBieSBvbmUiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9oZWFkaW5nLW9yZGVyP2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoZWFkaW5nLW9yZGVyIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJoZWFkaW5nT3JkZXIiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAiYW5jZXN0cnkiOiBbCiAgICAgICAgICAgICAgICAgICAgICAiaHRtbCA+IGJvZHkgPiBkaXY6bnRoLWNoaWxkKDUpID4gZGl2Om50aC1jaGlsZCgxKSA+IGRpdjpudGgtY2hpbGQoMSkgPiBoMSIKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICJsZXZlbCI6IDEKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJhbmNlc3RyeSI6IFsKICAgICAgICAgICAgICAgICAgICAgICJodG1sID4gYm9keSA+IGRpdjpudGgtY2hpbGQoNSkgPiBkaXY6bnRoLWNoaWxkKDIpID4gZGl2Om50aC1jaGlsZCgxKSA+IG1haW4gPiBkaXYgPiBkaXY6bnRoLWNoaWxkKDEpID4gYXJ0aWNsZSA+IGRpdiA+IGRpdiA+IGRpdiA+IGRpdiA+IGRpdjpudGgtY2hpbGQoMykgPiBkaXYgPiBkaXY6bnRoLWNoaWxkKDEpID4gaDI6bnRoLWNoaWxkKDMpIgogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgImxldmVsIjogMgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgImFuY2VzdHJ5IjogWwogICAgICAgICAgICAgICAgICAgICAgImh0bWwgPiBib2R5ID4gZGl2Om50aC1jaGlsZCg1KSA+IGRpdjpudGgtY2hpbGQoMikgPiBkaXY6bnRoLWNoaWxkKDEpID4gbWFpbiA+IGRpdiA+IGRpdjpudGgtY2hpbGQoMSkgPiBhcnRpY2xlID4gZGl2ID4gZGl2ID4gZGl2ID4gZGl2ID4gZGl2Om50aC1jaGlsZCgzKSA+IGRpdiA+IGRpdjpudGgtY2hpbGQoMykgPiBkaXY6bnRoLWNoaWxkKDEpID4gaDMiCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAibGV2ZWwiOiAzCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAiYW5jZXN0cnkiOiBbCiAgICAgICAgICAgICAgICAgICAgICAiaHRtbCA+IGJvZHkgPiBkaXY6bnRoLWNoaWxkKDUpID4gZGl2Om50aC1jaGlsZCgyKSA+IGRpdjpudGgtY2hpbGQoMSkgPiBtYWluID4gZGl2ID4gZGl2Om50aC1jaGlsZCgxKSA+IGFydGljbGUgPiBkaXYgPiBkaXYgPiBkaXYgPiBkaXYgPiBkaXY6bnRoLWNoaWxkKDMpID4gZGl2ID4gZGl2Om50aC1jaGlsZCg0KSA+IGgyOm50aC1jaGlsZCgzKSIKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICJsZXZlbCI6IDIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJhbmNlc3RyeSI6IFsKICAgICAgICAgICAgICAgICAgICAgICJodG1sID4gYm9keSA+IGRpdjpudGgtY2hpbGQoNSkgPiBkaXY6bnRoLWNoaWxkKDIpID4gZGl2Om50aC1jaGlsZCgxKSA+IG1haW4gPiBkaXYgPiBkaXY6bnRoLWNoaWxkKDEpID4gYXJ0aWNsZSA+IGRpdiA+IGRpdiA+IGRpdiA+IGRpdiA+IGRpdjpudGgtY2hpbGQoMykgPiBkaXYgPiBkaXY6bnRoLWNoaWxkKDYpID4gZGl2ID4gZGl2Om50aC1jaGlsZCgxKSA+IGRpdjpudGgtY2hpbGQoMikgPiBkaXYgPiBoMzpudGgtY2hpbGQoMSkiCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAibGV2ZWwiOiAzCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAiYW5jZXN0cnkiOiBbCiAgICAgICAgICAgICAgICAgICAgICAiaHRtbCA+IGJvZHkgPiBkaXY6bnRoLWNoaWxkKDUpID4gZGl2Om50aC1jaGlsZCgyKSA+IGRpdjpudGgtY2hpbGQoMSkgPiBtYWluID4gZGl2ID4gZGl2Om50aC1jaGlsZCgxKSA+IGFydGljbGUgPiBkaXYgPiBkaXYgPiBkaXYgPiBkaXYgPiBkaXY6bnRoLWNoaWxkKDMpID4gZGl2ID4gZGl2Om50aC1jaGlsZCg4KSA+IGRpdjpudGgtY2hpbGQoMikgPiBoMyIKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICJsZXZlbCI6IDMKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJhbmNlc3RyeSI6IFsKICAgICAgICAgICAgICAgICAgICAgICJodG1sID4gYm9keSA+IGRpdjpudGgtY2hpbGQoNSkgPiBkaXY6bnRoLWNoaWxkKDIpID4gZGl2Om50aC1jaGlsZCgxKSA+IG1haW4gPiBkaXYgPiBkaXY6bnRoLWNoaWxkKDEpID4gYXJ0aWNsZSA+IGRpdiA+IGRpdiA+IGRpdiA+IGRpdiA+IGRpdjpudGgtY2hpbGQoMykgPiBkaXYgPiBkaXY6bnRoLWNoaWxkKDExKSA+IGRpdjpudGgtY2hpbGQoMikgPiBoMyIKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICJsZXZlbCI6IDMKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJhbmNlc3RyeSI6IFsKICAgICAgICAgICAgICAgICAgICAgICJodG1sID4gYm9keSA+IGRpdjpudGgtY2hpbGQoNSkgPiBkaXY6bnRoLWNoaWxkKDIpID4gZGl2Om50aC1jaGlsZCgxKSA+IG1haW4gPiBkaXYgPiBkaXY6bnRoLWNoaWxkKDEpID4gYXJ0aWNsZSA+IGRpdiA+IGRpdiA+IGRpdiA+IGRpdiA+IGRpdjpudGgtY2hpbGQoMykgPiBkaXYgPiBkaXY6bnRoLWNoaWxkKDEzKSA+IGRpdjpudGgtY2hpbGQoMSkgPiBoMzpudGgtY2hpbGQoMSkiCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAibGV2ZWwiOiAzCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJIZWFkaW5nIG9yZGVyIHZhbGlkIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGgxIGNsYXNzPVwib2F4X2JvbGQgb2F4X2N1c3RvbV9mb250XCI+XG5cdFx0XHRcdFx0XHRTdGFpIGFjdGl2IMiZaSDDrm4gc2V6b251bCByZWNlOiBBdmVudHVyaSDImWkgcGVpc2FqZSBkZSB2aXMgaWFybmE8L2gxPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiaDEiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhlYWRpbmctb3JkZXIiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiSGVhZGluZyBvcmRlciB2YWxpZCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxoMiBjbGFzcz1cIm9heF9wYWdlV2lkZ2V0X2RpdmlkZXJfdGl0bGUgb2F4X21hcmdfdG9wXzggb2F4X2xpbmVfaGVpZ2h0XzMzIG9heF9mb250X2dyZXlfZGFyayBvYXhfZm9udF9sYXJnZTI0IG9heF91cHBlcmNhc2VcIj5WYWNhbsibZSBkZSBpYXJuxIMgYWN0aXZlPC9oMj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDMxICA+IGgyIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoZWFkaW5nLW9yZGVyIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkhlYWRpbmcgb3JkZXIgdmFsaWQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aDMgY2xhc3M9XCJvYXhfaCBvYXhfY3VzdG9tX2ZvbnQgb2F4X2gzXCI+T2ZlcnRlPC9oMz4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDMzICA+IGRpdjpudGgtY2hpbGQoMSkgPiAub2F4X2gzIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoZWFkaW5nLW9yZGVyIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkhlYWRpbmcgb3JkZXIgdmFsaWQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aDIgY2xhc3M9XCJvYXhfcGFnZVdpZGdldF9kaXZpZGVyX3RpdGxlIG9heF9tYXJnX3RvcF84IG9heF9saW5lX2hlaWdodF8zMyBvYXhfZm9udF9ncmV5X2Rhcmsgb2F4X2ZvbnRfbGFyZ2UyNCBvYXhfdXBwZXJjYXNlXCI+SW5zcGlyxIMtdGUgyJlpIGRlc2NvcGVyxIMgUm9tw6JuaWE8L2gyPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzQgID4gaDIiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhlYWRpbmctb3JkZXIiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiSGVhZGluZyBvcmRlciB2YWxpZCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxoMyBjbGFzcz1cIm9heF9oIG9heF9jdXN0b21fZm9udCBvYXhfaDIgb2F4X21hcmdfYm90dG9tXzExIG9heF9tYXJnX3RvcF8wIG9heF9oeXBoZW5zX2F1dG9cIj5HYXRhIGRlIGRydW1lyJtpZT88L2gzPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9oMiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaGVhZGluZy1vcmRlciIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJIZWFkaW5nIG9yZGVyIHZhbGlkIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGgzIGNsYXNzPVwib2F4X2ggb2F4X2N1c3RvbV9mb250IG9heF9oM1wiPk9yZ2FuaXplYXrEgy3Im2kgZ3JhdHVpdCBleGN1cnNpYSBjdSBQbGFuaWZpY2F0b3J1bCBkZSBUcmFzZWU8L2gzPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzggID4gZGl2Om50aC1jaGlsZCgyKSA+IC5vYXhfaDMiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhlYWRpbmctb3JkZXIiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiSGVhZGluZyBvcmRlciB2YWxpZCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxoMyBjbGFzcz1cIm9heF9oIG9heF9jdXN0b21fZm9udCBvYXhfaDNcIj5EaXN0cmlidWllIHRyYXNlZWxlIHBhcmN1cnNlIMiZaSBleHBlcmllbsibZWxlIHRyxINpdGU8L2gzPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzEgMSA+IGRpdjpudGgtY2hpbGQoMikgPiAub2F4X2gzIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoZWFkaW5nLW9yZGVyIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkhlYWRpbmcgb3JkZXIgdmFsaWQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aDMgY2xhc3M9XCJvYXhfaCBvYXhfY3VzdG9tX2ZvbnQgb2F4X2gzXCI+SW5zcGlyYcibaWEgcG90cml2aXTEgyBwZW50cnUgb3JpY2Ugb2NhemllPC9oMz4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDMxIDMgPiBkaXY6bnRoLWNoaWxkKDEpID4gLm9heF9oMyIKICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJodG1sLWhhcy1sYW5nIiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQubGFuZ3VhZ2UiLAogICAgICAgICJ3Y2FnMmEiLAogICAgICAgICJ3Y2FnMzExIiwKICAgICAgICAiVFR2NSIsCiAgICAgICAgIlRUMTEuYSIsCiAgICAgICAgIkVOLTMwMS01NDkiLAogICAgICAgICJFTi05LjMuMS4xIiwKICAgICAgICAiQUNUIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyBldmVyeSBIVE1MIGRvY3VtZW50IGhhcyBhIGxhbmcgYXR0cmlidXRlIiwKICAgICAgImhlbHAiOiAiPGh0bWw+IGVsZW1lbnQgbXVzdCBoYXZlIGEgbGFuZyBhdHRyaWJ1dGUiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9odG1sLWhhcy1sYW5nP2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtbGFuZyIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIlRoZSA8aHRtbD4gZWxlbWVudCBoYXMgYSBsYW5nIGF0dHJpYnV0ZSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxodG1sIGxhbmc9XCJyb1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiaHRtbCIKICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJodG1sLWxhbmctdmFsaWQiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5sYW5ndWFnZSIsCiAgICAgICAgIndjYWcyYSIsCiAgICAgICAgIndjYWczMTEiLAogICAgICAgICJUVHY1IiwKICAgICAgICAiVFQxMS5hIiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuMy4xLjEiLAogICAgICAgICJBQ1QiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIHRoZSBsYW5nIGF0dHJpYnV0ZSBvZiB0aGUgPGh0bWw+IGVsZW1lbnQgaGFzIGEgdmFsaWQgdmFsdWUiLAogICAgICAiaGVscCI6ICI8aHRtbD4gZWxlbWVudCBtdXN0IGhhdmUgYSB2YWxpZCB2YWx1ZSBmb3IgdGhlIGxhbmcgYXR0cmlidXRlIiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80LjgvaHRtbC1sYW5nLXZhbGlkP2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAidmFsaWQtbGFuZyIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIlZhbHVlIG9mIGxhbmcgYXR0cmlidXRlIGlzIGluY2x1ZGVkIGluIHRoZSBsaXN0IG9mIHZhbGlkIGxhbmd1YWdlcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGh0bWwgbGFuZz1cInJvXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJodG1sIgogICAgICAgICAgXQogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImltYWdlLWFsdCIsCiAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0LnRleHQtYWx0ZXJuYXRpdmVzIiwKICAgICAgICAid2NhZzJhIiwKICAgICAgICAid2NhZzExMSIsCiAgICAgICAgInNlY3Rpb241MDgiLAogICAgICAgICJzZWN0aW9uNTA4LjIyLmEiLAogICAgICAgICJUVHY1IiwKICAgICAgICAiVFQ3LmEiLAogICAgICAgICJUVDcuYiIsCiAgICAgICAgIkVOLTMwMS01NDkiLAogICAgICAgICJFTi05LjEuMS4xIiwKICAgICAgICAiQUNUIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyA8aW1nPiBlbGVtZW50cyBoYXZlIGFsdGVybmF0ZSB0ZXh0IG9yIGEgcm9sZSBvZiBub25lIG9yIHByZXNlbnRhdGlvbiIsCiAgICAgICJoZWxwIjogIkltYWdlcyBtdXN0IGhhdmUgYWx0ZXJuYXRlIHRleHQiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9pbWFnZS1hbHQ/YXBwbGljYXRpb249cGxheXdyaWdodCIsCiAgICAgICJub2RlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy1hbHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgYW4gYWx0IGF0dHJpYnV0ZSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFsdC1zcGFjZS12YWx1ZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBhIHZhbGlkIGFsdCBhdHRyaWJ1dGUgdmFsdWUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbWcgc3JjPVwiaHR0cHM6Ly9yZXMub2FzdGF0aWMuY29tL3RoZW1lcy9vYWQtcm9tYW5pYXRyYXZlbC9jc3MvaW1hZ2VzL2xvZ29fcm9tYW5pYS5wbmc/dHM9MTcwNjE3NjU1NzUzMCZhbXA7NmMzNmFjZTFcIiBhbHQ9XCJMb2dvcm9tYW5pYXRyYXZlbC5ndWlkZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiaW1nW2FsdD1cIkxvZ29yb21hbmlhdHJhdmVsLmd1aWRlXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtYWx0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIGFuIGFsdCBhdHRyaWJ1dGUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhbHQtc3BhY2UtdmFsdWUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgYSB2YWxpZCBhbHQgYXR0cmlidXRlIHZhbHVlIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHNyYz1cImh0dHBzOi8vaW1nMi5vYXN0YXRpYy5jb20vaW1nMi8yNTk0MzQwMy8xMDgweDQxMHIvdmFyaWFudC5qcGdcIiB3aWR0aD1cIjEwODBcIiBoZWlnaHQ9XCI0MTBcIiBzcmNzZXQ9XCJodHRwczovL2ltZzIub2FzdGF0aWMuY29tL2ltZzIvMjU5NDM0MDMvMTA4MHg0MTByL3ZhcmlhbnQuanBnIDEwODB3LGh0dHBzOi8vaW1nMi5vYXN0YXRpYy5jb20vaW1nMi8yNTk0MzQwMy8xMjUweDQ3NXIvdmFyaWFudC5qcGcgMTI1MHcsaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzI1OTQzNDAzLzIxNjB4ODIxci92YXJpYW50LmpwZyAyMTYwdyxodHRwczovL2ltZzIub2FzdGF0aWMuY29tL2ltZzIvMjU5NDM0MDMvMjUwMHg5NTByL3ZhcmlhbnQuanBnIDI1MDB3XCIgc2l6ZXM9XCIxMDB2d1wiIGFsdD1cIlByaXZlbGnImXRlIHNwcmUgU2VtZW5pY1wiIGNsYXNzPVwib2F4X3dpZHRoX2Z1bGxcIiBkYXRhLWltZ2NvdW50PVwiMVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiaW1nW2FsdD1cIlByaXZlbGnImXRlIHNwcmUgU2VtZW5pY1wiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaGFzLWFsdCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBhbiBhbHQgYXR0cmlidXRlIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYWx0LXNwYWNlLXZhbHVlIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIGEgdmFsaWQgYWx0IGF0dHJpYnV0ZSB2YWx1ZSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGltZyBzcmM9XCJodHRwczovL2ltZzMub2FzdGF0aWMuY29tL2ltZzIvNjQ1Nzk5MjkvMTA4MHg0MTByL3ZhcmlhbnQuanBnXCIgd2lkdGg9XCIxMDgwXCIgaGVpZ2h0PVwiNDEwXCIgc3Jjc2V0PVwiaHR0cHM6Ly9pbWczLm9hc3RhdGljLmNvbS9pbWcyLzY0NTc5OTI5LzEwODB4NDEwci92YXJpYW50LmpwZyAxMDgwdyxodHRwczovL2ltZzMub2FzdGF0aWMuY29tL2ltZzIvNjQ1Nzk5MjkvMTI1MHg0NzVyL3ZhcmlhbnQuanBnIDEyNTB3LGh0dHBzOi8vaW1nMy5vYXN0YXRpYy5jb20vaW1nMi82NDU3OTkyOS8yMTYweDgyMXIvdmFyaWFudC5qcGcgMjE2MHcsaHR0cHM6Ly9pbWczLm9hc3RhdGljLmNvbS9pbWcyLzY0NTc5OTI5LzI1MDB4OTUwci92YXJpYW50LmpwZyAyNTAwd1wiIHNpemVzPVwiMTAwdndcIiBhbHQ9XCJNdW7Im2lpIEbEg2fEg3JhyJlcIiBjbGFzcz1cIm9heF93aWR0aF9mdWxsXCIgZGF0YS1pbWdjb3VudD1cIjJcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImltZ1thbHQ9XCJNdW7Im2lpIEbEg2fEg3JhyJlcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy1hbHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgYW4gYWx0IGF0dHJpYnV0ZSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFsdC1zcGFjZS12YWx1ZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBhIHZhbGlkIGFsdCBhdHRyaWJ1dGUgdmFsdWUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbWcgc3JjPVwiaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzM1OTI5MTY4LzEwODB4NDEwci92YXJpYW50LmpwZ1wiIHdpZHRoPVwiMTA4MFwiIGhlaWdodD1cIjQxMFwiIHNyY3NldD1cImh0dHBzOi8vaW1nMi5vYXN0YXRpYy5jb20vaW1nMi8zNTkyOTE2OC8xMDgweDQxMHIvdmFyaWFudC5qcGcgMTA4MHcsaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzM1OTI5MTY4LzEyNTB4NDc1ci92YXJpYW50LmpwZyAxMjUwdyxodHRwczovL2ltZzIub2FzdGF0aWMuY29tL2ltZzIvMzU5MjkxNjgvMjE2MHg4MjFyL3ZhcmlhbnQuanBnIDIxNjB3LGh0dHBzOi8vaW1nMi5vYXN0YXRpYy5jb20vaW1nMi8zNTkyOTE2OC8yNTAweDk1MHIvdmFyaWFudC5qcGcgMjUwMHdcIiBzaXplcz1cIjEwMHZ3XCIgYWx0PVwiTXVudGVsZSBCxINpyJlvcmlpLCBDbHVqLCBSb21hbmlhXCIgY2xhc3M9XCJvYXhfd2lkdGhfZnVsbFwiIGRhdGEtaW1nY291bnQ9XCIzXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJpbWdbZGF0YS1pbWdjb3VudD1cIjNcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy1hbHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgYW4gYWx0IGF0dHJpYnV0ZSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFsdC1zcGFjZS12YWx1ZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBhIHZhbGlkIGFsdCBhdHRyaWJ1dGUgdmFsdWUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbWcgd2lkdGg9XCIxMDgwXCIgaGVpZ2h0PVwiNDEwXCIgc3JjPVwiaHR0cHM6Ly9pbWczLm9hc3RhdGljLmNvbS9pbWcyLzU1MTI0MjM5LzEwODB4NDEwci92YXJpYW50LmpwZ1wiIHNyY3NldD1cImh0dHBzOi8vaW1nMy5vYXN0YXRpYy5jb20vaW1nMi81NTEyNDIzOS8xMDgweDQxMHIvdmFyaWFudC5qcGcgMTA4MHcsaHR0cHM6Ly9pbWczLm9hc3RhdGljLmNvbS9pbWcyLzU1MTI0MjM5LzEyNTB4NDc1ci92YXJpYW50LmpwZyAxMjUwdyxodHRwczovL2ltZzMub2FzdGF0aWMuY29tL2ltZzIvNTUxMjQyMzkvMjE2MHg4MjFyL3ZhcmlhbnQuanBnIDIxNjB3LGh0dHBzOi8vaW1nMy5vYXN0YXRpYy5jb20vaW1nMi81NTEyNDIzOS8yNTAweDk1MHIvdmFyaWFudC5qcGcgMjUwMHdcIiBhbHQ9XCJQxINkdXJlIGzDom5nxIMgTWVkaWHImVwiIHNpemVzPVwiMTAwdndcIiBjbGFzcz1cIm9heF93aWR0aF9mdWxsXCIgZGF0YS1vYXhfaW1nX2xvYWQ9XCJkb25lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJpbWdbYWx0PVwiUMSDZHVyZSBsw6JuZ8SDIE1lZGlhyJlcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy1hbHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgYW4gYWx0IGF0dHJpYnV0ZSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFsdC1zcGFjZS12YWx1ZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBhIHZhbGlkIGFsdCBhdHRyaWJ1dGUgdmFsdWUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbWcgc3JjPVwiaHR0cHM6Ly9pbWcxLm9hc3RhdGljLmNvbS9pbWcyLzg3NTk4NjgyLzQyMHgyMzdyL3ZhcmlhbnQuanBnXCIgYWx0PVwiQ2FiYW7EgyBtb250YW7EgywgdG9hbW5hXCIgd2lkdGg9XCI0MjBcIiBoZWlnaHQ9XCIyMzdcIiBkYXRhLW9heF9pbWdfbG9hZD1cImRvbmVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImltZ1thbHQ9XCJDYWJhbsSDIG1vbnRhbsSDLCB0b2FtbmFcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy1hbHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgYW4gYWx0IGF0dHJpYnV0ZSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFsdC1zcGFjZS12YWx1ZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBhIHZhbGlkIGFsdCBhdHRyaWJ1dGUgdmFsdWUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbWcgc3JjPVwiaHR0cHM6Ly9pbWcxLm9hc3RhdGljLmNvbS9pbWcyLzM1ODUzNTEyLzQyMHgyMzdyL3ZhcmlhbnQuanBnXCIgYWx0PVwiTcSDbsSDc3RpcmVhIFN1Y2V2acWjYVwiIHdpZHRoPVwiNDIwXCIgaGVpZ2h0PVwiMjM3XCIgZGF0YS1vYXhfaW1nX2xvYWQ9XCJkb25lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJpbWdbYWx0PVwiTcSDbsSDc3RpcmVhIFN1Y2V2acWjYVwiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaGFzLWFsdCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBhbiBhbHQgYXR0cmlidXRlIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYWx0LXNwYWNlLXZhbHVlIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIGEgdmFsaWQgYWx0IGF0dHJpYnV0ZSB2YWx1ZSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGltZyBzcmM9XCJodHRwczovL2ltZzIub2FzdGF0aWMuY29tL2ltZzIvNTMyMzE1MzMvNDIweDIzN3IvdmFyaWFudC5qcGdcIiBhbHQ9XCJQZWlzYWogZGluIE11bsibaWkgUmV0ZXphdFwiIHdpZHRoPVwiNDIwXCIgaGVpZ2h0PVwiMjM3XCIgZGF0YS1vYXhfaW1nX2xvYWQ9XCJkb25lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJpbWdbYWx0PVwiUGVpc2FqIGRpbiBNdW7Im2lpIFJldGV6YXRcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy1hbHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgYW4gYWx0IGF0dHJpYnV0ZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJwcmVzZW50YXRpb25hbC1yb2xlIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJyb2xlIjogInByZXNlbnRhdGlvbiIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50J3MgZGVmYXVsdCBzZW1hbnRpY3Mgd2VyZSBvdmVycmlkZW4gd2l0aCByb2xlPVwicHJlc2VudGF0aW9uXCIiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhbHQtc3BhY2UtdmFsdWUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgYSB2YWxpZCBhbHQgYXR0cmlidXRlIHZhbHVlIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHNyYz1cImh0dHBzOi8vcmVzMS5vYXN0YXRpYy5jb20vaWNvbnMvb2Evc2tpUmVzb3J0L2JsdWVfdmlvbGV0L3NraVJlc29ydC5zcXVhcmVfdmVjdG9yLnN2Z1wiIGNsYXNzPVwib2F4X2ltYWdlX3NuaXBwZXRfY2F0ZWdvcnlfaWNvblwiIGFsdD1cIlwiIGRhdGEtb2F4X2ltZ19sb2FkPVwiZG9uZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC0zNDQyMDQxMiA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiBvdXRwdXRbZGF0YS1vYXhfbGF6eV9sb2FkPVwiZG9uZVwiXTpudGgtY2hpbGQoMSkgPiAub2F4X2ltYWdlX3NuaXBwZXRfY2F0ZWdvcnlfaWNvblthbHQ9XCJcIl1bZGF0YS1vYXhfaW1nX2xvYWQ9XCJkb25lXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtYWx0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIGFuIGFsdCBhdHRyaWJ1dGUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhbHQtc3BhY2UtdmFsdWUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgYSB2YWxpZCBhbHQgYXR0cmlidXRlIHZhbHVlIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHNyYz1cImh0dHBzOi8vb2FkLm91dGRvb3JhY3RpdmUuY29tL2FwaS9zdGF0aWNtYXA/aT0zNDQyMDQxMiZhbXA7c2l6ZT1sb2NhdG9yJmFtcDtwcm9qZWN0PW9hZC1yb21hbmlhdHJhdmVsXCIgYWx0PVwiSGFydMSDIC8gU3RhyJtpdW5lYSDImWkgUMOicnRpYSBTZW1lbmljXCIgd2lkdGg9XCI0MDBcIiBoZWlnaHQ9XCIyMjVcIiBkYXRhLW9heF9pbWdfbG9hZD1cImRvbmVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtMzQ0MjA0MTIgPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gLm9heF9zbmlwcGV0X2xvY2F0b3Iub2F4X2ltYWdlX3NuaXBwZXRfbG9jYXRvciA+IG91dHB1dFtkYXRhLW9heF9sYXp5X2xvYWQ9XCJkb25lXCJdID4gaW1nW3dpZHRoPVwiNDAwXCJdW2hlaWdodD1cIjIyNVwiXVtkYXRhLW9heF9pbWdfbG9hZD1cImRvbmVcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy1hbHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgYW4gYWx0IGF0dHJpYnV0ZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJwcmVzZW50YXRpb25hbC1yb2xlIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJyb2xlIjogInByZXNlbnRhdGlvbiIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50J3MgZGVmYXVsdCBzZW1hbnRpY3Mgd2VyZSBvdmVycmlkZW4gd2l0aCByb2xlPVwicHJlc2VudGF0aW9uXCIiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhbHQtc3BhY2UtdmFsdWUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgYSB2YWxpZCBhbHQgYXR0cmlidXRlIHZhbHVlIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHdpZHRoPVwiNDIwXCIgaGVpZ2h0PVwiMjM3XCIgc3JjPVwiaHR0cHM6Ly9pbWcub2FzdGF0aWMuY29tL2ltZzIvMzQ0MjA0OTAvNDIweDIzN3IvdmFyaWFudC5qcGdcIiBzcmNzZXQ9XCJodHRwczovL2ltZy5vYXN0YXRpYy5jb20vaW1nMi8zNDQyMDQ5MC80MjB4MjM3ci92YXJpYW50LmpwZyA0MjB3LGh0dHBzOi8vaW1nLm9hc3RhdGljLmNvbS9pbWcyLzM0NDIwNDkwLzcyOHg0MTByL3ZhcmlhbnQuanBnIDcyOHcsaHR0cHM6Ly9pbWcub2FzdGF0aWMuY29tL2ltZzIvMzQ0MjA0OTAvMTA4MHg2MTByL3ZhcmlhbnQuanBnIDEwODB3XCIgYWx0PVwiXCIgc2l6ZXM9XCIobWluLXdpZHRoOiA4MDBweCkgNjAwcHgsIChtaW4td2lkdGg6IDY0MHB4KSA1MHZ3LCAxMDB2d1wiIGRhdGEtb2F4X2ltZ19sb2FkPVwiZG9uZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC0zNDQyMDQxMiA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiBvdXRwdXRbZGF0YS1vYXhfbGF6eV9sb2FkPVwiZG9uZVwiXTpudGgtY2hpbGQoMykgPiBpbWdbYWx0PVwiXCJdW3dpZHRoPVwiNDIwXCJdW2hlaWdodD1cIjIzN1wiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaGFzLWFsdCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBhbiBhbHQgYXR0cmlidXRlIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInByZXNlbnRhdGlvbmFsLXJvbGUiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgInJvbGUiOiAicHJlc2VudGF0aW9uIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQncyBkZWZhdWx0IHNlbWFudGljcyB3ZXJlIG92ZXJyaWRlbiB3aXRoIHJvbGU9XCJwcmVzZW50YXRpb25cIiIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFsdC1zcGFjZS12YWx1ZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBhIHZhbGlkIGFsdCBhdHRyaWJ1dGUgdmFsdWUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbWcgc3JjPVwiaHR0cHM6Ly9yZXMxLm9hc3RhdGljLmNvbS9pY29ucy9vYS9za2lSZXNvcnQvYmx1ZV92aW9sZXQvc2tpUmVzb3J0LnNxdWFyZV92ZWN0b3Iuc3ZnXCIgY2xhc3M9XCJvYXhfaW1hZ2Vfc25pcHBldF9jYXRlZ29yeV9pY29uXCIgYWx0PVwiXCIgZGF0YS1vYXhfaW1nX2xvYWQ9XCJkb25lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM1NzQ2MjM3ID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IG91dHB1dFtkYXRhLW9heF9sYXp5X2xvYWQ9XCJkb25lXCJdOm50aC1jaGlsZCgxKSA+IC5vYXhfaW1hZ2Vfc25pcHBldF9jYXRlZ29yeV9pY29uW2FsdD1cIlwiXVtkYXRhLW9heF9pbWdfbG9hZD1cImRvbmVcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy1hbHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgYW4gYWx0IGF0dHJpYnV0ZSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFsdC1zcGFjZS12YWx1ZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBhIHZhbGlkIGFsdCBhdHRyaWJ1dGUgdmFsdWUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbWcgc3JjPVwiaHR0cHM6Ly9vYWQub3V0ZG9vcmFjdGl2ZS5jb20vYXBpL3N0YXRpY21hcD9pPTM1NzQ2MjM3JmFtcDtzaXplPWxvY2F0b3ImYW1wO3Byb2plY3Q9b2FkLXJvbWFuaWF0cmF2ZWxcIiBhbHQ9XCJIYXJ0xIMgLyBTdGHIm2l1bmVhIFN0cmFqYVwiIHdpZHRoPVwiNDAwXCIgaGVpZ2h0PVwiMjI1XCIgZGF0YS1vYXhfaW1nX2xvYWQ9XCJkb25lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJpbWdbYWx0PVwiSGFydMSDIC8gU3RhyJtpdW5lYSBTdHJhamFcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy1hbHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgYW4gYWx0IGF0dHJpYnV0ZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJwcmVzZW50YXRpb25hbC1yb2xlIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJyb2xlIjogInByZXNlbnRhdGlvbiIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50J3MgZGVmYXVsdCBzZW1hbnRpY3Mgd2VyZSBvdmVycmlkZW4gd2l0aCByb2xlPVwicHJlc2VudGF0aW9uXCIiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhbHQtc3BhY2UtdmFsdWUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgYSB2YWxpZCBhbHQgYXR0cmlidXRlIHZhbHVlIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHdpZHRoPVwiNDIwXCIgaGVpZ2h0PVwiMjM3XCIgc3JjPVwiaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzM1NzQ2MzI4LzQyMHgyMzdyL3ZhcmlhbnQuanBnXCIgc3Jjc2V0PVwiaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzM1NzQ2MzI4LzQyMHgyMzdyL3ZhcmlhbnQuanBnIDQyMHcsaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzM1NzQ2MzI4LzcyOHg0MTByL3ZhcmlhbnQuanBnIDcyOHcsaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzM1NzQ2MzI4LzEwODB4NjEwci92YXJpYW50LmpwZyAxMDgwd1wiIGFsdD1cIlwiIHNpemVzPVwiKG1pbi13aWR0aDogODAwcHgpIDYwMHB4LCAobWluLXdpZHRoOiA2NDBweCkgNTB2dywgMTAwdndcIiBkYXRhLW9heF9pbWdfbG9hZD1cImRvbmVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtMzU3NDYyMzcgPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gb3V0cHV0W2RhdGEtb2F4X2xhenlfbG9hZD1cImRvbmVcIl06bnRoLWNoaWxkKDMpID4gaW1nW2FsdD1cIlwiXVt3aWR0aD1cIjQyMFwiXVtoZWlnaHQ9XCIyMzdcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy1hbHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgYW4gYWx0IGF0dHJpYnV0ZSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFsdC1zcGFjZS12YWx1ZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBhIHZhbGlkIGFsdCBhdHRyaWJ1dGUgdmFsdWUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbWcgY2xhc3M9XCJcIiBzcmM9XCJodHRwczovL3JlczIub2FzdGF0aWMuY29tL3YzL2FwcFN0b3JlX2J1dHRvbkAyeC5wbmc/NmMzNmFjZTFcIiBoZWlnaHQ9XCI0NHB4XCIgYWx0PVwiQXBwIFN0b3JlXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJpbWdbYWx0PVwiQXBwIFN0b3JlXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtYWx0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIGFuIGFsdCBhdHRyaWJ1dGUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhbHQtc3BhY2UtdmFsdWUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgYSB2YWxpZCBhbHQgYXR0cmlidXRlIHZhbHVlIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIGNsYXNzPVwiXCIgc3JjPVwiaHR0cHM6Ly9yZXMub2FzdGF0aWMuY29tL3YzL2dvb2dsZVBsYXlfYnV0dG9uQDJ4LnBuZz82YzM2YWNlMVwiIGhlaWdodD1cIjQ0cHhcIiBhbHQ9XCJHb29nbGUgUGxheSBTdG9yZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiaW1nW2FsdD1cIkdvb2dsZSBQbGF5IFN0b3JlXCJdIgogICAgICAgICAgXQogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImltYWdlLXJlZHVuZGFudC1hbHQiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC50ZXh0LWFsdGVybmF0aXZlcyIsCiAgICAgICAgImJlc3QtcHJhY3RpY2UiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmUgaW1hZ2UgYWx0ZXJuYXRpdmUgaXMgbm90IHJlcGVhdGVkIGFzIHRleHQiLAogICAgICAiaGVscCI6ICJBbHRlcm5hdGl2ZSB0ZXh0IG9mIGltYWdlcyBzaG91bGQgbm90IGJlIHJlcGVhdGVkIGFzIHRleHQiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9pbWFnZS1yZWR1bmRhbnQtYWx0P2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZHVwbGljYXRlLWltZy1sYWJlbCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1pbm9yIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGRvZXMgbm90IGR1cGxpY2F0ZSBleGlzdGluZyB0ZXh0IGluIDxpbWc+IGFsdCB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHNyYz1cImh0dHBzOi8vcmVzLm9hc3RhdGljLmNvbS90aGVtZXMvb2FkLXJvbWFuaWF0cmF2ZWwvY3NzL2ltYWdlcy9sb2dvX3JvbWFuaWEucG5nP3RzPTE3MDYxNzY1NTc1MzAmYW1wOzZjMzZhY2UxXCIgYWx0PVwiTG9nb3JvbWFuaWF0cmF2ZWwuZ3VpZGVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImltZ1thbHQ9XCJMb2dvcm9tYW5pYXRyYXZlbC5ndWlkZVwiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImR1cGxpY2F0ZS1pbWctbGFiZWwiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtaW5vciIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBkb2VzIG5vdCBkdXBsaWNhdGUgZXhpc3RpbmcgdGV4dCBpbiA8aW1nPiBhbHQgdGV4dCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGltZyBzcmM9XCJodHRwczovL2ltZzIub2FzdGF0aWMuY29tL2ltZzIvMjU5NDM0MDMvMTA4MHg0MTByL3ZhcmlhbnQuanBnXCIgd2lkdGg9XCIxMDgwXCIgaGVpZ2h0PVwiNDEwXCIgc3Jjc2V0PVwiaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzI1OTQzNDAzLzEwODB4NDEwci92YXJpYW50LmpwZyAxMDgwdyxodHRwczovL2ltZzIub2FzdGF0aWMuY29tL2ltZzIvMjU5NDM0MDMvMTI1MHg0NzVyL3ZhcmlhbnQuanBnIDEyNTB3LGh0dHBzOi8vaW1nMi5vYXN0YXRpYy5jb20vaW1nMi8yNTk0MzQwMy8yMTYweDgyMXIvdmFyaWFudC5qcGcgMjE2MHcsaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzI1OTQzNDAzLzI1MDB4OTUwci92YXJpYW50LmpwZyAyNTAwd1wiIHNpemVzPVwiMTAwdndcIiBhbHQ9XCJQcml2ZWxpyJl0ZSBzcHJlIFNlbWVuaWNcIiBjbGFzcz1cIm9heF93aWR0aF9mdWxsXCIgZGF0YS1pbWdjb3VudD1cIjFcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImltZ1thbHQ9XCJQcml2ZWxpyJl0ZSBzcHJlIFNlbWVuaWNcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogW10sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJkdXBsaWNhdGUtaW1nLWxhYmVsIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibWlub3IiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgZG9lcyBub3QgZHVwbGljYXRlIGV4aXN0aW5nIHRleHQgaW4gPGltZz4gYWx0IHRleHQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbWcgc3JjPVwiaHR0cHM6Ly9pbWczLm9hc3RhdGljLmNvbS9pbWcyLzY0NTc5OTI5LzEwODB4NDEwci92YXJpYW50LmpwZ1wiIHdpZHRoPVwiMTA4MFwiIGhlaWdodD1cIjQxMFwiIHNyY3NldD1cImh0dHBzOi8vaW1nMy5vYXN0YXRpYy5jb20vaW1nMi82NDU3OTkyOS8xMDgweDQxMHIvdmFyaWFudC5qcGcgMTA4MHcsaHR0cHM6Ly9pbWczLm9hc3RhdGljLmNvbS9pbWcyLzY0NTc5OTI5LzEyNTB4NDc1ci92YXJpYW50LmpwZyAxMjUwdyxodHRwczovL2ltZzMub2FzdGF0aWMuY29tL2ltZzIvNjQ1Nzk5MjkvMjE2MHg4MjFyL3ZhcmlhbnQuanBnIDIxNjB3LGh0dHBzOi8vaW1nMy5vYXN0YXRpYy5jb20vaW1nMi82NDU3OTkyOS8yNTAweDk1MHIvdmFyaWFudC5qcGcgMjUwMHdcIiBzaXplcz1cIjEwMHZ3XCIgYWx0PVwiTXVuyJtpaSBGxINnxINyYciZXCIgY2xhc3M9XCJvYXhfd2lkdGhfZnVsbFwiIGRhdGEtaW1nY291bnQ9XCIyXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJpbWdbYWx0PVwiTXVuyJtpaSBGxINnxINyYciZXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZHVwbGljYXRlLWltZy1sYWJlbCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1pbm9yIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGRvZXMgbm90IGR1cGxpY2F0ZSBleGlzdGluZyB0ZXh0IGluIDxpbWc+IGFsdCB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHNyYz1cImh0dHBzOi8vaW1nMi5vYXN0YXRpYy5jb20vaW1nMi8zNTkyOTE2OC8xMDgweDQxMHIvdmFyaWFudC5qcGdcIiB3aWR0aD1cIjEwODBcIiBoZWlnaHQ9XCI0MTBcIiBzcmNzZXQ9XCJodHRwczovL2ltZzIub2FzdGF0aWMuY29tL2ltZzIvMzU5MjkxNjgvMTA4MHg0MTByL3ZhcmlhbnQuanBnIDEwODB3LGh0dHBzOi8vaW1nMi5vYXN0YXRpYy5jb20vaW1nMi8zNTkyOTE2OC8xMjUweDQ3NXIvdmFyaWFudC5qcGcgMTI1MHcsaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzM1OTI5MTY4LzIxNjB4ODIxci92YXJpYW50LmpwZyAyMTYwdyxodHRwczovL2ltZzIub2FzdGF0aWMuY29tL2ltZzIvMzU5MjkxNjgvMjUwMHg5NTByL3ZhcmlhbnQuanBnIDI1MDB3XCIgc2l6ZXM9XCIxMDB2d1wiIGFsdD1cIk11bnRlbGUgQsSDaciZb3JpaSwgQ2x1aiwgUm9tYW5pYVwiIGNsYXNzPVwib2F4X3dpZHRoX2Z1bGxcIiBkYXRhLWltZ2NvdW50PVwiM1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiaW1nW2RhdGEtaW1nY291bnQ9XCIzXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZHVwbGljYXRlLWltZy1sYWJlbCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1pbm9yIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGRvZXMgbm90IGR1cGxpY2F0ZSBleGlzdGluZyB0ZXh0IGluIDxpbWc+IGFsdCB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHdpZHRoPVwiMTA4MFwiIGhlaWdodD1cIjQxMFwiIHNyYz1cImh0dHBzOi8vaW1nMy5vYXN0YXRpYy5jb20vaW1nMi81NTEyNDIzOS8xMDgweDQxMHIvdmFyaWFudC5qcGdcIiBzcmNzZXQ9XCJodHRwczovL2ltZzMub2FzdGF0aWMuY29tL2ltZzIvNTUxMjQyMzkvMTA4MHg0MTByL3ZhcmlhbnQuanBnIDEwODB3LGh0dHBzOi8vaW1nMy5vYXN0YXRpYy5jb20vaW1nMi81NTEyNDIzOS8xMjUweDQ3NXIvdmFyaWFudC5qcGcgMTI1MHcsaHR0cHM6Ly9pbWczLm9hc3RhdGljLmNvbS9pbWcyLzU1MTI0MjM5LzIxNjB4ODIxci92YXJpYW50LmpwZyAyMTYwdyxodHRwczovL2ltZzMub2FzdGF0aWMuY29tL2ltZzIvNTUxMjQyMzkvMjUwMHg5NTByL3ZhcmlhbnQuanBnIDI1MDB3XCIgYWx0PVwiUMSDZHVyZSBsw6JuZ8SDIE1lZGlhyJlcIiBzaXplcz1cIjEwMHZ3XCIgY2xhc3M9XCJvYXhfd2lkdGhfZnVsbFwiIGRhdGEtb2F4X2ltZ19sb2FkPVwiZG9uZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiaW1nW2FsdD1cIlDEg2R1cmUgbMOibmfEgyBNZWRpYciZXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZHVwbGljYXRlLWltZy1sYWJlbCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1pbm9yIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGRvZXMgbm90IGR1cGxpY2F0ZSBleGlzdGluZyB0ZXh0IGluIDxpbWc+IGFsdCB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHNyYz1cImh0dHBzOi8vaW1nMS5vYXN0YXRpYy5jb20vaW1nMi84NzU5ODY4Mi80MjB4MjM3ci92YXJpYW50LmpwZ1wiIGFsdD1cIkNhYmFuxIMgbW9udGFuxIMsIHRvYW1uYVwiIHdpZHRoPVwiNDIwXCIgaGVpZ2h0PVwiMjM3XCIgZGF0YS1vYXhfaW1nX2xvYWQ9XCJkb25lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJpbWdbYWx0PVwiQ2FiYW7EgyBtb250YW7EgywgdG9hbW5hXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZHVwbGljYXRlLWltZy1sYWJlbCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1pbm9yIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGRvZXMgbm90IGR1cGxpY2F0ZSBleGlzdGluZyB0ZXh0IGluIDxpbWc+IGFsdCB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHNyYz1cImh0dHBzOi8vaW1nMS5vYXN0YXRpYy5jb20vaW1nMi8zNTg1MzUxMi80MjB4MjM3ci92YXJpYW50LmpwZ1wiIGFsdD1cIk3Eg27Eg3N0aXJlYSBTdWNldmnFo2FcIiB3aWR0aD1cIjQyMFwiIGhlaWdodD1cIjIzN1wiIGRhdGEtb2F4X2ltZ19sb2FkPVwiZG9uZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiaW1nW2FsdD1cIk3Eg27Eg3N0aXJlYSBTdWNldmnFo2FcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogW10sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJkdXBsaWNhdGUtaW1nLWxhYmVsIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibWlub3IiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgZG9lcyBub3QgZHVwbGljYXRlIGV4aXN0aW5nIHRleHQgaW4gPGltZz4gYWx0IHRleHQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbWcgc3JjPVwiaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzUzMjMxNTMzLzQyMHgyMzdyL3ZhcmlhbnQuanBnXCIgYWx0PVwiUGVpc2FqIGRpbiBNdW7Im2lpIFJldGV6YXRcIiB3aWR0aD1cIjQyMFwiIGhlaWdodD1cIjIzN1wiIGRhdGEtb2F4X2ltZ19sb2FkPVwiZG9uZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiaW1nW2FsdD1cIlBlaXNhaiBkaW4gTXVuyJtpaSBSZXRlemF0XCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZHVwbGljYXRlLWltZy1sYWJlbCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1pbm9yIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGRvZXMgbm90IGR1cGxpY2F0ZSBleGlzdGluZyB0ZXh0IGluIDxpbWc+IGFsdCB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHNyYz1cImh0dHBzOi8vcmVzMS5vYXN0YXRpYy5jb20vaWNvbnMvb2Evc2tpUmVzb3J0L2JsdWVfdmlvbGV0L3NraVJlc29ydC5zcXVhcmVfdmVjdG9yLnN2Z1wiIGNsYXNzPVwib2F4X2ltYWdlX3NuaXBwZXRfY2F0ZWdvcnlfaWNvblwiIGFsdD1cIlwiIGRhdGEtb2F4X2ltZ19sb2FkPVwiZG9uZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC0zNDQyMDQxMiA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiBvdXRwdXRbZGF0YS1vYXhfbGF6eV9sb2FkPVwiZG9uZVwiXTpudGgtY2hpbGQoMSkgPiAub2F4X2ltYWdlX3NuaXBwZXRfY2F0ZWdvcnlfaWNvblthbHQ9XCJcIl1bZGF0YS1vYXhfaW1nX2xvYWQ9XCJkb25lXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZHVwbGljYXRlLWltZy1sYWJlbCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1pbm9yIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGRvZXMgbm90IGR1cGxpY2F0ZSBleGlzdGluZyB0ZXh0IGluIDxpbWc+IGFsdCB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHNyYz1cImh0dHBzOi8vb2FkLm91dGRvb3JhY3RpdmUuY29tL2FwaS9zdGF0aWNtYXA/aT0zNDQyMDQxMiZhbXA7c2l6ZT1sb2NhdG9yJmFtcDtwcm9qZWN0PW9hZC1yb21hbmlhdHJhdmVsXCIgYWx0PVwiSGFydMSDIC8gU3RhyJtpdW5lYSDImWkgUMOicnRpYSBTZW1lbmljXCIgd2lkdGg9XCI0MDBcIiBoZWlnaHQ9XCIyMjVcIiBkYXRhLW9heF9pbWdfbG9hZD1cImRvbmVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtMzQ0MjA0MTIgPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gLm9heF9zbmlwcGV0X2xvY2F0b3Iub2F4X2ltYWdlX3NuaXBwZXRfbG9jYXRvciA+IG91dHB1dFtkYXRhLW9heF9sYXp5X2xvYWQ9XCJkb25lXCJdID4gaW1nW3dpZHRoPVwiNDAwXCJdW2hlaWdodD1cIjIyNVwiXVtkYXRhLW9heF9pbWdfbG9hZD1cImRvbmVcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogW10sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJkdXBsaWNhdGUtaW1nLWxhYmVsIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibWlub3IiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgZG9lcyBub3QgZHVwbGljYXRlIGV4aXN0aW5nIHRleHQgaW4gPGltZz4gYWx0IHRleHQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbWcgd2lkdGg9XCI0MjBcIiBoZWlnaHQ9XCIyMzdcIiBzcmM9XCJodHRwczovL2ltZy5vYXN0YXRpYy5jb20vaW1nMi8zNDQyMDQ5MC80MjB4MjM3ci92YXJpYW50LmpwZ1wiIHNyY3NldD1cImh0dHBzOi8vaW1nLm9hc3RhdGljLmNvbS9pbWcyLzM0NDIwNDkwLzQyMHgyMzdyL3ZhcmlhbnQuanBnIDQyMHcsaHR0cHM6Ly9pbWcub2FzdGF0aWMuY29tL2ltZzIvMzQ0MjA0OTAvNzI4eDQxMHIvdmFyaWFudC5qcGcgNzI4dyxodHRwczovL2ltZy5vYXN0YXRpYy5jb20vaW1nMi8zNDQyMDQ5MC8xMDgweDYxMHIvdmFyaWFudC5qcGcgMTA4MHdcIiBhbHQ9XCJcIiBzaXplcz1cIihtaW4td2lkdGg6IDgwMHB4KSA2MDBweCwgKG1pbi13aWR0aDogNjQwcHgpIDUwdncsIDEwMHZ3XCIgZGF0YS1vYXhfaW1nX2xvYWQ9XCJkb25lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM0NDIwNDEyID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IG91dHB1dFtkYXRhLW9heF9sYXp5X2xvYWQ9XCJkb25lXCJdOm50aC1jaGlsZCgzKSA+IGltZ1thbHQ9XCJcIl1bd2lkdGg9XCI0MjBcIl1baGVpZ2h0PVwiMjM3XCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZHVwbGljYXRlLWltZy1sYWJlbCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1pbm9yIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGRvZXMgbm90IGR1cGxpY2F0ZSBleGlzdGluZyB0ZXh0IGluIDxpbWc+IGFsdCB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHNyYz1cImh0dHBzOi8vcmVzMS5vYXN0YXRpYy5jb20vaWNvbnMvb2Evc2tpUmVzb3J0L2JsdWVfdmlvbGV0L3NraVJlc29ydC5zcXVhcmVfdmVjdG9yLnN2Z1wiIGNsYXNzPVwib2F4X2ltYWdlX3NuaXBwZXRfY2F0ZWdvcnlfaWNvblwiIGFsdD1cIlwiIGRhdGEtb2F4X2ltZ19sb2FkPVwiZG9uZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC0zNTc0NjIzNyA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiBvdXRwdXRbZGF0YS1vYXhfbGF6eV9sb2FkPVwiZG9uZVwiXTpudGgtY2hpbGQoMSkgPiAub2F4X2ltYWdlX3NuaXBwZXRfY2F0ZWdvcnlfaWNvblthbHQ9XCJcIl1bZGF0YS1vYXhfaW1nX2xvYWQ9XCJkb25lXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZHVwbGljYXRlLWltZy1sYWJlbCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1pbm9yIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGRvZXMgbm90IGR1cGxpY2F0ZSBleGlzdGluZyB0ZXh0IGluIDxpbWc+IGFsdCB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHNyYz1cImh0dHBzOi8vb2FkLm91dGRvb3JhY3RpdmUuY29tL2FwaS9zdGF0aWNtYXA/aT0zNTc0NjIzNyZhbXA7c2l6ZT1sb2NhdG9yJmFtcDtwcm9qZWN0PW9hZC1yb21hbmlhdHJhdmVsXCIgYWx0PVwiSGFydMSDIC8gU3RhyJtpdW5lYSBTdHJhamFcIiB3aWR0aD1cIjQwMFwiIGhlaWdodD1cIjIyNVwiIGRhdGEtb2F4X2ltZ19sb2FkPVwiZG9uZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiaW1nW2FsdD1cIkhhcnTEgyAvIFN0YcibaXVuZWEgU3RyYWphXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZHVwbGljYXRlLWltZy1sYWJlbCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1pbm9yIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGRvZXMgbm90IGR1cGxpY2F0ZSBleGlzdGluZyB0ZXh0IGluIDxpbWc+IGFsdCB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHdpZHRoPVwiNDIwXCIgaGVpZ2h0PVwiMjM3XCIgc3JjPVwiaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzM1NzQ2MzI4LzQyMHgyMzdyL3ZhcmlhbnQuanBnXCIgc3Jjc2V0PVwiaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzM1NzQ2MzI4LzQyMHgyMzdyL3ZhcmlhbnQuanBnIDQyMHcsaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzM1NzQ2MzI4LzcyOHg0MTByL3ZhcmlhbnQuanBnIDcyOHcsaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzM1NzQ2MzI4LzEwODB4NjEwci92YXJpYW50LmpwZyAxMDgwd1wiIGFsdD1cIlwiIHNpemVzPVwiKG1pbi13aWR0aDogODAwcHgpIDYwMHB4LCAobWluLXdpZHRoOiA2NDBweCkgNTB2dywgMTAwdndcIiBkYXRhLW9heF9pbWdfbG9hZD1cImRvbmVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtMzU3NDYyMzcgPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gb3V0cHV0W2RhdGEtb2F4X2xhenlfbG9hZD1cImRvbmVcIl06bnRoLWNoaWxkKDMpID4gaW1nW2FsdD1cIlwiXVt3aWR0aD1cIjQyMFwiXVtoZWlnaHQ9XCIyMzdcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogW10sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJkdXBsaWNhdGUtaW1nLWxhYmVsIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibWlub3IiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgZG9lcyBub3QgZHVwbGljYXRlIGV4aXN0aW5nIHRleHQgaW4gPGltZz4gYWx0IHRleHQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbWcgY2xhc3M9XCJcIiBzcmM9XCJodHRwczovL3JlczIub2FzdGF0aWMuY29tL3YzL2FwcFN0b3JlX2J1dHRvbkAyeC5wbmc/NmMzNmFjZTFcIiBoZWlnaHQ9XCI0NHB4XCIgYWx0PVwiQXBwIFN0b3JlXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJpbWdbYWx0PVwiQXBwIFN0b3JlXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZHVwbGljYXRlLWltZy1sYWJlbCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1pbm9yIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGRvZXMgbm90IGR1cGxpY2F0ZSBleGlzdGluZyB0ZXh0IGluIDxpbWc+IGFsdCB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIGNsYXNzPVwiXCIgc3JjPVwiaHR0cHM6Ly9yZXMub2FzdGF0aWMuY29tL3YzL2dvb2dsZVBsYXlfYnV0dG9uQDJ4LnBuZz82YzM2YWNlMVwiIGhlaWdodD1cIjQ0cHhcIiBhbHQ9XCJHb29nbGUgUGxheSBTdG9yZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiaW1nW2FsdD1cIkdvb2dsZSBQbGF5IFN0b3JlXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZHVwbGljYXRlLWltZy1sYWJlbCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1pbm9yIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGRvZXMgbm90IGR1cGxpY2F0ZSBleGlzdGluZyB0ZXh0IGluIDxpbWc+IGFsdCB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHNyYz1cImh0dHBzOi8vcmVzLm9hc3RhdGljLmNvbS90aGVtZXMvb2FkLXJvbWFuaWF0cmF2ZWwvY3NzL2ltYWdlcy9FVS1STy1sb2dvLnBuZ1wiIHN0eWxlPVwicG9zaXRpb246IGFic29sdXRlOyB3aWR0aDogMzUlOyBsZWZ0OiAzMnB4OyBib3R0b206IDM3cHg7XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X3BvcnRhbF93cmFwcGVyID4gaW1nIgogICAgICAgICAgXQogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImlucHV0LWJ1dHRvbi1uYW1lIiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQubmFtZS1yb2xlLXZhbHVlIiwKICAgICAgICAid2NhZzJhIiwKICAgICAgICAid2NhZzQxMiIsCiAgICAgICAgInNlY3Rpb241MDgiLAogICAgICAgICJzZWN0aW9uNTA4LjIyLmEiLAogICAgICAgICJUVHY1IiwKICAgICAgICAiVFQ1LmMiLAogICAgICAgICJFTi0zMDEtNTQ5IiwKICAgICAgICAiRU4tOS40LjEuMiIsCiAgICAgICAgIkFDVCIKICAgICAgXSwKICAgICAgImRlc2NyaXB0aW9uIjogIkVuc3VyZXMgaW5wdXQgYnV0dG9ucyBoYXZlIGRpc2Nlcm5pYmxlIHRleHQiLAogICAgICAiaGVscCI6ICJJbnB1dCBidXR0b25zIG11c3QgaGF2ZSBkaXNjZXJuaWJsZSB0ZXh0IiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80LjgvaW5wdXQtYnV0dG9uLW5hbWU/YXBwbGljYXRpb249cGxheXdyaWdodCIsCiAgICAgICJub2RlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogIm5vbi1lbXB0eS12YWx1ZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBhIG5vbi1lbXB0eSB2YWx1ZSBhdHRyaWJ1dGUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYXJpYS1sYWJlbCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJhcmlhLWxhYmVsIGF0dHJpYnV0ZSBleGlzdHMgYW5kIGlzIG5vdCBlbXB0eSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbnB1dCB0YWJpbmRleD1cIi0xXCIgdHlwZT1cInN1Ym1pdFwiIGFyaWEtbGFiZWw9XCJQb3JuZciZdGUgY8SDdXRhcmVhXCIgY2xhc3M9XCJvYXhfaWNvbl9mb250IG9heF9mb250X2xhcmdlMjhcIiB2YWx1ZT1cIvCflI1cIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfaWNvbl9mb250IgogICAgICAgICAgXQogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImxhYmVsLXRpdGxlLW9ubHkiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5mb3JtcyIsCiAgICAgICAgImJlc3QtcHJhY3RpY2UiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIHRoYXQgZXZlcnkgZm9ybSBlbGVtZW50IGhhcyBhIHZpc2libGUgbGFiZWwgYW5kIGlzIG5vdCBzb2xlbHkgbGFiZWxlZCB1c2luZyBoaWRkZW4gbGFiZWxzLCBvciB0aGUgdGl0bGUgb3IgYXJpYS1kZXNjcmliZWRieSBhdHRyaWJ1dGVzIiwKICAgICAgImhlbHAiOiAiRm9ybSBlbGVtZW50cyBzaG91bGQgaGF2ZSBhIHZpc2libGUgbGFiZWwiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9sYWJlbC10aXRsZS1vbmx5P2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAidGl0bGUtb25seSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkZvcm0gZWxlbWVudCBkb2VzIG5vdCBzb2xlbHkgdXNlIHRpdGxlIGF0dHJpYnV0ZSBmb3IgaXRzIGxhYmVsIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW5wdXQgdGFiaW5kZXg9XCItMVwiIGlkPVwic2VhcmNoRmllbGRcIiB0eXBlPVwidGV4dFwiIGNsYXNzPVwib2F4X3NlYXJjaGZvcm1fdGV4dCBvYXgtc2VhcmNoZm9ybS10ZXh0XCIgbmFtZT1cInFcIiB2YWx1ZT1cIlwiIHBsYWNlaG9sZGVyPVwiQ8SDdXRhcmVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNzZWFyY2hGaWVsZCIKICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJsYWJlbCIsCiAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0LmZvcm1zIiwKICAgICAgICAid2NhZzJhIiwKICAgICAgICAid2NhZzQxMiIsCiAgICAgICAgInNlY3Rpb241MDgiLAogICAgICAgICJzZWN0aW9uNTA4LjIyLm4iLAogICAgICAgICJUVHY1IiwKICAgICAgICAiVFQ1LmMiLAogICAgICAgICJFTi0zMDEtNTQ5IiwKICAgICAgICAiRU4tOS40LjEuMiIsCiAgICAgICAgIkFDVCIKICAgICAgXSwKICAgICAgImRlc2NyaXB0aW9uIjogIkVuc3VyZXMgZXZlcnkgZm9ybSBlbGVtZW50IGhhcyBhIGxhYmVsIiwKICAgICAgImhlbHAiOiAiRm9ybSBlbGVtZW50cyBtdXN0IGhhdmUgbGFiZWxzIiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80LjgvbGFiZWw/YXBwbGljYXRpb249cGxheXdyaWdodCIsCiAgICAgICJub2RlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImV4cGxpY2l0LWxhYmVsIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImh0bWwiOiAiPGxhYmVsIGNsYXNzPVwib2F4X3Zpc3VhbGx5X2hpZGRlblwiIGZvcj1cInNlYXJjaEZpZWxkXCI+Q8SDdXRhcmU8L2xhYmVsPiIsCiAgICAgICAgICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICAgICAgICAgImxhYmVsIgogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJGb3JtIGVsZW1lbnQgaGFzIGFuIGV4cGxpY2l0IDxsYWJlbD4iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibm9uLWVtcHR5LXBsYWNlaG9sZGVyIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIGEgcGxhY2Vob2xkZXIgYXR0cmlidXRlIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaGlkZGVuLWV4cGxpY2l0LWxhYmVsIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkZvcm0gZWxlbWVudCBoYXMgYSB2aXNpYmxlIGV4cGxpY2l0IDxsYWJlbD4iCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbnB1dCB0YWJpbmRleD1cIi0xXCIgaWQ9XCJzZWFyY2hGaWVsZFwiIHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJvYXhfc2VhcmNoZm9ybV90ZXh0IG9heC1zZWFyY2hmb3JtLXRleHRcIiBuYW1lPVwicVwiIHZhbHVlPVwiXCIgcGxhY2Vob2xkZXI9XCJDxIN1dGFyZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI3NlYXJjaEZpZWxkIgogICAgICAgICAgXQogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImxhbmRtYXJrLWJhbm5lci1pcy10b3AtbGV2ZWwiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5zZW1hbnRpY3MiLAogICAgICAgICJiZXN0LXByYWN0aWNlIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyB0aGUgYmFubmVyIGxhbmRtYXJrIGlzIGF0IHRvcCBsZXZlbCIsCiAgICAgICJoZWxwIjogIkJhbm5lciBsYW5kbWFyayBzaG91bGQgbm90IGJlIGNvbnRhaW5lZCBpbiBhbm90aGVyIGxhbmRtYXJrIiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80LjgvbGFuZG1hcmstYmFubmVyLWlzLXRvcC1sZXZlbD9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibGFuZG1hcmstaXMtdG9wLWxldmVsIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJyb2xlIjogImJhbm5lciIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJUaGUgYmFubmVyIGxhbmRtYXJrIGlzIGF0IHRoZSB0b3AgbGV2ZWwuIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGhlYWRlcj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImhlYWRlciIKICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJsYW5kbWFyay1jb250ZW50aW5mby1pcy10b3AtbGV2ZWwiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5zZW1hbnRpY3MiLAogICAgICAgICJiZXN0LXByYWN0aWNlIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyB0aGUgY29udGVudGluZm8gbGFuZG1hcmsgaXMgYXQgdG9wIGxldmVsIiwKICAgICAgImhlbHAiOiAiQ29udGVudGluZm8gbGFuZG1hcmsgc2hvdWxkIG5vdCBiZSBjb250YWluZWQgaW4gYW5vdGhlciBsYW5kbWFyayIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L2xhbmRtYXJrLWNvbnRlbnRpbmZvLWlzLXRvcC1sZXZlbD9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibGFuZG1hcmstaXMtdG9wLWxldmVsIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJyb2xlIjogImNvbnRlbnRpbmZvIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIlRoZSBjb250ZW50aW5mbyBsYW5kbWFyayBpcyBhdCB0aGUgdG9wIGxldmVsLiIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxmb290ZXIgY2xhc3M9XCJvYXhfbWFyZ19ib3R0b21fNjZcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImZvb3RlciIKICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJsYW5kbWFyay1tYWluLWlzLXRvcC1sZXZlbCIsCiAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0LnNlbWFudGljcyIsCiAgICAgICAgImJlc3QtcHJhY3RpY2UiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIHRoZSBtYWluIGxhbmRtYXJrIGlzIGF0IHRvcCBsZXZlbCIsCiAgICAgICJoZWxwIjogIk1haW4gbGFuZG1hcmsgc2hvdWxkIG5vdCBiZSBjb250YWluZWQgaW4gYW5vdGhlciBsYW5kbWFyayIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L2xhbmRtYXJrLW1haW4taXMtdG9wLWxldmVsP2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJsYW5kbWFyay1pcy10b3AtbGV2ZWwiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgInJvbGUiOiAibWFpbiIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJUaGUgbWFpbiBsYW5kbWFyayBpcyBhdCB0aGUgdG9wIGxldmVsLiIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxtYWluIGlkPVwibWFpbkNvbnRlbnRcIiBjbGFzcz1cIm9heC10b3AtY29udFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI21haW5Db250ZW50IgogICAgICAgICAgXQogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImxhbmRtYXJrLW5vLWR1cGxpY2F0ZS1iYW5uZXIiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5zZW1hbnRpY3MiLAogICAgICAgICJiZXN0LXByYWN0aWNlIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyB0aGUgZG9jdW1lbnQgaGFzIGF0IG1vc3Qgb25lIGJhbm5lciBsYW5kbWFyayIsCiAgICAgICJoZWxwIjogIkRvY3VtZW50IHNob3VsZCBub3QgaGF2ZSBtb3JlIHRoYW4gb25lIGJhbm5lciBsYW5kbWFyayIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L2xhbmRtYXJrLW5vLWR1cGxpY2F0ZS1iYW5uZXI/YXBwbGljYXRpb249cGxheXdyaWdodCIsCiAgICAgICJub2RlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInBhZ2Utbm8tZHVwbGljYXRlLWJhbm5lciIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJEb2N1bWVudCBkb2VzIG5vdCBoYXZlIG1vcmUgdGhhbiBvbmUgYmFubmVyIGxhbmRtYXJrIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGhlYWRlcj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImhlYWRlciIKICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJsYW5kbWFyay1uby1kdXBsaWNhdGUtY29udGVudGluZm8iLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5zZW1hbnRpY3MiLAogICAgICAgICJiZXN0LXByYWN0aWNlIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyB0aGUgZG9jdW1lbnQgaGFzIGF0IG1vc3Qgb25lIGNvbnRlbnRpbmZvIGxhbmRtYXJrIiwKICAgICAgImhlbHAiOiAiRG9jdW1lbnQgc2hvdWxkIG5vdCBoYXZlIG1vcmUgdGhhbiBvbmUgY29udGVudGluZm8gbGFuZG1hcmsiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9sYW5kbWFyay1uby1kdXBsaWNhdGUtY29udGVudGluZm8/YXBwbGljYXRpb249cGxheXdyaWdodCIsCiAgICAgICJub2RlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInBhZ2Utbm8tZHVwbGljYXRlLWNvbnRlbnRpbmZvIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkRvY3VtZW50IGRvZXMgbm90IGhhdmUgbW9yZSB0aGFuIG9uZSBjb250ZW50aW5mbyBsYW5kbWFyayIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxmb290ZXIgY2xhc3M9XCJvYXhfbWFyZ19ib3R0b21fNjZcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImZvb3RlciIKICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJsYW5kbWFyay1uby1kdXBsaWNhdGUtbWFpbiIsCiAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0LnNlbWFudGljcyIsCiAgICAgICAgImJlc3QtcHJhY3RpY2UiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIHRoZSBkb2N1bWVudCBoYXMgYXQgbW9zdCBvbmUgbWFpbiBsYW5kbWFyayIsCiAgICAgICJoZWxwIjogIkRvY3VtZW50IHNob3VsZCBub3QgaGF2ZSBtb3JlIHRoYW4gb25lIG1haW4gbGFuZG1hcmsiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9sYW5kbWFyay1uby1kdXBsaWNhdGUtbWFpbj9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicGFnZS1uby1kdXBsaWNhdGUtbWFpbiIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJEb2N1bWVudCBkb2VzIG5vdCBoYXZlIG1vcmUgdGhhbiBvbmUgbWFpbiBsYW5kbWFyayIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxtYWluIGlkPVwibWFpbkNvbnRlbnRcIiBjbGFzcz1cIm9heC10b3AtY29udFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI21haW5Db250ZW50IgogICAgICAgICAgXQogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImxhbmRtYXJrLW9uZS1tYWluIiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQuc2VtYW50aWNzIiwKICAgICAgICAiYmVzdC1wcmFjdGljZSIKICAgICAgXSwKICAgICAgImRlc2NyaXB0aW9uIjogIkVuc3VyZXMgdGhlIGRvY3VtZW50IGhhcyBhIG1haW4gbGFuZG1hcmsiLAogICAgICAiaGVscCI6ICJEb2N1bWVudCBzaG91bGQgaGF2ZSBvbmUgbWFpbiBsYW5kbWFyayIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L2xhbmRtYXJrLW9uZS1tYWluP2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJwYWdlLWhhcy1tYWluIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImh0bWwiOiAiPG1haW4gaWQ9XCJtYWluQ29udGVudFwiIGNsYXNzPVwib2F4LXRvcC1jb250XCI+IiwKICAgICAgICAgICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgICAgICAgICAiI21haW5Db250ZW50IgogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJEb2N1bWVudCBoYXMgYXQgbGVhc3Qgb25lIG1haW4gbGFuZG1hcmsiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aHRtbCBsYW5nPVwicm9cIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImh0bWwiCiAgICAgICAgICBdCiAgICAgICAgfQogICAgICBdCiAgICB9LAogICAgewogICAgICAiaWQiOiAibGFuZG1hcmstdW5pcXVlIiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQuc2VtYW50aWNzIiwKICAgICAgICAiYmVzdC1wcmFjdGljZSIKICAgICAgXSwKICAgICAgImhlbHAiOiAiRW5zdXJlcyBsYW5kbWFya3MgYXJlIHVuaXF1ZSIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJMYW5kbWFya3Mgc2hvdWxkIGhhdmUgYSB1bmlxdWUgcm9sZSBvciByb2xlL2xhYmVsL3RpdGxlIChpLmUuIGFjY2Vzc2libGUgbmFtZSkgY29tYmluYXRpb24iLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9sYW5kbWFyay11bmlxdWU/YXBwbGljYXRpb249cGxheXdyaWdodCIsCiAgICAgICJub2RlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImxhbmRtYXJrLWlzLXVuaXF1ZSIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAicm9sZSI6ICJuYXZpZ2F0aW9uIiwKICAgICAgICAgICAgICAgICJhY2Nlc3NpYmxlVGV4dCI6IG51bGwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJMYW5kbWFya3MgbXVzdCBoYXZlIGEgdW5pcXVlIHJvbGUgb3Igcm9sZS9sYWJlbC90aXRsZSAoaS5lLiBhY2Nlc3NpYmxlIG5hbWUpIGNvbWJpbmF0aW9uIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPG5hdj5cblx0PGEgaHJlZj1cIiNtYWluQ29udGVudFwiIGNsYXNzPVwib2F4X3NraXBMaW5rIG9heF92aXN1YWxseV9oaWRkZW5cIj5TYXJpIGxhIGNvbsibaW51dFxuPC9hPlxuPC9uYXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJuYXYiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImxhbmRtYXJrLWlzLXVuaXF1ZSIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAicm9sZSI6ICJiYW5uZXIiLAogICAgICAgICAgICAgICAgImFjY2Vzc2libGVUZXh0IjogbnVsbAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkxhbmRtYXJrcyBtdXN0IGhhdmUgYSB1bmlxdWUgcm9sZSBvciByb2xlL2xhYmVsL3RpdGxlIChpLmUuIGFjY2Vzc2libGUgbmFtZSkgY29tYmluYXRpb24iCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aGVhZGVyPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiaGVhZGVyIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJsYW5kbWFyay1pcy11bmlxdWUiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgInJvbGUiOiAibWFpbiIsCiAgICAgICAgICAgICAgICAiYWNjZXNzaWJsZVRleHQiOiBudWxsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiTGFuZG1hcmtzIG11c3QgaGF2ZSBhIHVuaXF1ZSByb2xlIG9yIHJvbGUvbGFiZWwvdGl0bGUgKGkuZS4gYWNjZXNzaWJsZSBuYW1lKSBjb21iaW5hdGlvbiIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxtYWluIGlkPVwibWFpbkNvbnRlbnRcIiBjbGFzcz1cIm9heC10b3AtY29udFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI21haW5Db250ZW50IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJsYW5kbWFyay1pcy11bmlxdWUiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgInJvbGUiOiAiY29udGVudGluZm8iLAogICAgICAgICAgICAgICAgImFjY2Vzc2libGVUZXh0IjogbnVsbAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkxhbmRtYXJrcyBtdXN0IGhhdmUgYSB1bmlxdWUgcm9sZSBvciByb2xlL2xhYmVsL3RpdGxlIChpLmUuIGFjY2Vzc2libGUgbmFtZSkgY29tYmluYXRpb24iCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8Zm9vdGVyIGNsYXNzPVwib2F4X21hcmdfYm90dG9tXzY2XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJmb290ZXIiCiAgICAgICAgICBdCiAgICAgICAgfQogICAgICBdCiAgICB9LAogICAgewogICAgICAiaWQiOiAibGluay1uYW1lIiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQubmFtZS1yb2xlLXZhbHVlIiwKICAgICAgICAid2NhZzJhIiwKICAgICAgICAid2NhZzI0NCIsCiAgICAgICAgIndjYWc0MTIiLAogICAgICAgICJzZWN0aW9uNTA4IiwKICAgICAgICAic2VjdGlvbjUwOC4yMi5hIiwKICAgICAgICAiVFR2NSIsCiAgICAgICAgIlRUNi5hIiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuMi40LjQiLAogICAgICAgICJFTi05LjQuMS4yIiwKICAgICAgICAiQUNUIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyBsaW5rcyBoYXZlIGRpc2Nlcm5pYmxlIHRleHQiLAogICAgICAiaGVscCI6ICJMaW5rcyBtdXN0IGhhdmUgZGlzY2VybmlibGUgdGV4dCIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L2xpbmstbmFtZT9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaGFzLXZpc2libGUtdGV4dCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHRleHQgdGhhdCBpcyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZm9jdXNhYmxlLW5vLW5hbWUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGlzIG5vdCBpbiB0YWIgb3JkZXIgb3IgaGFzIGFjY2Vzc2libGUgdGV4dCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cIiNtYWluQ29udGVudFwiIGNsYXNzPVwib2F4X3NraXBMaW5rIG9heF92aXN1YWxseV9oaWRkZW5cIj5TYXJpIGxhIGNvbsibaW51dFxuPC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9za2lwTGluayIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaGFzLXZpc2libGUtdGV4dCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHRleHQgdGhhdCBpcyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogIm5vbi1lbXB0eS10aXRsZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIGEgdGl0bGUgYXR0cmlidXRlIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZm9jdXNhYmxlLW5vLW5hbWUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGlzIG5vdCBpbiB0YWIgb3JkZXIgb3IgaGFzIGFjY2Vzc2libGUgdGV4dCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9cIiB0aXRsZT1cImPEg3RyZSBwYWdpbmEgZGUgc3RhcnRcIj5cblx0XHRcdFx0XHRcdFx0XHQ8aW1nIHNyYz1cImh0dHBzOi8vcmVzLm9hc3RhdGljLmNvbS90aGVtZXMvb2FkLXJvbWFuaWF0cmF2ZWwvY3NzL2ltYWdlcy9sb2dvX3JvbWFuaWEucG5nP3RzPTE3MDYxNzY1NTc1MzAmYW1wOzZjMzZhY2UxXCIgYWx0PVwiTG9nb3JvbWFuaWF0cmF2ZWwuZ3VpZGVcIj5cblx0XHRcdFx0XHRcdFx0PC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiYVt0aXRsZT1cImPEg3RyZSBwYWdpbmEgZGUgc3RhcnRcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy12aXNpYmxlLXRleHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyB0ZXh0IHRoYXQgaXMgdmlzaWJsZSB0byBzY3JlZW4gcmVhZGVycyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJub24tZW1wdHktdGl0bGUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBhIHRpdGxlIGF0dHJpYnV0ZSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImZvY3VzYWJsZS1uby1uYW1lIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBpcyBub3QgaW4gdGFiIG9yZGVyIG9yIGhhcyBhY2Nlc3NpYmxlIHRleHQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vZ2hpZC1kZS1jYWxhdG9yaWUvcm9tYW5pYS8xMDM2OTkxL1wiIHRpdGxlPVwiR2hpZCB0dXJpc3RpY1wiPkdoaWQgdHVyaXN0aWM8L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2hlYWRlcl9uYXYgPiBsaTpudGgtY2hpbGQoMSkgPiBhW3RpdGxlPVwiR2hpZCB0dXJpc3RpY1wiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaGFzLXZpc2libGUtdGV4dCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHRleHQgdGhhdCBpcyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogIm5vbi1lbXB0eS10aXRsZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIGEgdGl0bGUgYXR0cmlidXRlIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZm9jdXNhYmxlLW5vLW5hbWUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGlzIG5vdCBpbiB0YWIgb3JkZXIgb3IgaGFzIGFjY2Vzc2libGUgdGV4dCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9wb2lzL1wiIHRpdGxlPVwiRGVzdGluYcibaWlcIj5EZXN0aW5hyJtpaTwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImFbdGl0bGU9XCJEZXN0aW5hyJtpaVwiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaGFzLXZpc2libGUtdGV4dCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHRleHQgdGhhdCBpcyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogIm5vbi1lbXB0eS10aXRsZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIGEgdGl0bGUgYXR0cmlidXRlIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZm9jdXNhYmxlLW5vLW5hbWUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGlzIG5vdCBpbiB0YWIgb3JkZXIgb3IgaGFzIGFjY2Vzc2libGUgdGV4dCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby90b3Vycy9cIiB0aXRsZT1cIlRyYXNlZVwiPlRyYXNlZTwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImFbdGl0bGU9XCJUcmFzZWVcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy12aXNpYmxlLXRleHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyB0ZXh0IHRoYXQgaXMgdmlzaWJsZSB0byBzY3JlZW4gcmVhZGVycyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJub24tZW1wdHktdGl0bGUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBhIHRpdGxlIGF0dHJpYnV0ZSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImZvY3VzYWJsZS1uby1uYW1lIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBpcyBub3QgaW4gdGFiIG9yZGVyIG9yIGhhcyBhY2Nlc3NpYmxlIHRleHQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vc291cmNlL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvMzM2ODA4MTYvXCIgdGl0bGU9XCJEZXNwcmUgbm9pXCI+RGVzcHJlIG5vaTwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImFbdGl0bGU9XCJEZXNwcmUgbm9pXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtdmlzaWJsZS10ZXh0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgdGV4dCB0aGF0IGlzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJmb2N1c2FibGUtbm8tbmFtZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgbm90IGluIHRhYiBvcmRlciBvciBoYXMgYWNjZXNzaWJsZSB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL2NvbW11bml0eS9zaWduLWluLmh0bWxcIiBjbGFzcz1cIm9heC1sb2dpbi1jb25uZWN0b3ItbGluayBvYXhfYnRuIG9heF9idG5fbGFyZ2Ugb2F4X2J0bl9jdXN0b20gb2F4X2hlYWRlcl9idXR0b24gb2F4X21hcmdfdG9wXzJcIj7Djm5yZWdpc3RyZWF6xIMtdGUgc2F1IGF1dGVudGlmaWPEgy10ZTwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtbG9naW4tY29ubmVjdG9yLWxpbmsiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy12aXNpYmxlLXRleHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyB0ZXh0IHRoYXQgaXMgdmlzaWJsZSB0byBzY3JlZW4gcmVhZGVycyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImZvY3VzYWJsZS1uby1uYW1lIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBpcyBub3QgaW4gdGFiIG9yZGVyIG9yIGhhcyBhY2Nlc3NpYmxlIHRleHQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvZW4vXCI+RW5nbGlzaDwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNvYXgtbGFuZy1lbiA+IGEiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy12aXNpYmxlLXRleHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyB0ZXh0IHRoYXQgaXMgdmlzaWJsZSB0byBzY3JlZW4gcmVhZGVycyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImZvY3VzYWJsZS1uby1uYW1lIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBpcyBub3QgaW4gdGFiIG9yZGVyIG9yIGhhcyBhY2Nlc3NpYmxlIHRleHQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvZGUvXCI+RGV1dHNjaDwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNvYXgtbGFuZy1kZSA+IGEiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy12aXNpYmxlLXRleHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyB0ZXh0IHRoYXQgaXMgdmlzaWJsZSB0byBzY3JlZW4gcmVhZGVycyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImZvY3VzYWJsZS1uby1uYW1lIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBpcyBub3QgaW4gdGFiIG9yZGVyIG9yIGhhcyBhY2Nlc3NpYmxlIHRleHQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGNsYXNzPVwib2F4X3VuZGVybGluZSBvYXhfZm9udF9ncmV5X2RhcmtcIiBocmVmPVwiaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LzQuMC9kZWVkLmVuXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9mb2xsb3cgbm9vcGVuZXJcIj5DQyBCWTwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtY2xhaW0tMjU5NDM0MDMgPiAub2F4LW9uZS1pbWFnZS1hdXRob3Iub2F4X2ZyLm9heF9oYWxmID4gLm9heF91bmRlcmxpbmUub2F4X2ZvbnRfZ3JleV9kYXJrW3JlbD1cIm5vZm9sbG93IG5vb3BlbmVyXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtdmlzaWJsZS10ZXh0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgdGV4dCB0aGF0IGlzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJmb2N1c2FibGUtbm8tbmFtZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgbm90IGluIHRhYiBvcmRlciBvciBoYXMgYWNjZXNzaWJsZSB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBjbGFzcz1cIm9heF91bmRlcmxpbmUgb2F4X2ZvbnRfZ3JleV9kYXJrXCIgaHJlZj1cImh0dHBzOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS80LjAvZGVlZC5lblwiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vZm9sbG93IG5vb3BlbmVyXCI+Q0MgQlk8L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWNsYWltLTY0NTc5OTI5ID4gLm9heC1vbmUtaW1hZ2UtYXV0aG9yLm9heF9mci5vYXhfaGFsZiA+IC5vYXhfdW5kZXJsaW5lLm9heF9mb250X2dyZXlfZGFya1tyZWw9XCJub2ZvbGxvdyBub29wZW5lclwiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaGFzLXZpc2libGUtdGV4dCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHRleHQgdGhhdCBpcyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZm9jdXNhYmxlLW5vLW5hbWUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGlzIG5vdCBpbiB0YWIgb3JkZXIgb3IgaGFzIGFjY2Vzc2libGUgdGV4dCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgY2xhc3M9XCJvYXhfdW5kZXJsaW5lIG9heF9mb250X2dyZXlfZGFya1wiIGhyZWY9XCJodHRwczovL2NyZWF0aXZlY29tbW9ucy5vcmcvcHVibGljZG9tYWluL3plcm8vMS4wL2RlZWQuZW5cIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub2ZvbGxvdyBub29wZW5lclwiPkNDMDwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtY2xhaW0tMzU5MjkxNjggPiAub2F4LW9uZS1pbWFnZS1hdXRob3Iub2F4X2ZyLm9heF9oYWxmID4gLm9heF91bmRlcmxpbmUub2F4X2ZvbnRfZ3JleV9kYXJrW3JlbD1cIm5vZm9sbG93IG5vb3BlbmVyXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtdmlzaWJsZS10ZXh0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgdGV4dCB0aGF0IGlzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJmb2N1c2FibGUtbm8tbmFtZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgbm90IGluIHRhYiBvcmRlciBvciBoYXMgYWNjZXNzaWJsZSB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBjbGFzcz1cIm9heF91bmRlcmxpbmUgb2F4X2ZvbnRfZ3JleV9kYXJrXCIgaHJlZj1cImh0dHBzOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS1uZC80LjAvZGVlZC5lblwiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vZm9sbG93IG5vb3BlbmVyXCI+Q0MgQlktTkQ8L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWNsYWltLTU1MTI0MjM5ID4gLm9heC1vbmUtaW1hZ2UtYXV0aG9yLm9heF9mci5vYXhfaGFsZiA+IC5vYXhfdW5kZXJsaW5lLm9heF9mb250X2dyZXlfZGFya1tyZWw9XCJub2ZvbGxvdyBub29wZW5lclwiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaGFzLXZpc2libGUtdGV4dCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHRleHQgdGhhdCBpcyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZm9jdXNhYmxlLW5vLW5hbWUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGlzIG5vdCBpbiB0YWIgb3JkZXIgb3IgaGFzIGFjY2Vzc2libGUgdGV4dCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9naGlkLWRlLWNhbGF0b3JpZS9yb21hbmlhLzEwMzY5OTEvXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X21hcmdfYm90dG9tXzQ0Om50aC1jaGlsZCgxKSA+IGEiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy12aXNpYmxlLXRleHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyB0ZXh0IHRoYXQgaXMgdmlzaWJsZSB0byBzY3JlZW4gcmVhZGVycyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImZvY3VzYWJsZS1uby1uYW1lIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBpcyBub3QgaW4gdGFiIG9yZGVyIG9yIGhhcyBhY2Nlc3NpYmxlIHRleHQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vbGlzdC9iaXNlcmljaWxlLWRpbi1ub3JkdWwtbW9sZG92ZWktaW5jbHVzZS1pbi1wYXRyaW1vbml1bC11bmVzY28vMTE4NjkyNjkzL1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9tYXJnX2JvdHRvbV80NDpudGgtY2hpbGQoMikgPiBhIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtdmlzaWJsZS10ZXh0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgdGV4dCB0aGF0IGlzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJmb2N1c2FibGUtbm8tbmFtZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgbm90IGluIHRhYiBvcmRlciBvciBoYXMgYWNjZXNzaWJsZSB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL3AvcHJvZ3JhbXVsLWRlLWFmaWxpZXJlLzYyNjczOTI5L1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9tYXJnX2JvdHRvbV80NDpudGgtY2hpbGQoMykgPiBhIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtdmlzaWJsZS10ZXh0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgdGV4dCB0aGF0IGlzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJmb2N1c2FibGUtbm8tbmFtZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgbm90IGluIHRhYiBvcmRlciBvciBoYXMgYWNjZXNzaWJsZSB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL3NraXJlc29ydC9zdGF0aXVuZWEtc2ktcGFydGlhLXNlbWVuaWMvMzQ0MjA0MTIvXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM0NDIwNDEyID4gYSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaGFzLXZpc2libGUtdGV4dCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHRleHQgdGhhdCBpcyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZm9jdXNhYmxlLW5vLW5hbWUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGlzIG5vdCBpbiB0YWIgb3JkZXIgb3IgaGFzIGFjY2Vzc2libGUgdGV4dCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9za2lyZXNvcnQvc3RhdGl1bmVhLXN0cmFqYS8zNTc0NjIzNy9cIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtMzU3NDYyMzcgPiBhIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtdmlzaWJsZS10ZXh0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgdGV4dCB0aGF0IGlzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJmb2N1c2FibGUtbm8tbmFtZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgbm90IGluIHRhYiBvcmRlciBvciBoYXMgYWNjZXNzaWJsZSB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL3NraXJlc29ydC9kb21lbml1bC1zY2hpYWJpbC1wcmVkZWFsLzQ0NDI1NjU4L1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC00NDQyNTY1OCA+IGEiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy12aXNpYmxlLXRleHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyB0ZXh0IHRoYXQgaXMgdmlzaWJsZSB0byBzY3JlZW4gcmVhZGVycyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImZvY3VzYWJsZS1uby1uYW1lIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBpcyBub3QgaW4gdGFiIG9yZGVyIG9yIGhhcyBhY2Nlc3NpYmxlIHRleHQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vc2tpcmVzb3J0L2NhcmxpYmFiYS80NDQyNTMzOC9cIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNDQ0MjUzMzggPiBhIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtdmlzaWJsZS10ZXh0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgdGV4dCB0aGF0IGlzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJmb2N1c2FibGUtbm8tbmFtZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgbm90IGluIHRhYiBvcmRlciBvciBoYXMgYWNjZXNzaWJsZSB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL29mZmVyL2RydW1ldGllL2RydW1ldGllLWRlLTQtemlsZS1pbi1yZXRlemF0LzgwMzYxMzcwMC9cIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAzNjEzNzAwLm9heF9jb2xfeHNfNi5vYXhfY29sX3NfNCA+IGEiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy12aXNpYmxlLXRleHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyB0ZXh0IHRoYXQgaXMgdmlzaWJsZSB0byBzY3JlZW4gcmVhZGVycyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImZvY3VzYWJsZS1uby1uYW1lIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBpcyBub3QgaW4gdGFiIG9yZGVyIG9yIGhhcyBhY2Nlc3NpYmxlIHRleHQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vb2ZmZXIvbWludGUtY29ycC1zaS1zcGlyaXQvcGljbmljLWxhLWNvbGliZS84MDA0OTc0MTAvXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQxMC5vYXhfY29sX3hzXzYub2F4X2NvbF9zXzQgPiBhIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtdmlzaWJsZS10ZXh0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgdGV4dCB0aGF0IGlzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJmb2N1c2FibGUtbm8tbmFtZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgbm90IGluIHRhYiBvcmRlciBvciBoYXMgYWNjZXNzaWJsZSB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL29mZmVyL29sYXJpdC9hdGVsaWVyLWNlcmFtaWNhLWNvcnVuZC84MDExMzk3MzkvXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMTEzOTczOS5vYXhfY29sX3hzXzYub2F4X2NvbF9zXzQgPiBhIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtdmlzaWJsZS10ZXh0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgdGV4dCB0aGF0IGlzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJmb2N1c2FibGUtbm8tbmFtZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgbm90IGluIHRhYiBvcmRlciBvciBoYXMgYWNjZXNzaWJsZSB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL29mZmVyL21pbnRlLWNvcnAtc2ktc3Bpcml0L2ZvcmFnaW5nLWluLXBhZHVyZS1hbGF0dXJpLWRlLXVuLWJpb2xvZy1jdWxlcy1mbG9yYS1zcG9udGFuYS1zaS1jaXVwZXJjaS84MDA0OTc0NjkvXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQ2OS5vYXhfY29sX3hzXzYub2F4X2NvbF9zXzQgPiBhIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtdmlzaWJsZS10ZXh0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgdGV4dCB0aGF0IGlzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJmb2N1c2FibGUtbm8tbmFtZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgbm90IGluIHRhYiBvcmRlciBvciBoYXMgYWNjZXNzaWJsZSB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL29mZmVyL21pbnRlLWNvcnAtc2ktc3Bpcml0L3RyYW12YWktZXhwcmVzdWwtYnJhbnplaS1kZWd1c3RhcmUtZGUtYnJhbnpldHVyaS1zaS1wcm9kdXNlLWxvY2FsZS1pbi84MDA0OTc0NTkvXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQ1OS5vYXhfY29sX3hzXzYub2F4X2NvbF9zXzQgPiBhIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtdmlzaWJsZS10ZXh0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgdGV4dCB0aGF0IGlzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJmb2N1c2FibGUtbm8tbmFtZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgbm90IGluIHRhYiBvcmRlciBvciBoYXMgYWNjZXNzaWJsZSB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL29mZmVyL21pbnRlLWNvcnAtc2ktc3Bpcml0L3BhY2hldC1waWNuaWMtc2ktYnJ1bmNoLWluLWN1cnRlLXRyYWRpdGlvbmFsYS1wZW50cnUtZ3J1cHVyaS84MDA0OTc0NDgvXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQ0OC5vYXhfY29sX3hzXzYub2F4X2NvbF9zXzQgPiBhIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtdmlzaWJsZS10ZXh0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgdGV4dCB0aGF0IGlzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJmb2N1c2FibGUtbm8tbmFtZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgbm90IGluIHRhYiBvcmRlciBvciBoYXMgYWNjZXNzaWJsZSB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL29mZmVyL21pbnRlLWNvcnAtc2ktc3Bpcml0L2JydW5jaC1wcml2YXQtY3UtcHJvZHVjYXRvcmlpLWxvY2FsaS84MDA0OTc0MjgvXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQyOC5vYXhfY29sX3hzXzYub2F4X2NvbF9zXzQgPiBhIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtdmlzaWJsZS10ZXh0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgdGV4dCB0aGF0IGlzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJmb2N1c2FibGUtbm8tbmFtZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgbm90IGluIHRhYiBvcmRlciBvciBoYXMgYWNjZXNzaWJsZSB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL29mZmVyL21pbnRlLWNvcnAtc2ktc3Bpcml0L2JydW5jaC1wcml2YXQtaW50ci1vLWdvc3BvZGFyaWUtdHJhZGl0aW9uYWxhLWRpbi10YXJhLW9sdHVsdWkvODAwNDk3NDIyL1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDA0OTc0MjIub2F4X2NvbF94c182Lm9heF9jb2xfc180ID4gYSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaGFzLXZpc2libGUtdGV4dCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHRleHQgdGhhdCBpcyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZm9jdXNhYmxlLW5vLW5hbWUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGlzIG5vdCBpbiB0YWIgb3JkZXIgb3IgaGFzIGFjY2Vzc2libGUgdGV4dCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9vZmZlci9taW50ZS1jb3JwLXNpLXNwaXJpdC9kcnVtZXRpZS1jdS1waWNuaWMtc3ByZS1jYWJhbmEtc3VydS84MDA0OTc0MTkvXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQxOS5vYXhfY29sX3hzXzYub2F4X2NvbF9zXzQgPiBhIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtdmlzaWJsZS10ZXh0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgdGV4dCB0aGF0IGlzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJmb2N1c2FibGUtbm8tbmFtZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgbm90IGluIHRhYiBvcmRlciBvciBoYXMgYWNjZXNzaWJsZSB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL29mZmVyL21pbnRlLWNvcnAtc2ktc3Bpcml0L2xpdmFkYS1jaXN0ZXJjaWVuaWxvci00Ni84MDA0OTc0MTUvXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQxNS5vYXhfY29sX3hzXzYub2F4X2NvbF9zXzQgPiBhIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtdmlzaWJsZS10ZXh0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgdGV4dCB0aGF0IGlzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJmb2N1c2FibGUtbm8tbmFtZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgbm90IGluIHRhYiBvcmRlciBvciBoYXMgYWNjZXNzaWJsZSB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSB0YXJnZXQ9XCJfc2VsZlwiIHJlbD1cIlwiIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vdGFyYS9yb21hbmlhLzEwMzY5OTEvXCIgY2xhc3M9XCJvYXhfYnRuIG9heF9idG5fbGFyZ2Ugb2F4X2J0bl93aGl0ZVwiPlNwcmUgZ2hpZDwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfYnRuX3doaXRlIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtdmlzaWJsZS10ZXh0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgdGV4dCB0aGF0IGlzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJmb2N1c2FibGUtbm8tbmFtZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgbm90IGluIHRhYiBvcmRlciBvciBoYXMgYWNjZXNzaWJsZSB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSB0YXJnZXQ9XCJfc2VsZlwiIHJlbD1cIlwiIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vdG91cnBsYW5uZXIvXCIgY2xhc3M9XCJvYXhfYnRuIG9heF9idG5fbGFyZ2Ugb2F4X2J0bl9jdXN0b20gb2F4X2J0bl9taW5XaWR0aF93aWRlXCI+UGxhbmlmaWPEgyBhY3VtIHByaW11bCB0cmFzZXU8L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2J0bl9taW5XaWR0aF93aWRlIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtdmlzaWJsZS10ZXh0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgdGV4dCB0aGF0IGlzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJmb2N1c2FibGUtbm8tbmFtZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgbm90IGluIHRhYiBvcmRlciBvciBoYXMgYWNjZXNzaWJsZSB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL3AvZGVzdGluYXRpaS1kZS1uZXJhdGF0LzU0MjMxMTIzL1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC01NDIzMTEyMy5vYXhfY29sX3hzXzEwLm9heF9jb2xfc182ID4gYSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaGFzLXZpc2libGUtdGV4dCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHRleHQgdGhhdCBpcyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZm9jdXNhYmxlLW5vLW5hbWUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGlzIG5vdCBpbiB0YWIgb3JkZXIgb3IgaGFzIGFjY2Vzc2libGUgdGV4dCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9wL3ZhY2FudGEtaW4tZmFtaWxlLzU0MjMwODkxL1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC01NDIzMDg5MS5vYXhfY29sX3hzXzEwLm9heF9jb2xfc182ID4gYSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaGFzLXZpc2libGUtdGV4dCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHRleHQgdGhhdCBpcyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZm9jdXNhYmxlLW5vLW5hbWUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGlzIG5vdCBpbiB0YWIgb3JkZXIgb3IgaGFzIGFjY2Vzc2libGUgdGV4dCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9wL3BhcmFkaXN1cmktbW91bnRhaW5iaWtlLzU0MjMwOTI3L1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC01NDIzMDkyNy5vYXhfY29sX3hzXzEwLm9heF9jb2xfc182ID4gYSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaGFzLXZpc2libGUtdGV4dCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHRleHQgdGhhdCBpcyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogIm5vbi1lbXB0eS10aXRsZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIGEgdGl0bGUgYXR0cmlidXRlIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZm9jdXNhYmxlLW5vLW5hbWUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGlzIG5vdCBpbiB0YWIgb3JkZXIgb3IgaGFzIGFjY2Vzc2libGUgdGV4dCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby90b3VycGxhbm5lci9cIiB0aXRsZT1cIlBsYW5pZmljYXRvciB0cmFzZWVcIj5QbGFuaWZpY2F0b3IgdHJhc2VlPC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAibGk6bnRoLWNoaWxkKDEpID4gYVt0aXRsZT1cIlBsYW5pZmljYXRvciB0cmFzZWVcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy12aXNpYmxlLXRleHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyB0ZXh0IHRoYXQgaXMgdmlzaWJsZSB0byBzY3JlZW4gcmVhZGVycyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJub24tZW1wdHktdGl0bGUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBhIHRpdGxlIGF0dHJpYnV0ZSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImZvY3VzYWJsZS1uby1uYW1lIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBpcyBub3QgaW4gdGFiIG9yZGVyIG9yIGhhcyBhY2Nlc3NpYmxlIHRleHQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vcC9mYWN0cy1hYm91dC1yb21hbmlhLzM1OTYzNjk0L1wiIHRpdGxlPVwiRmFjdHMgYWJvdXQgUm9tYW5pYVwiPkZhY3RzIGFib3V0IFJvbWFuaWE8L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJsaTpudGgtY2hpbGQoMikgPiBhW3RpdGxlPVwiRmFjdHMgYWJvdXQgUm9tYW5pYVwiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaGFzLXZpc2libGUtdGV4dCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHRleHQgdGhhdCBpcyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogIm5vbi1lbXB0eS10aXRsZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIGEgdGl0bGUgYXR0cmlidXRlIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZm9jdXNhYmxlLW5vLW5hbWUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGlzIG5vdCBpbiB0YWIgb3JkZXIgb3IgaGFzIGFjY2Vzc2libGUgdGV4dCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHA6Ly93d3cuYW5wYy5nb3Yucm9cIiB0aXRsZT1cIkFOUEMgLSBQcm90ZWPIm2lhIENvbnN1bWF0b3JpbG9yXCI+QU5QQyAtIFByb3RlY8ibaWEgQ29uc3VtYXRvcmlsb3I8L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJhW2hyZWYkPVwid3d3LmFucGMuZ292LnJvXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtdmlzaWJsZS10ZXh0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgdGV4dCB0aGF0IGlzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibm9uLWVtcHR5LXRpdGxlIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgYSB0aXRsZSBhdHRyaWJ1dGUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJmb2N1c2FibGUtbm8tbmFtZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgbm90IGluIHRhYiBvcmRlciBvciBoYXMgYWNjZXNzaWJsZSB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL3AvZWNvc2lzdGVtdWwtcm9tYW5pYXRyYXZlbC5ndWlkZS80NjUxNjg5Ni9cIiB0aXRsZT1cIkVjb3Npc3RlbXVsIFR1cmlzdGljXCI+RWNvc2lzdGVtdWwgVHVyaXN0aWM8L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJhW3RpdGxlPVwiRWNvc2lzdGVtdWwgVHVyaXN0aWNcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy12aXNpYmxlLXRleHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyB0ZXh0IHRoYXQgaXMgdmlzaWJsZSB0byBzY3JlZW4gcmVhZGVycyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJub24tZW1wdHktdGl0bGUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBhIHRpdGxlIGF0dHJpYnV0ZSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImZvY3VzYWJsZS1uby1uYW1lIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBpcyBub3QgaW4gdGFiIG9yZGVyIG9yIGhhcyBhY2Nlc3NpYmxlIHRleHQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vcC9tYXJrZXRpbmctb25saW5lLXByaW4tcm9tYW5pYXRyYXZlbC5ndWlkZS80NjQ5NzE1Ny9cIiB0aXRsZT1cIk1hcmtldGluZyBPbmxpbmVcIj5NYXJrZXRpbmcgT25saW5lPC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiYVt0aXRsZT1cIk1hcmtldGluZyBPbmxpbmVcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy12aXNpYmxlLXRleHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyB0ZXh0IHRoYXQgaXMgdmlzaWJsZSB0byBzY3JlZW4gcmVhZGVycyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJub24tZW1wdHktdGl0bGUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBhIHRpdGxlIGF0dHJpYnV0ZSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImZvY3VzYWJsZS1uby1uYW1lIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBpcyBub3QgaW4gdGFiIG9yZGVyIG9yIGhhcyBhY2Nlc3NpYmxlIHRleHQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvZW4vY29udGFjdC5odG1sXCIgdGl0bGU9XCJDb250YWN0XCI+Q29udGFjdDwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImFbdGl0bGU9XCJDb250YWN0XCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtdmlzaWJsZS10ZXh0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgdGV4dCB0aGF0IGlzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibm9uLWVtcHR5LXRpdGxlIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgYSB0aXRsZSBhdHRyaWJ1dGUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJmb2N1c2FibGUtbm8tbmFtZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgbm90IGluIHRhYiBvcmRlciBvciBoYXMgYWNjZXNzaWJsZSB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL3Avcm9tYW5pYXRyYXZlbC5ndWlkZS1zcHJpamluYS1vcmdhbml6YXRpaWxlLXNlYXJjaC1yZXNjdWUvNTIyNTcxNjUvXCIgdGl0bGU9XCJTZWFyY2ggJmFtcDsgUmVzY3VlXCI+U2VhcmNoICZhbXA7IFJlc2N1ZTwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImFbdGl0bGU9XCJTZWFyY2ggJiBSZXNjdWVcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy12aXNpYmxlLXRleHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyB0ZXh0IHRoYXQgaXMgdmlzaWJsZSB0byBzY3JlZW4gcmVhZGVycyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJub24tZW1wdHktdGl0bGUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBhIHRpdGxlIGF0dHJpYnV0ZSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImZvY3VzYWJsZS1uby1uYW1lIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBpcyBub3QgaW4gdGFiIG9yZGVyIG9yIGhhcyBhY2Nlc3NpYmxlIHRleHQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vcC9wYWdpbmktZ2hpZC10dXJpc3RpYy80NjU2MTA4Ny9cIiB0aXRsZT1cIlBhZ2luaSBHaGlkIFR1cmlzdGljXCI+UGFnaW5pIEdoaWQgVHVyaXN0aWM8L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJhW3RpdGxlPVwiUGFnaW5pIEdoaWQgVHVyaXN0aWNcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImFyaWEtbGFiZWwiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJhcmlhLWxhYmVsIGF0dHJpYnV0ZSBleGlzdHMgYW5kIGlzIG5vdCBlbXB0eSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJub24tZW1wdHktdGl0bGUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBhIHRpdGxlIGF0dHJpYnV0ZSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImZvY3VzYWJsZS1uby1uYW1lIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBpcyBub3QgaW4gdGFiIG9yZGVyIG9yIGhhcyBhY2Nlc3NpYmxlIHRleHQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3d3dy5mYWNlYm9vay5jb20vRGlnaXRhbFRyYXZlbEd1aWRlU1JMXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9mb2xsb3cgbm9vcGVuZXJcIiBjbGFzcz1cIm9heC1pY29uLWZhY2Vib29rIG9heF9kZXRhaWxfc29jaWFsX2ZiIG9heF9mb290ZXJfaWNvblwiIHRpdGxlPVwiQ8SDdHJlIHByb2ZpbHVsIEZhY2Vib29rXCIgYXJpYS1sYWJlbD1cImZhY2Vib29rXCI+PC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pY29uLWZhY2Vib29rIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLWxhYmVsIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiYXJpYS1sYWJlbCBhdHRyaWJ1dGUgZXhpc3RzIGFuZCBpcyBub3QgZW1wdHkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibm9uLWVtcHR5LXRpdGxlIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgYSB0aXRsZSBhdHRyaWJ1dGUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJmb2N1c2FibGUtbm8tbmFtZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgbm90IGluIHRhYiBvcmRlciBvciBoYXMgYWNjZXNzaWJsZSB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9lY2hpcGFfcm9tYW5pYXRyYXZlbC5ndWlkZS9cIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub2ZvbGxvdyBub29wZW5lclwiIGNsYXNzPVwib2F4LWljb24taW5zdGFncmFtIG9heF9kZXRhaWxfc29jaWFsX2luc3RhZ3JhbSBvYXhfZm9vdGVyX2ljb25cIiB0aXRsZT1cIkPEg3RyZSBwcm9maWx1bCBJbnN0YWdyYW1cIiBhcmlhLWxhYmVsPVwiaW5zdGFncmFtXCI+PC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pY29uLWluc3RhZ3JhbSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYXJpYS1sYWJlbCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogImFyaWEtbGFiZWwgYXR0cmlidXRlIGV4aXN0cyBhbmQgaXMgbm90IGVtcHR5IgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogIm5vbi1lbXB0eS10aXRsZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIGEgdGl0bGUgYXR0cmlidXRlIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZm9jdXNhYmxlLW5vLW5hbWUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGlzIG5vdCBpbiB0YWIgb3JkZXIgb3IgaGFzIGFjY2Vzc2libGUgdGV4dCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2NoYW5uZWwvVUNDU19HVU9sWXlaeHNDMG5taHkxd0l3XCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9mb2xsb3cgbm9vcGVuZXJcIiBjbGFzcz1cIm9heC1pY29uLXlvdXR1YmUgb2F4X2RldGFpbF9zb2NpYWxfeW91dHViZSBvYXhfZm9vdGVyX2ljb25cIiB0aXRsZT1cIkPEg3RyZSBjYW5hbHVsIFlvdVR1YmVcIiBhcmlhLWxhYmVsPVwieW91dHViZVwiPjwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWNvbi15b3V0dWJlIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLWxhYmVsIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiYXJpYS1sYWJlbCBhdHRyaWJ1dGUgZXhpc3RzIGFuZCBpcyBub3QgZW1wdHkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibm9uLWVtcHR5LXRpdGxlIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgYSB0aXRsZSBhdHRyaWJ1dGUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJmb2N1c2FibGUtbm8tbmFtZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgbm90IGluIHRhYiBvcmRlciBvciBoYXMgYWNjZXNzaWJsZSB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly90d2l0dGVyLmNvbS9Sb21hbmlhVHJhdmVsR1wiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vZm9sbG93IG5vb3BlbmVyXCIgY2xhc3M9XCJvYXgtaWNvbi14IG9heF9kZXRhaWxfc29jaWFsX3ggb2F4X2Zvb3Rlcl9pY29uXCIgdGl0bGU9XCJDxIN0cmUgY29udHVsIFhcIiBhcmlhLWxhYmVsPVwieFwiPjwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWNvbi14IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLWxhYmVsIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiYXJpYS1sYWJlbCBhdHRyaWJ1dGUgZXhpc3RzIGFuZCBpcyBub3QgZW1wdHkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibm9uLWVtcHR5LXRpdGxlIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgYSB0aXRsZSBhdHRyaWJ1dGUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJmb2N1c2FibGUtbm8tbmFtZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgbm90IGluIHRhYiBvcmRlciBvciBoYXMgYWNjZXNzaWJsZSB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2NvbXBhbnkvZGlnaXRhbC10cmF2ZWwtZ3VpZGUvXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9mb2xsb3cgbm9vcGVuZXJcIiBjbGFzcz1cIm9heC1pY29uLWxpbmtlZGluIG9heF9kZXRhaWxfc29jaWFsX2xpbmtlZGluIG9heF9mb290ZXJfaWNvblwiIHRpdGxlPVwiQ8SDdHJlIGNvbnR1bCBMaW5rZWRJblwiIGFyaWEtbGFiZWw9XCJsaW5rZWRpblwiPjwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWNvbi1saW5rZWRpbiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaGFzLXZpc2libGUtdGV4dCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHRleHQgdGhhdCBpcyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZm9jdXNhYmxlLW5vLW5hbWUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGlzIG5vdCBpbiB0YWIgb3JkZXIgb3IgaGFzIGFjY2Vzc2libGUgdGV4dCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgY2xhc3M9XCJvYXhfZnIgb2F4X21hcmdfcmlnaHRfMTAgb2F4X21hcmdfYm90dG9tXzIyXCIgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vYXBwcy5hcHBsZS5jb20vcm8vYXBwL3JvbWFuaWEtb3V0ZG9vci10cmF2ZWwtZ3VpZGUvaWQxNDkwMDc1MTI4XCIgdGl0bGU9XCJcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfbWFyZ19yaWdodF8xMC5vYXhfbWFyZ19ib3R0b21fMjJbdGl0bGU9XCJcIl06bnRoLWNoaWxkKDEpIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtdmlzaWJsZS10ZXh0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgdGV4dCB0aGF0IGlzIHZpc2libGUgdG8gc2NyZWVuIHJlYWRlcnMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJmb2N1c2FibGUtbm8tbmFtZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgbm90IGluIHRhYiBvcmRlciBvciBoYXMgYWNjZXNzaWJsZSB0ZXh0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBjbGFzcz1cIm9heF9mciBvYXhfbWFyZ19yaWdodF8xMCBvYXhfbWFyZ19ib3R0b21fMjJcIiB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYXBwcy9kZXRhaWxzP2lkPWNvbS5vdXRkb29yYWN0aXZlLnJvbWFuaWF0cmF2ZWxndWlkZVwiIHRpdGxlPVwiXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X21hcmdfcmlnaHRfMTAub2F4X21hcmdfYm90dG9tXzIyW3RpdGxlPVwiXCJdOm50aC1jaGlsZCgyKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaGFzLXZpc2libGUtdGV4dCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHRleHQgdGhhdCBpcyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZm9jdXNhYmxlLW5vLW5hbWUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGlzIG5vdCBpbiB0YWIgb3JkZXIgb3IgaGFzIGFjY2Vzc2libGUgdGV4dCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby90ZXJtcy1hbmQtY29uZGl0aW9ucy5odG1sXCIgY2xhc3M9XCJvYXgtNG1hcC10ZXJtc1wiPlRlcm1lbmkgyJlpIGNvbmRpyJtpaTwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtNG1hcC10ZXJtcyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaGFzLXZpc2libGUtdGV4dCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIHRleHQgdGhhdCBpcyB2aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiZm9jdXNhYmxlLW5vLW5hbWUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGlzIG5vdCBpbiB0YWIgb3JkZXIgb3IgaGFzIGFjY2Vzc2libGUgdGV4dCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9tYXAtY29weXJpZ2h0Lmh0bWxcIj5JbmZvcm1hyJtpaSBoYXJ0xIM8L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X21hcmdfcmlnaHRfMTAub2F4X2ZsOm50aC1jaGlsZCgyKSA+IGEiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy12aXNpYmxlLXRleHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyB0ZXh0IHRoYXQgaXMgdmlzaWJsZSB0byBzY3JlZW4gcmVhZGVycyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImZvY3VzYWJsZS1uby1uYW1lIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBpcyBub3QgaW4gdGFiIG9yZGVyIG9yIGhhcyBhY2Nlc3NpYmxlIHRleHQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vcHJpdmFjeS5odG1sXCIgY2xhc3M9XCJvYXgtNG1hcC1wcml2YWN5XCI+UG9saXRpY2EgZGUgY29uZmlkZW7Im2lhbGl0YXRlPC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC00bWFwLXByaXZhY3kiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy12aXNpYmxlLXRleHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyB0ZXh0IHRoYXQgaXMgdmlzaWJsZSB0byBzY3JlZW4gcmVhZGVycyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImZvY3VzYWJsZS1uby1uYW1lIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBpcyBub3QgaW4gdGFiIG9yZGVyIG9yIGhhcyBhY2Nlc3NpYmxlIHRleHQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vaW1wcmludC5odG1sXCIgY2xhc3M9XCJvYXgtNG1hcC1pbXByaW50XCI+TWVuyJtpdW5pIGxlZ2FsZTwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtNG1hcC1pbXByaW50IgogICAgICAgICAgXQogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImxpc3QiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5zdHJ1Y3R1cmUiLAogICAgICAgICJ3Y2FnMmEiLAogICAgICAgICJ3Y2FnMTMxIiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuMS4zLjEiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIHRoYXQgbGlzdHMgYXJlIHN0cnVjdHVyZWQgY29ycmVjdGx5IiwKICAgICAgImhlbHAiOiAiPHVsPiBhbmQgPG9sPiBtdXN0IG9ubHkgZGlyZWN0bHkgY29udGFpbiA8bGk+LCA8c2NyaXB0PiBvciA8dGVtcGxhdGU+IGVsZW1lbnRzIiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80LjgvbGlzdD9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogIm9ubHktbGlzdGl0ZW1zIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiTGlzdCBlbGVtZW50IG9ubHkgaGFzIGRpcmVjdCBjaGlsZHJlbiB0aGF0IGFyZSBhbGxvd2VkIGluc2lkZSA8bGk+IGVsZW1lbnRzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8dWwgY2xhc3M9XCJvYXhfaGVhZGVyX25hdlwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9oZWFkZXJfbmF2IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAib25seS1saXN0aXRlbXMiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJMaXN0IGVsZW1lbnQgb25seSBoYXMgZGlyZWN0IGNoaWxkcmVuIHRoYXQgYXJlIGFsbG93ZWQgaW5zaWRlIDxsaT4gZWxlbWVudHMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjx1bD48bGkgaWQ9XCJvYXgtbGFuZy1lblwiPjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvZW4vXCI+RW5nbGlzaDwvYT48L2xpPjxsaSBpZD1cIm9heC1sYW5nLWRlXCI+PGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9kZS9cIj5EZXV0c2NoPC9hPjwvbGk+PC91bD4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfbGFuZ3VhZ2Vfc2VsZWN0aW9uID4gdWwiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogW10sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJvbmx5LWxpc3RpdGVtcyIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkxpc3QgZWxlbWVudCBvbmx5IGhhcyBkaXJlY3QgY2hpbGRyZW4gdGhhdCBhcmUgYWxsb3dlZCBpbnNpZGUgPGxpPiBlbGVtZW50cyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHVsIGNsYXNzPVwib2F4LWNvbnRlbnQtc2xpZGVyLXNsaWRlcyAgb2F4X2ltZ19yZWxfcGFub3JhbWFcIiBzdHlsZT1cInBvc2l0aW9uOiByZWxhdGl2ZTsgei1pbmRleDogMTsgaGVpZ2h0OiA0NzEuOXB4O1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1jb250ZW50LXNsaWRlci1zbGlkZXMiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogW10sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJvbmx5LWxpc3RpdGVtcyIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkxpc3QgZWxlbWVudCBvbmx5IGhhcyBkaXJlY3QgY2hpbGRyZW4gdGhhdCBhcmUgYWxsb3dlZCBpbnNpZGUgPGxpPiBlbGVtZW50cyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHVsIGNsYXNzPVwib2F4X21lbnVfYmVsdFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9tZW51X2JlbHQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogW10sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJvbmx5LWxpc3RpdGVtcyIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkxpc3QgZWxlbWVudCBvbmx5IGhhcyBkaXJlY3QgY2hpbGRyZW4gdGhhdCBhcmUgYWxsb3dlZCBpbnNpZGUgPGxpPiBlbGVtZW50cyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHVsIGNsYXNzPVwib2F4X3JvdyBvYXgtc2xpZGUtbGlzdCBvYXgtc25pcHBldC1jb250YWluZXJcIiBzdHlsZT1cInRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMHB4LCAwcHgsIDBweCk7XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X3RpbGVfc25pcHBldF9saXN0ID4gLm9heC1zbGlkZS1saXN0Lm9heC1zbmlwcGV0LWNvbnRhaW5lci5vYXhfcm93IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAib25seS1saXN0aXRlbXMiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJMaXN0IGVsZW1lbnQgb25seSBoYXMgZGlyZWN0IGNoaWxkcmVuIHRoYXQgYXJlIGFsbG93ZWQgaW5zaWRlIDxsaT4gZWxlbWVudHMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjx1bCBjbGFzcz1cIm9heF9yb3cgb2F4LXNsaWRlLWxpc3Qgb2F4LXNuaXBwZXQtY29udGFpbmVyXCIgc3R5bGU9XCJ0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpO1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9mbGF0X3NuaXBwZXRfbGlzdCA+IC5vYXgtc2xpZGUtbGlzdC5vYXgtc25pcHBldC1jb250YWluZXIub2F4X3JvdyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogIm9ubHktbGlzdGl0ZW1zIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiTGlzdCBlbGVtZW50IG9ubHkgaGFzIGRpcmVjdCBjaGlsZHJlbiB0aGF0IGFyZSBhbGxvd2VkIGluc2lkZSA8bGk+IGVsZW1lbnRzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8dWwgY2xhc3M9XCJvYXhfdW5zdHlsZWRfbGlzdCBvYXhfY2xlYXJmaXggb2F4X25vX21hcmcgb2F4X21lbnVfZm9vdGVyX2xpc3Qgb2F4X2ZsZXhib3hcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfdW5zdHlsZWRfbGlzdC5vYXhfbWVudV9mb290ZXJfbGlzdC5vYXhfbm9fbWFyZyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogIm9ubHktbGlzdGl0ZW1zIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiTGlzdCBlbGVtZW50IG9ubHkgaGFzIGRpcmVjdCBjaGlsZHJlbiB0aGF0IGFyZSBhbGxvd2VkIGluc2lkZSA8bGk+IGVsZW1lbnRzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8dWwgY2xhc3M9XCJvYXhfc3ViX25hdlwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF91bnN0eWxlZF9saXN0Lm9heF9tZW51X2Zvb3Rlcl9saXN0Lm9heF9ub19tYXJnID4gLm9heF9oYXNfc3ViLm9heC10b2dnbGUtdHJhbnM6bnRoLWNoaWxkKDEpID4gLm9heF9zdWJfbmF2IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAib25seS1saXN0aXRlbXMiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJMaXN0IGVsZW1lbnQgb25seSBoYXMgZGlyZWN0IGNoaWxkcmVuIHRoYXQgYXJlIGFsbG93ZWQgaW5zaWRlIDxsaT4gZWxlbWVudHMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjx1bCBjbGFzcz1cIm9heF9zdWJfbmF2XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X3Vuc3R5bGVkX2xpc3Qub2F4X21lbnVfZm9vdGVyX2xpc3Qub2F4X25vX21hcmcgPiAub2F4X2hhc19zdWIub2F4LXRvZ2dsZS10cmFuczpudGgtY2hpbGQoMikgPiAub2F4X3N1Yl9uYXYiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogW10sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJvbmx5LWxpc3RpdGVtcyIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkxpc3QgZWxlbWVudCBvbmx5IGhhcyBkaXJlY3QgY2hpbGRyZW4gdGhhdCBhcmUgYWxsb3dlZCBpbnNpZGUgPGxpPiBlbGVtZW50cyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHVsIGNsYXNzPVwib2F4X3N1Yl9uYXZcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfdW5zdHlsZWRfbGlzdC5vYXhfbWVudV9mb290ZXJfbGlzdC5vYXhfbm9fbWFyZyA+IC5vYXhfaGFzX3N1Yi5vYXgtdG9nZ2xlLXRyYW5zOm50aC1jaGlsZCgzKSA+IC5vYXhfc3ViX25hdiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogIm9ubHktbGlzdGl0ZW1zIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiTGlzdCBlbGVtZW50IG9ubHkgaGFzIGRpcmVjdCBjaGlsZHJlbiB0aGF0IGFyZSBhbGxvd2VkIGluc2lkZSA8bGk+IGVsZW1lbnRzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8dWwgY2xhc3M9XCJvYXhfdW5zdHlsZWRfbGlzdCBvYXhfY2xlYXJmaXggb2F4X25vX21hcmdcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfbWFyZ19yaWdodF9uZWdfMTAgPiAub2F4X3Vuc3R5bGVkX2xpc3Qub2F4X25vX21hcmcub2F4X2NsZWFyZml4IgogICAgICAgICAgXQogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImxpc3RpdGVtIiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQuc3RydWN0dXJlIiwKICAgICAgICAid2NhZzJhIiwKICAgICAgICAid2NhZzEzMSIsCiAgICAgICAgIkVOLTMwMS01NDkiLAogICAgICAgICJFTi05LjEuMy4xIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyA8bGk+IGVsZW1lbnRzIGFyZSB1c2VkIHNlbWFudGljYWxseSIsCiAgICAgICJoZWxwIjogIjxsaT4gZWxlbWVudHMgbXVzdCBiZSBjb250YWluZWQgaW4gYSA8dWw+IG9yIDxvbD4iLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9saXN0aXRlbT9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibGlzdGl0ZW0iLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJMaXN0IGl0ZW0gaGFzIGEgPHVsPiwgPG9sPiBvciByb2xlPVwibGlzdFwiIHBhcmVudCBlbGVtZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpPjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vZ2hpZC1kZS1jYWxhdG9yaWUvcm9tYW5pYS8xMDM2OTkxL1wiIHRpdGxlPVwiR2hpZCB0dXJpc3RpY1wiPkdoaWQgdHVyaXN0aWM8L2E+PC9saT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfaGVhZGVyX25hdiA+IGxpOm50aC1jaGlsZCgxKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibGlzdGl0ZW0iLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJMaXN0IGl0ZW0gaGFzIGEgPHVsPiwgPG9sPiBvciByb2xlPVwibGlzdFwiIHBhcmVudCBlbGVtZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpPjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vcG9pcy9cIiB0aXRsZT1cIkRlc3RpbmHIm2lpXCI+RGVzdGluYcibaWk8L2E+PC9saT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfaGVhZGVyX25hdiA+IGxpOm50aC1jaGlsZCgyKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibGlzdGl0ZW0iLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJMaXN0IGl0ZW0gaGFzIGEgPHVsPiwgPG9sPiBvciByb2xlPVwibGlzdFwiIHBhcmVudCBlbGVtZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpPjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vdG91cnMvXCIgdGl0bGU9XCJUcmFzZWVcIj5UcmFzZWU8L2E+PC9saT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfaGVhZGVyX25hdiA+IGxpOm50aC1jaGlsZCgzKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibGlzdGl0ZW0iLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJMaXN0IGl0ZW0gaGFzIGEgPHVsPiwgPG9sPiBvciByb2xlPVwibGlzdFwiIHBhcmVudCBlbGVtZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpPjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vc291cmNlL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvMzM2ODA4MTYvXCIgdGl0bGU9XCJEZXNwcmUgbm9pXCI+RGVzcHJlIG5vaTwvYT48L2xpPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9oZWFkZXJfbmF2ID4gbGk6bnRoLWNoaWxkKDQpIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJsaXN0aXRlbSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkxpc3QgaXRlbSBoYXMgYSA8dWw+LCA8b2w+IG9yIHJvbGU9XCJsaXN0XCIgcGFyZW50IGVsZW1lbnQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGkgaWQ9XCJvYXgtbGFuZy1lblwiPjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvZW4vXCI+RW5nbGlzaDwvYT48L2xpPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI29heC1sYW5nLWVuIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJsaXN0aXRlbSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkxpc3QgaXRlbSBoYXMgYSA8dWw+LCA8b2w+IG9yIHJvbGU9XCJsaXN0XCIgcGFyZW50IGVsZW1lbnQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGkgaWQ9XCJvYXgtbGFuZy1kZVwiPjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvZGUvXCI+RGV1dHNjaDwvYT48L2xpPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI29heC1sYW5nLWRlIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJsaXN0aXRlbSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkxpc3QgaXRlbSBoYXMgYSA8dWw+LCA8b2w+IG9yIHJvbGU9XCJsaXN0XCIgcGFyZW50IGVsZW1lbnQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGkgY2xhc3M9XCJvYXhfcG9pbnRlclwiIHN0eWxlPVwicG9zaXRpb246IGFic29sdXRlOyB6LWluZGV4OiA0OyBvcGFjaXR5OiAxO1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9wb2ludGVyOm50aC1jaGlsZCgxKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibGlzdGl0ZW0iLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJMaXN0IGl0ZW0gaGFzIGEgPHVsPiwgPG9sPiBvciByb2xlPVwibGlzdFwiIHBhcmVudCBlbGVtZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpIGNsYXNzPVwib2F4X3BvaW50ZXJcIiBzdHlsZT1cInBvc2l0aW9uOiBhYnNvbHV0ZTsgei1pbmRleDogMjsgb3BhY2l0eTogMDtcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtY29udGVudC1zbGlkZXItc2xpZGVzID4gLm9heF9wb2ludGVyOm50aC1jaGlsZCgyKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibGlzdGl0ZW0iLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJMaXN0IGl0ZW0gaGFzIGEgPHVsPiwgPG9sPiBvciByb2xlPVwibGlzdFwiIHBhcmVudCBlbGVtZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpIGNsYXNzPVwib2F4X3BvaW50ZXJcIiBzdHlsZT1cInBvc2l0aW9uOiBhYnNvbHV0ZTsgei1pbmRleDogMjsgb3BhY2l0eTogMDtcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtY29udGVudC1zbGlkZXItc2xpZGVzID4gLm9heF9wb2ludGVyOm50aC1jaGlsZCgzKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibGlzdGl0ZW0iLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJMaXN0IGl0ZW0gaGFzIGEgPHVsPiwgPG9sPiBvciByb2xlPVwibGlzdFwiIHBhcmVudCBlbGVtZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpIGNsYXNzPVwib2F4X3BvaW50ZXJcIiBzdHlsZT1cInBvc2l0aW9uOiBhYnNvbHV0ZTsgei1pbmRleDogMjsgb3BhY2l0eTogMDtcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfcG9pbnRlcjpudGgtY2hpbGQoNCkiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImxpc3RpdGVtIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiTGlzdCBpdGVtIGhhcyBhIDx1bD4sIDxvbD4gb3Igcm9sZT1cImxpc3RcIiBwYXJlbnQgZWxlbWVudCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaSBjbGFzcz1cIiBvYXhfbWFyZ19ib3R0b21fNDRcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfbWVudV9iZWx0ID4gLm9heF9tYXJnX2JvdHRvbV80NDpudGgtY2hpbGQoMSkiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImxpc3RpdGVtIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiTGlzdCBpdGVtIGhhcyBhIDx1bD4sIDxvbD4gb3Igcm9sZT1cImxpc3RcIiBwYXJlbnQgZWxlbWVudCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaSBjbGFzcz1cIiBvYXhfbWFyZ19ib3R0b21fNDRcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfbWVudV9iZWx0ID4gLm9heF9tYXJnX2JvdHRvbV80NDpudGgtY2hpbGQoMikiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImxpc3RpdGVtIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiTGlzdCBpdGVtIGhhcyBhIDx1bD4sIDxvbD4gb3Igcm9sZT1cImxpc3RcIiBwYXJlbnQgZWxlbWVudCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaSBjbGFzcz1cIiBvYXhfbWFyZ19ib3R0b21fNDRcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfbWFyZ19ib3R0b21fNDQ6bnRoLWNoaWxkKDMpIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJsaXN0aXRlbSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkxpc3QgaXRlbSBoYXMgYSA8dWw+LCA8b2w+IG9yIHJvbGU9XCJsaXN0XCIgcGFyZW50IGVsZW1lbnQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGkgY2xhc3M9XCJvYXhfY29sIG9heF9jb2xfeHNfNiBvYXhfY29sX3NfNCBvYXhfY29sX21fNCBvYXhfY29sX2RfMyBvYXhfaW5saW5lIG9heC1zbGlkZS1saXN0LWl0ZW0gb2F4LWlkIG9heC1pZC04MDM2MTM3MDBcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAzNjEzNzAwLm9heF9jb2xfeHNfNi5vYXhfY29sX3NfNCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibGlzdGl0ZW0iLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJMaXN0IGl0ZW0gaGFzIGEgPHVsPiwgPG9sPiBvciByb2xlPVwibGlzdFwiIHBhcmVudCBlbGVtZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpIGNsYXNzPVwib2F4X2NvbCBvYXhfY29sX3hzXzYgb2F4X2NvbF9zXzQgb2F4X2NvbF9tXzQgb2F4X2NvbF9kXzMgb2F4X2lubGluZSBvYXgtc2xpZGUtbGlzdC1pdGVtIG9heC1pZCBvYXgtaWQtODAwNDk3NDEwXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQxMC5vYXhfY29sX3hzXzYub2F4X2NvbF9zXzQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImxpc3RpdGVtIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiTGlzdCBpdGVtIGhhcyBhIDx1bD4sIDxvbD4gb3Igcm9sZT1cImxpc3RcIiBwYXJlbnQgZWxlbWVudCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaSBjbGFzcz1cIm9heF9jb2wgb2F4X2NvbF94c182IG9heF9jb2xfc180IG9heF9jb2xfbV80IG9heF9jb2xfZF8zIG9heF9pbmxpbmUgb2F4LXNsaWRlLWxpc3QtaXRlbSBvYXgtaWQgb2F4LWlkLTgwMTEzOTczOVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDExMzk3Mzkub2F4X2NvbF94c182Lm9heF9jb2xfc180IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJsaXN0aXRlbSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkxpc3QgaXRlbSBoYXMgYSA8dWw+LCA8b2w+IG9yIHJvbGU9XCJsaXN0XCIgcGFyZW50IGVsZW1lbnQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGkgY2xhc3M9XCJvYXhfY29sIG9heF9jb2xfeHNfNiBvYXhfY29sX3NfNCBvYXhfY29sX21fNCBvYXhfY29sX2RfMyBvYXhfaW5saW5lIG9heC1zbGlkZS1saXN0LWl0ZW0gb2F4LWlkIG9heC1pZC04MDA0OTc0NjlcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAwNDk3NDY5Lm9heF9jb2xfeHNfNi5vYXhfY29sX3NfNCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibGlzdGl0ZW0iLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJMaXN0IGl0ZW0gaGFzIGEgPHVsPiwgPG9sPiBvciByb2xlPVwibGlzdFwiIHBhcmVudCBlbGVtZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpIGNsYXNzPVwib2F4X2NvbCBvYXhfY29sX3hzXzYgb2F4X2NvbF9zXzQgb2F4X2NvbF9tXzQgb2F4X2NvbF9kXzMgb2F4X2lubGluZSBvYXgtc2xpZGUtbGlzdC1pdGVtIG9heC1pZCBvYXgtaWQtODAwNDk3NDU5XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQ1OS5vYXhfY29sX3hzXzYub2F4X2NvbF9zXzQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImxpc3RpdGVtIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiTGlzdCBpdGVtIGhhcyBhIDx1bD4sIDxvbD4gb3Igcm9sZT1cImxpc3RcIiBwYXJlbnQgZWxlbWVudCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaSBjbGFzcz1cIm9heF9jb2wgb2F4X2NvbF94c182IG9heF9jb2xfc180IG9heF9jb2xfbV80IG9heF9jb2xfZF8zIG9heF9pbmxpbmUgb2F4LXNsaWRlLWxpc3QtaXRlbSBvYXgtaWQgb2F4LWlkLTgwMDQ5NzQ0OFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDA0OTc0NDgub2F4X2NvbF94c182Lm9heF9jb2xfc180IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJsaXN0aXRlbSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkxpc3QgaXRlbSBoYXMgYSA8dWw+LCA8b2w+IG9yIHJvbGU9XCJsaXN0XCIgcGFyZW50IGVsZW1lbnQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGkgY2xhc3M9XCJvYXhfY29sIG9heF9jb2xfeHNfNiBvYXhfY29sX3NfNCBvYXhfY29sX21fNCBvYXhfY29sX2RfMyBvYXhfaW5saW5lIG9heC1zbGlkZS1saXN0LWl0ZW0gb2F4LWlkIG9heC1pZC04MDA0OTc0MjhcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAwNDk3NDI4Lm9heF9jb2xfeHNfNi5vYXhfY29sX3NfNCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibGlzdGl0ZW0iLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJMaXN0IGl0ZW0gaGFzIGEgPHVsPiwgPG9sPiBvciByb2xlPVwibGlzdFwiIHBhcmVudCBlbGVtZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpIGNsYXNzPVwib2F4X2NvbCBvYXhfY29sX3hzXzYgb2F4X2NvbF9zXzQgb2F4X2NvbF9tXzQgb2F4X2NvbF9kXzMgb2F4X2lubGluZSBvYXgtc2xpZGUtbGlzdC1pdGVtIG9heC1pZCBvYXgtaWQtODAwNDk3NDIyXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQyMi5vYXhfY29sX3hzXzYub2F4X2NvbF9zXzQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImxpc3RpdGVtIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiTGlzdCBpdGVtIGhhcyBhIDx1bD4sIDxvbD4gb3Igcm9sZT1cImxpc3RcIiBwYXJlbnQgZWxlbWVudCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaSBjbGFzcz1cIm9heF9jb2wgb2F4X2NvbF94c182IG9heF9jb2xfc180IG9heF9jb2xfbV80IG9heF9jb2xfZF8zIG9heF9pbmxpbmUgb2F4LXNsaWRlLWxpc3QtaXRlbSBvYXgtaWQgb2F4LWlkLTgwMDQ5NzQxOVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDA0OTc0MTkub2F4X2NvbF94c182Lm9heF9jb2xfc180IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJsaXN0aXRlbSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkxpc3QgaXRlbSBoYXMgYSA8dWw+LCA8b2w+IG9yIHJvbGU9XCJsaXN0XCIgcGFyZW50IGVsZW1lbnQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGkgY2xhc3M9XCJvYXhfY29sIG9heF9jb2xfeHNfNiBvYXhfY29sX3NfNCBvYXhfY29sX21fNCBvYXhfY29sX2RfMyBvYXhfaW5saW5lIG9heC1zbGlkZS1saXN0LWl0ZW0gb2F4LWlkIG9heC1pZC04MDA0OTc0MTVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAwNDk3NDE1Lm9heF9jb2xfeHNfNi5vYXhfY29sX3NfNCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibGlzdGl0ZW0iLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJMaXN0IGl0ZW0gaGFzIGEgPHVsPiwgPG9sPiBvciByb2xlPVwibGlzdFwiIHBhcmVudCBlbGVtZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpIGNsYXNzPVwib2F4X2NvbCBvYXhfY29sX3hzXzEwIG9heF9jb2xfc182IG9heF9jb2xfbV82IG9heF9jb2xfZF80IG9heF9pbmxpbmUgb2F4LXNsaWRlLWxpc3QtaXRlbSBvYXgtaWQgb2F4LWlkLTU0MjMxMTIzXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTU0MjMxMTIzLm9heF9jb2xfeHNfMTAub2F4X2NvbF9zXzYiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImxpc3RpdGVtIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiTGlzdCBpdGVtIGhhcyBhIDx1bD4sIDxvbD4gb3Igcm9sZT1cImxpc3RcIiBwYXJlbnQgZWxlbWVudCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaSBjbGFzcz1cIm9heF9jb2wgb2F4X2NvbF94c18xMCBvYXhfY29sX3NfNiBvYXhfY29sX21fNiBvYXhfY29sX2RfNCBvYXhfaW5saW5lIG9heC1zbGlkZS1saXN0LWl0ZW0gb2F4LWlkIG9heC1pZC01NDIzMDg5MVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC01NDIzMDg5MS5vYXhfY29sX3hzXzEwLm9heF9jb2xfc182IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJsaXN0aXRlbSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkxpc3QgaXRlbSBoYXMgYSA8dWw+LCA8b2w+IG9yIHJvbGU9XCJsaXN0XCIgcGFyZW50IGVsZW1lbnQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGkgY2xhc3M9XCJvYXhfY29sIG9heF9jb2xfeHNfMTAgb2F4X2NvbF9zXzYgb2F4X2NvbF9tXzYgb2F4X2NvbF9kXzQgb2F4X2lubGluZSBvYXgtc2xpZGUtbGlzdC1pdGVtIG9heC1pZCBvYXgtaWQtNTQyMzA5MjdcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNTQyMzA5Mjcub2F4X2NvbF94c18xMC5vYXhfY29sX3NfNiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibGlzdGl0ZW0iLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJMaXN0IGl0ZW0gaGFzIGEgPHVsPiwgPG9sPiBvciByb2xlPVwibGlzdFwiIHBhcmVudCBlbGVtZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpIGNsYXNzPVwib2F4X2hhc19zdWIgb2F4LXRvZ2dsZS10cmFuc1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF91bnN0eWxlZF9saXN0Lm9heF9tZW51X2Zvb3Rlcl9saXN0Lm9heF9ub19tYXJnID4gLm9heF9oYXNfc3ViLm9heC10b2dnbGUtdHJhbnM6bnRoLWNoaWxkKDEpIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJsaXN0aXRlbSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkxpc3QgaXRlbSBoYXMgYSA8dWw+LCA8b2w+IG9yIHJvbGU9XCJsaXN0XCIgcGFyZW50IGVsZW1lbnQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGk+PGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby90b3VycGxhbm5lci9cIiB0aXRsZT1cIlBsYW5pZmljYXRvciB0cmFzZWVcIj5QbGFuaWZpY2F0b3IgdHJhc2VlPC9hPjwvbGk+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X3Vuc3R5bGVkX2xpc3Qub2F4X21lbnVfZm9vdGVyX2xpc3Qub2F4X25vX21hcmcgPiAub2F4X2hhc19zdWIub2F4LXRvZ2dsZS10cmFuczpudGgtY2hpbGQoMSkgPiAub2F4X3N1Yl9uYXYgPiBsaTpudGgtY2hpbGQoMSkiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImxpc3RpdGVtIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiTGlzdCBpdGVtIGhhcyBhIDx1bD4sIDxvbD4gb3Igcm9sZT1cImxpc3RcIiBwYXJlbnQgZWxlbWVudCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaT48YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL3AvZmFjdHMtYWJvdXQtcm9tYW5pYS8zNTk2MzY5NC9cIiB0aXRsZT1cIkZhY3RzIGFib3V0IFJvbWFuaWFcIj5GYWN0cyBhYm91dCBSb21hbmlhPC9hPjwvbGk+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X3Vuc3R5bGVkX2xpc3Qub2F4X21lbnVfZm9vdGVyX2xpc3Qub2F4X25vX21hcmcgPiAub2F4X2hhc19zdWIub2F4LXRvZ2dsZS10cmFuczpudGgtY2hpbGQoMSkgPiAub2F4X3N1Yl9uYXYgPiBsaTpudGgtY2hpbGQoMikiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImxpc3RpdGVtIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiTGlzdCBpdGVtIGhhcyBhIDx1bD4sIDxvbD4gb3Igcm9sZT1cImxpc3RcIiBwYXJlbnQgZWxlbWVudCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaT48YSBocmVmPVwiaHR0cDovL3d3dy5hbnBjLmdvdi5yb1wiIHRpdGxlPVwiQU5QQyAtIFByb3RlY8ibaWEgQ29uc3VtYXRvcmlsb3JcIj5BTlBDIC0gUHJvdGVjyJtpYSBDb25zdW1hdG9yaWxvcjwvYT48L2xpPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF91bnN0eWxlZF9saXN0Lm9heF9tZW51X2Zvb3Rlcl9saXN0Lm9heF9ub19tYXJnID4gLm9heF9oYXNfc3ViLm9heC10b2dnbGUtdHJhbnM6bnRoLWNoaWxkKDEpID4gLm9heF9zdWJfbmF2ID4gbGk6bnRoLWNoaWxkKDMpIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJsaXN0aXRlbSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkxpc3QgaXRlbSBoYXMgYSA8dWw+LCA8b2w+IG9yIHJvbGU9XCJsaXN0XCIgcGFyZW50IGVsZW1lbnQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGkgY2xhc3M9XCJvYXhfaGFzX3N1YiBvYXgtdG9nZ2xlLXRyYW5zXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X3Vuc3R5bGVkX2xpc3Qub2F4X21lbnVfZm9vdGVyX2xpc3Qub2F4X25vX21hcmcgPiAub2F4X2hhc19zdWIub2F4LXRvZ2dsZS10cmFuczpudGgtY2hpbGQoMikiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImxpc3RpdGVtIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiTGlzdCBpdGVtIGhhcyBhIDx1bD4sIDxvbD4gb3Igcm9sZT1cImxpc3RcIiBwYXJlbnQgZWxlbWVudCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaT48YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL3AvZWNvc2lzdGVtdWwtcm9tYW5pYXRyYXZlbC5ndWlkZS80NjUxNjg5Ni9cIiB0aXRsZT1cIkVjb3Npc3RlbXVsIFR1cmlzdGljXCI+RWNvc2lzdGVtdWwgVHVyaXN0aWM8L2E+PC9saT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfdW5zdHlsZWRfbGlzdC5vYXhfbWVudV9mb290ZXJfbGlzdC5vYXhfbm9fbWFyZyA+IC5vYXhfaGFzX3N1Yi5vYXgtdG9nZ2xlLXRyYW5zOm50aC1jaGlsZCgyKSA+IC5vYXhfc3ViX25hdiA+IGxpOm50aC1jaGlsZCgxKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibGlzdGl0ZW0iLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJMaXN0IGl0ZW0gaGFzIGEgPHVsPiwgPG9sPiBvciByb2xlPVwibGlzdFwiIHBhcmVudCBlbGVtZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpPjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vcC9tYXJrZXRpbmctb25saW5lLXByaW4tcm9tYW5pYXRyYXZlbC5ndWlkZS80NjQ5NzE1Ny9cIiB0aXRsZT1cIk1hcmtldGluZyBPbmxpbmVcIj5NYXJrZXRpbmcgT25saW5lPC9hPjwvbGk+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X3Vuc3R5bGVkX2xpc3Qub2F4X21lbnVfZm9vdGVyX2xpc3Qub2F4X25vX21hcmcgPiAub2F4X2hhc19zdWIub2F4LXRvZ2dsZS10cmFuczpudGgtY2hpbGQoMikgPiAub2F4X3N1Yl9uYXYgPiBsaTpudGgtY2hpbGQoMikiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImxpc3RpdGVtIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiTGlzdCBpdGVtIGhhcyBhIDx1bD4sIDxvbD4gb3Igcm9sZT1cImxpc3RcIiBwYXJlbnQgZWxlbWVudCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaT48YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL2VuL2NvbnRhY3QuaHRtbFwiIHRpdGxlPVwiQ29udGFjdFwiPkNvbnRhY3Q8L2E+PC9saT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfdW5zdHlsZWRfbGlzdC5vYXhfbWVudV9mb290ZXJfbGlzdC5vYXhfbm9fbWFyZyA+IC5vYXhfaGFzX3N1Yi5vYXgtdG9nZ2xlLXRyYW5zOm50aC1jaGlsZCgyKSA+IC5vYXhfc3ViX25hdiA+IGxpOm50aC1jaGlsZCgzKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibGlzdGl0ZW0iLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJMaXN0IGl0ZW0gaGFzIGEgPHVsPiwgPG9sPiBvciByb2xlPVwibGlzdFwiIHBhcmVudCBlbGVtZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpIGNsYXNzPVwib2F4X2hhc19zdWIgb2F4LXRvZ2dsZS10cmFuc1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF91bnN0eWxlZF9saXN0Lm9heF9tZW51X2Zvb3Rlcl9saXN0Lm9heF9ub19tYXJnID4gLm9heF9oYXNfc3ViLm9heC10b2dnbGUtdHJhbnM6bnRoLWNoaWxkKDMpIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJsaXN0aXRlbSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkxpc3QgaXRlbSBoYXMgYSA8dWw+LCA8b2w+IG9yIHJvbGU9XCJsaXN0XCIgcGFyZW50IGVsZW1lbnQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGk+PGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9wL3JvbWFuaWF0cmF2ZWwuZ3VpZGUtc3ByaWppbmEtb3JnYW5pemF0aWlsZS1zZWFyY2gtcmVzY3VlLzUyMjU3MTY1L1wiIHRpdGxlPVwiU2VhcmNoICZhbXA7IFJlc2N1ZVwiPlNlYXJjaCAmYW1wOyBSZXNjdWU8L2E+PC9saT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfdW5zdHlsZWRfbGlzdC5vYXhfbWVudV9mb290ZXJfbGlzdC5vYXhfbm9fbWFyZyA+IC5vYXhfaGFzX3N1Yi5vYXgtdG9nZ2xlLXRyYW5zOm50aC1jaGlsZCgzKSA+IC5vYXhfc3ViX25hdiA+IGxpOm50aC1jaGlsZCgxKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibGlzdGl0ZW0iLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJMaXN0IGl0ZW0gaGFzIGEgPHVsPiwgPG9sPiBvciByb2xlPVwibGlzdFwiIHBhcmVudCBlbGVtZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpPjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vcC9wYWdpbmktZ2hpZC10dXJpc3RpYy80NjU2MTA4Ny9cIiB0aXRsZT1cIlBhZ2luaSBHaGlkIFR1cmlzdGljXCI+UGFnaW5pIEdoaWQgVHVyaXN0aWM8L2E+PC9saT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfdW5zdHlsZWRfbGlzdC5vYXhfbWVudV9mb290ZXJfbGlzdC5vYXhfbm9fbWFyZyA+IC5vYXhfaGFzX3N1Yi5vYXgtdG9nZ2xlLXRyYW5zOm50aC1jaGlsZCgzKSA+IC5vYXhfc3ViX25hdiA+IGxpOm50aC1jaGlsZCgyKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibGlzdGl0ZW0iLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJMaXN0IGl0ZW0gaGFzIGEgPHVsPiwgPG9sPiBvciByb2xlPVwibGlzdFwiIHBhcmVudCBlbGVtZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF91bnN0eWxlZF9saXN0Lm9heF9tZW51X2Zvb3Rlcl9saXN0Lm9heF9ub19tYXJnID4gbGk6bnRoLWNoaWxkKDQpIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJsaXN0aXRlbSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkxpc3QgaXRlbSBoYXMgYSA8dWw+LCA8b2w+IG9yIHJvbGU9XCJsaXN0XCIgcGFyZW50IGVsZW1lbnQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGkgY2xhc3M9XCJvYXhfZmwgb2F4X21hcmdfcmlnaHRfMTBcIj5cblx0XHQ8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL3Rlcm1zLWFuZC1jb25kaXRpb25zLmh0bWxcIiBjbGFzcz1cIm9heC00bWFwLXRlcm1zXCI+VGVybWVuaSDImWkgY29uZGnIm2lpPC9hPlxuXHQ8L2xpPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9tYXJnX3JpZ2h0XzEwLm9heF9mbDpudGgtY2hpbGQoMSkiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImxpc3RpdGVtIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiTGlzdCBpdGVtIGhhcyBhIDx1bD4sIDxvbD4gb3Igcm9sZT1cImxpc3RcIiBwYXJlbnQgZWxlbWVudCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaSBjbGFzcz1cIm9heF9mbCBvYXhfbWFyZ19yaWdodF8xMFwiPlxuXHRcdDxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vbWFwLWNvcHlyaWdodC5odG1sXCI+SW5mb3JtYcibaWkgaGFydMSDPC9hPlxuXHQ8L2xpPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9tYXJnX3JpZ2h0XzEwLm9heF9mbDpudGgtY2hpbGQoMikiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImxpc3RpdGVtIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiTGlzdCBpdGVtIGhhcyBhIDx1bD4sIDxvbD4gb3Igcm9sZT1cImxpc3RcIiBwYXJlbnQgZWxlbWVudCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaSBjbGFzcz1cIm9heF9mbCBvYXhfbWFyZ19yaWdodF8xMFwiPlxuXHRcdDxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vcHJpdmFjeS5odG1sXCIgY2xhc3M9XCJvYXgtNG1hcC1wcml2YWN5XCI+UG9saXRpY2EgZGUgY29uZmlkZW7Im2lhbGl0YXRlPC9hPlxuXHQ8L2xpPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9tYXJnX3JpZ2h0XzEwLm9heF9mbDpudGgtY2hpbGQoMykiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImxpc3RpdGVtIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiTGlzdCBpdGVtIGhhcyBhIDx1bD4sIDxvbD4gb3Igcm9sZT1cImxpc3RcIiBwYXJlbnQgZWxlbWVudCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaSBjbGFzcz1cIm9heF9mbCBvYXhfbWFyZ19yaWdodF8xMFwiPlxuXHRcdDxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vaW1wcmludC5odG1sXCIgY2xhc3M9XCJvYXgtNG1hcC1pbXByaW50XCI+TWVuyJtpdW5pIGxlZ2FsZTwvYT5cblx0PC9saT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfbWFyZ19yaWdodF8xMC5vYXhfZmw6bnRoLWNoaWxkKDQpIgogICAgICAgICAgXQogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImlkIjogIm1ldGEtdmlld3BvcnQtbGFyZ2UiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5zZW5zb3J5LWFuZC12aXN1YWwtY3VlcyIsCiAgICAgICAgImJlc3QtcHJhY3RpY2UiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIDxtZXRhIG5hbWU9XCJ2aWV3cG9ydFwiPiBjYW4gc2NhbGUgYSBzaWduaWZpY2FudCBhbW91bnQiLAogICAgICAiaGVscCI6ICJVc2VycyBzaG91bGQgYmUgYWJsZSB0byB6b29tIGFuZCBzY2FsZSB0aGUgdGV4dCB1cCB0byA1MDAlIiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80LjgvbWV0YS12aWV3cG9ydC1sYXJnZT9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibWV0YS12aWV3cG9ydC1sYXJnZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1pbm9yIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICI8bWV0YT4gdGFnIGRvZXMgbm90IHByZXZlbnQgc2lnbmlmaWNhbnQgem9vbWluZyBvbiBtb2JpbGUgZGV2aWNlcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxtZXRhIG5hbWU9XCJ2aWV3cG9ydFwiIGNvbnRlbnQ9XCJ3aWR0aD1kZXZpY2Utd2lkdGhcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIm1ldGFbbmFtZT1cInZpZXdwb3J0XCJdIgogICAgICAgICAgXQogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImlkIjogIm1ldGEtdmlld3BvcnQiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5zZW5zb3J5LWFuZC12aXN1YWwtY3VlcyIsCiAgICAgICAgIndjYWcyYWEiLAogICAgICAgICJ3Y2FnMTQ0IiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuMS40LjQiLAogICAgICAgICJBQ1QiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIDxtZXRhIG5hbWU9XCJ2aWV3cG9ydFwiPiBkb2VzIG5vdCBkaXNhYmxlIHRleHQgc2NhbGluZyBhbmQgem9vbWluZyIsCiAgICAgICJoZWxwIjogIlpvb21pbmcgYW5kIHNjYWxpbmcgbXVzdCBub3QgYmUgZGlzYWJsZWQiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9tZXRhLXZpZXdwb3J0P2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJtZXRhLXZpZXdwb3J0IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIjxtZXRhPiB0YWcgZG9lcyBub3QgZGlzYWJsZSB6b29taW5nIG9uIG1vYmlsZSBkZXZpY2VzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPG1ldGEgbmFtZT1cInZpZXdwb3J0XCIgY29udGVudD1cIndpZHRoPWRldmljZS13aWR0aFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAibWV0YVtuYW1lPVwidmlld3BvcnRcIl0iCiAgICAgICAgICBdCiAgICAgICAgfQogICAgICBdCiAgICB9LAogICAgewogICAgICAiaWQiOiAibmVzdGVkLWludGVyYWN0aXZlIiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQua2V5Ym9hcmQiLAogICAgICAgICJ3Y2FnMmEiLAogICAgICAgICJ3Y2FnNDEyIiwKICAgICAgICAiVFR2NSIsCiAgICAgICAgIlRUNi5hIiwKICAgICAgICAiRU4tMzAxLTU0OSIsCiAgICAgICAgIkVOLTkuNC4xLjIiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIGludGVyYWN0aXZlIGNvbnRyb2xzIGFyZSBub3QgbmVzdGVkIGFzIHRoZXkgYXJlIG5vdCBhbHdheXMgYW5ub3VuY2VkIGJ5IHNjcmVlbiByZWFkZXJzIG9yIGNhbiBjYXVzZSBmb2N1cyBwcm9ibGVtcyBmb3IgYXNzaXN0aXZlIHRlY2hub2xvZ2llcyIsCiAgICAgICJoZWxwIjogIkludGVyYWN0aXZlIGNvbnRyb2xzIG11c3Qgbm90IGJlIG5lc3RlZCIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L25lc3RlZC1pbnRlcmFjdGl2ZT9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibm8tZm9jdXNhYmxlLWNvbnRlbnQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGRvZXMgbm90IGhhdmUgZm9jdXNhYmxlIGRlc2NlbmRhbnRzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGltZyBzcmM9XCJodHRwczovL3Jlcy5vYXN0YXRpYy5jb20vdGhlbWVzL29hZC1yb21hbmlhdHJhdmVsL2Nzcy9pbWFnZXMvbG9nb19yb21hbmlhLnBuZz90cz0xNzA2MTc2NTU3NTMwJmFtcDs2YzM2YWNlMVwiIGFsdD1cIkxvZ29yb21hbmlhdHJhdmVsLmd1aWRlXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJpbWdbYWx0PVwiTG9nb3JvbWFuaWF0cmF2ZWwuZ3VpZGVcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogIm5vLWZvY3VzYWJsZS1jb250ZW50IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBkb2VzIG5vdCBoYXZlIGZvY3VzYWJsZSBkZXNjZW5kYW50cyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxidXR0b24gY2xhc3M9XCJvYXhfYnRuIG9heF9mbCBvYXhfYm9hcmRfdG9nZ2xlIG9heF9wb2ludGVyIG9heC1oZWFkZXItYm9hcmQtdG9nZ2xlIG9heC1oZWFkZXItYm9hcmQtdG9nZ2xlLWJ0blwiIGFyaWEtbGFiZWw9XCJEZXNjaGlkZSBtZW5pdWxcIiBkYXRhLWNsb3NlLWxhYmVsPVwiw45uY2hpZGUgbWVuaXVsXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2JvYXJkX3RvZ2dsZSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibm8tZm9jdXNhYmxlLWNvbnRlbnQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGRvZXMgbm90IGhhdmUgZm9jdXNhYmxlIGRlc2NlbmRhbnRzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGlucHV0IHRhYmluZGV4PVwiLTFcIiB0eXBlPVwic3VibWl0XCIgYXJpYS1sYWJlbD1cIlBvcm5lyJl0ZSBjxIN1dGFyZWFcIiBjbGFzcz1cIm9heF9pY29uX2ZvbnQgb2F4X2ZvbnRfbGFyZ2UyOFwiIHZhbHVlPVwi8J+UjVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9pY29uX2ZvbnQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogIm5vLWZvY3VzYWJsZS1jb250ZW50IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBkb2VzIG5vdCBoYXZlIGZvY3VzYWJsZSBkZXNjZW5kYW50cyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxidXR0b24gY2xhc3M9XCJvYXhfYnRuIG9heF9zZWFyY2hfdG9nZ2xlIG9heF9wb2ludGVyIG9heF9mbCBvYXgtaGVhZGVyLWJhci10b2dnbGUgb2F4LWhlYWRlci1iYXItdG9nZ2xlLW9wZW5cIiBhcmlhLWxhYmVsPVwiRGVzY2hpZGUgY8SDdXRhcmVhXCI+XG5cdFx0XHRcdFx0XHQgIFx0XHRcdDxzcGFuIGNsYXNzPVwib2F4LWljb24tbWFnbmlmaWVyIG9heF9mb250X2xhcmdlMjhcIj48L3NwYW4+XG5cdFx0XHRcdFx0XHQgIFx0XHQ8L2J1dHRvbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaGVhZGVyLWJhci10b2dnbGUtb3BlbiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibm8tZm9jdXNhYmxlLWNvbnRlbnQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGRvZXMgbm90IGhhdmUgZm9jdXNhYmxlIGRlc2NlbmRhbnRzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGltZyBzcmM9XCJodHRwczovL2ltZzIub2FzdGF0aWMuY29tL2ltZzIvMjU5NDM0MDMvMTA4MHg0MTByL3ZhcmlhbnQuanBnXCIgd2lkdGg9XCIxMDgwXCIgaGVpZ2h0PVwiNDEwXCIgc3Jjc2V0PVwiaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzI1OTQzNDAzLzEwODB4NDEwci92YXJpYW50LmpwZyAxMDgwdyxodHRwczovL2ltZzIub2FzdGF0aWMuY29tL2ltZzIvMjU5NDM0MDMvMTI1MHg0NzVyL3ZhcmlhbnQuanBnIDEyNTB3LGh0dHBzOi8vaW1nMi5vYXN0YXRpYy5jb20vaW1nMi8yNTk0MzQwMy8yMTYweDgyMXIvdmFyaWFudC5qcGcgMjE2MHcsaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzI1OTQzNDAzLzI1MDB4OTUwci92YXJpYW50LmpwZyAyNTAwd1wiIHNpemVzPVwiMTAwdndcIiBhbHQ9XCJQcml2ZWxpyJl0ZSBzcHJlIFNlbWVuaWNcIiBjbGFzcz1cIm9heF93aWR0aF9mdWxsXCIgZGF0YS1pbWdjb3VudD1cIjFcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImltZ1thbHQ9XCJQcml2ZWxpyJl0ZSBzcHJlIFNlbWVuaWNcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogIm5vLWZvY3VzYWJsZS1jb250ZW50IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBkb2VzIG5vdCBoYXZlIGZvY3VzYWJsZSBkZXNjZW5kYW50cyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbWcgc3JjPVwiaHR0cHM6Ly9pbWczLm9hc3RhdGljLmNvbS9pbWcyLzY0NTc5OTI5LzEwODB4NDEwci92YXJpYW50LmpwZ1wiIHdpZHRoPVwiMTA4MFwiIGhlaWdodD1cIjQxMFwiIHNyY3NldD1cImh0dHBzOi8vaW1nMy5vYXN0YXRpYy5jb20vaW1nMi82NDU3OTkyOS8xMDgweDQxMHIvdmFyaWFudC5qcGcgMTA4MHcsaHR0cHM6Ly9pbWczLm9hc3RhdGljLmNvbS9pbWcyLzY0NTc5OTI5LzEyNTB4NDc1ci92YXJpYW50LmpwZyAxMjUwdyxodHRwczovL2ltZzMub2FzdGF0aWMuY29tL2ltZzIvNjQ1Nzk5MjkvMjE2MHg4MjFyL3ZhcmlhbnQuanBnIDIxNjB3LGh0dHBzOi8vaW1nMy5vYXN0YXRpYy5jb20vaW1nMi82NDU3OTkyOS8yNTAweDk1MHIvdmFyaWFudC5qcGcgMjUwMHdcIiBzaXplcz1cIjEwMHZ3XCIgYWx0PVwiTXVuyJtpaSBGxINnxINyYciZXCIgY2xhc3M9XCJvYXhfd2lkdGhfZnVsbFwiIGRhdGEtaW1nY291bnQ9XCIyXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJpbWdbYWx0PVwiTXVuyJtpaSBGxINnxINyYciZXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJuby1mb2N1c2FibGUtY29udGVudCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgZG9lcyBub3QgaGF2ZSBmb2N1c2FibGUgZGVzY2VuZGFudHMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHNyYz1cImh0dHBzOi8vaW1nMi5vYXN0YXRpYy5jb20vaW1nMi8zNTkyOTE2OC8xMDgweDQxMHIvdmFyaWFudC5qcGdcIiB3aWR0aD1cIjEwODBcIiBoZWlnaHQ9XCI0MTBcIiBzcmNzZXQ9XCJodHRwczovL2ltZzIub2FzdGF0aWMuY29tL2ltZzIvMzU5MjkxNjgvMTA4MHg0MTByL3ZhcmlhbnQuanBnIDEwODB3LGh0dHBzOi8vaW1nMi5vYXN0YXRpYy5jb20vaW1nMi8zNTkyOTE2OC8xMjUweDQ3NXIvdmFyaWFudC5qcGcgMTI1MHcsaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzM1OTI5MTY4LzIxNjB4ODIxci92YXJpYW50LmpwZyAyMTYwdyxodHRwczovL2ltZzIub2FzdGF0aWMuY29tL2ltZzIvMzU5MjkxNjgvMjUwMHg5NTByL3ZhcmlhbnQuanBnIDI1MDB3XCIgc2l6ZXM9XCIxMDB2d1wiIGFsdD1cIk11bnRlbGUgQsSDaciZb3JpaSwgQ2x1aiwgUm9tYW5pYVwiIGNsYXNzPVwib2F4X3dpZHRoX2Z1bGxcIiBkYXRhLWltZ2NvdW50PVwiM1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiaW1nW2RhdGEtaW1nY291bnQ9XCIzXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJuby1mb2N1c2FibGUtY29udGVudCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgZG9lcyBub3QgaGF2ZSBmb2N1c2FibGUgZGVzY2VuZGFudHMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHdpZHRoPVwiMTA4MFwiIGhlaWdodD1cIjQxMFwiIHNyYz1cImh0dHBzOi8vaW1nMy5vYXN0YXRpYy5jb20vaW1nMi81NTEyNDIzOS8xMDgweDQxMHIvdmFyaWFudC5qcGdcIiBzcmNzZXQ9XCJodHRwczovL2ltZzMub2FzdGF0aWMuY29tL2ltZzIvNTUxMjQyMzkvMTA4MHg0MTByL3ZhcmlhbnQuanBnIDEwODB3LGh0dHBzOi8vaW1nMy5vYXN0YXRpYy5jb20vaW1nMi81NTEyNDIzOS8xMjUweDQ3NXIvdmFyaWFudC5qcGcgMTI1MHcsaHR0cHM6Ly9pbWczLm9hc3RhdGljLmNvbS9pbWcyLzU1MTI0MjM5LzIxNjB4ODIxci92YXJpYW50LmpwZyAyMTYwdyxodHRwczovL2ltZzMub2FzdGF0aWMuY29tL2ltZzIvNTUxMjQyMzkvMjUwMHg5NTByL3ZhcmlhbnQuanBnIDI1MDB3XCIgYWx0PVwiUMSDZHVyZSBsw6JuZ8SDIE1lZGlhyJlcIiBzaXplcz1cIjEwMHZ3XCIgY2xhc3M9XCJvYXhfd2lkdGhfZnVsbFwiIGRhdGEtb2F4X2ltZ19sb2FkPVwiZG9uZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiaW1nW2FsdD1cIlDEg2R1cmUgbMOibmfEgyBNZWRpYciZXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJuby1mb2N1c2FibGUtY29udGVudCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgZG9lcyBub3QgaGF2ZSBmb2N1c2FibGUgZGVzY2VuZGFudHMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHNyYz1cImh0dHBzOi8vaW1nMS5vYXN0YXRpYy5jb20vaW1nMi84NzU5ODY4Mi80MjB4MjM3ci92YXJpYW50LmpwZ1wiIGFsdD1cIkNhYmFuxIMgbW9udGFuxIMsIHRvYW1uYVwiIHdpZHRoPVwiNDIwXCIgaGVpZ2h0PVwiMjM3XCIgZGF0YS1vYXhfaW1nX2xvYWQ9XCJkb25lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJpbWdbYWx0PVwiQ2FiYW7EgyBtb250YW7EgywgdG9hbW5hXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJuby1mb2N1c2FibGUtY29udGVudCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgZG9lcyBub3QgaGF2ZSBmb2N1c2FibGUgZGVzY2VuZGFudHMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHNyYz1cImh0dHBzOi8vaW1nMS5vYXN0YXRpYy5jb20vaW1nMi8zNTg1MzUxMi80MjB4MjM3ci92YXJpYW50LmpwZ1wiIGFsdD1cIk3Eg27Eg3N0aXJlYSBTdWNldmnFo2FcIiB3aWR0aD1cIjQyMFwiIGhlaWdodD1cIjIzN1wiIGRhdGEtb2F4X2ltZ19sb2FkPVwiZG9uZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiaW1nW2FsdD1cIk3Eg27Eg3N0aXJlYSBTdWNldmnFo2FcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogIm5vLWZvY3VzYWJsZS1jb250ZW50IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBkb2VzIG5vdCBoYXZlIGZvY3VzYWJsZSBkZXNjZW5kYW50cyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbWcgc3JjPVwiaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzUzMjMxNTMzLzQyMHgyMzdyL3ZhcmlhbnQuanBnXCIgYWx0PVwiUGVpc2FqIGRpbiBNdW7Im2lpIFJldGV6YXRcIiB3aWR0aD1cIjQyMFwiIGhlaWdodD1cIjIzN1wiIGRhdGEtb2F4X2ltZ19sb2FkPVwiZG9uZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiaW1nW2FsdD1cIlBlaXNhaiBkaW4gTXVuyJtpaSBSZXRlemF0XCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJuby1mb2N1c2FibGUtY29udGVudCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgZG9lcyBub3QgaGF2ZSBmb2N1c2FibGUgZGVzY2VuZGFudHMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aHI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzMSAgPiAub2F4X2NvbF9mdWxsd2lkdGhfZnVsbC5vYXhfY29sX29mZnNldF9uZWdfZnVsbC5vYXhfbWFyZ19ib3R0b21fNDQgPiBociIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibm8tZm9jdXNhYmxlLWNvbnRlbnQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGRvZXMgbm90IGhhdmUgZm9jdXNhYmxlIGRlc2NlbmRhbnRzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGltZyBzcmM9XCJodHRwczovL29hZC5vdXRkb29yYWN0aXZlLmNvbS9hcGkvc3RhdGljbWFwP2k9MzQ0MjA0MTImYW1wO3NpemU9bG9jYXRvciZhbXA7cHJvamVjdD1vYWQtcm9tYW5pYXRyYXZlbFwiIGFsdD1cIkhhcnTEgyAvIFN0YcibaXVuZWEgyJlpIFDDonJ0aWEgU2VtZW5pY1wiIHdpZHRoPVwiNDAwXCIgaGVpZ2h0PVwiMjI1XCIgZGF0YS1vYXhfaW1nX2xvYWQ9XCJkb25lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM0NDIwNDEyID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IC5vYXhfc25pcHBldF9sb2NhdG9yLm9heF9pbWFnZV9zbmlwcGV0X2xvY2F0b3IgPiBvdXRwdXRbZGF0YS1vYXhfbGF6eV9sb2FkPVwiZG9uZVwiXSA+IGltZ1t3aWR0aD1cIjQwMFwiXVtoZWlnaHQ9XCIyMjVcIl1bZGF0YS1vYXhfaW1nX2xvYWQ9XCJkb25lXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJuby1mb2N1c2FibGUtY29udGVudCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgZG9lcyBub3QgaGF2ZSBmb2N1c2FibGUgZGVzY2VuZGFudHMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHNyYz1cImh0dHBzOi8vb2FkLm91dGRvb3JhY3RpdmUuY29tL2FwaS9zdGF0aWNtYXA/aT0zNTc0NjIzNyZhbXA7c2l6ZT1sb2NhdG9yJmFtcDtwcm9qZWN0PW9hZC1yb21hbmlhdHJhdmVsXCIgYWx0PVwiSGFydMSDIC8gU3RhyJtpdW5lYSBTdHJhamFcIiB3aWR0aD1cIjQwMFwiIGhlaWdodD1cIjIyNVwiIGRhdGEtb2F4X2ltZ19sb2FkPVwiZG9uZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiaW1nW2FsdD1cIkhhcnTEgyAvIFN0YcibaXVuZWEgU3RyYWphXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJuby1mb2N1c2FibGUtY29udGVudCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgZG9lcyBub3QgaGF2ZSBmb2N1c2FibGUgZGVzY2VuZGFudHMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aHI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzNCAgPiAub2F4X2NvbF9mdWxsd2lkdGhfZnVsbC5vYXhfY29sX29mZnNldF9uZWdfZnVsbC5vYXhfbWFyZ19ib3R0b21fNDQgPiBociIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibm8tZm9jdXNhYmxlLWNvbnRlbnQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGRvZXMgbm90IGhhdmUgZm9jdXNhYmxlIGRlc2NlbmRhbnRzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGhyPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzcgID4gLm9heF9jb2xfZnVsbHdpZHRoX2Z1bGwub2F4X2NvbF9vZmZzZXRfbmVnX2Z1bGwub2F4X21hcmdfYm90dG9tXzQ0ID4gaHIiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogIm5vLWZvY3VzYWJsZS1jb250ZW50IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBkb2VzIG5vdCBoYXZlIGZvY3VzYWJsZSBkZXNjZW5kYW50cyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxocj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDMxIDAgPiAub2F4X2NvbF9mdWxsd2lkdGhfZnVsbC5vYXhfY29sX29mZnNldF9uZWdfZnVsbC5vYXhfbWFyZ19ib3R0b21fNDQgPiBociIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibm8tZm9jdXNhYmxlLWNvbnRlbnQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGRvZXMgbm90IGhhdmUgZm9jdXNhYmxlIGRlc2NlbmRhbnRzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGhyPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzEgMiA+IC5vYXhfY29sX2Z1bGx3aWR0aF9mdWxsLm9heF9jb2xfb2Zmc2V0X25lZ19mdWxsLm9heF9tYXJnX2JvdHRvbV80NCA+IGhyIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJuby1mb2N1c2FibGUtY29udGVudCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgZG9lcyBub3QgaGF2ZSBmb2N1c2FibGUgZGVzY2VuZGFudHMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIGNsYXNzPVwiXCIgc3JjPVwiaHR0cHM6Ly9yZXMyLm9hc3RhdGljLmNvbS92My9hcHBTdG9yZV9idXR0b25AMngucG5nPzZjMzZhY2UxXCIgaGVpZ2h0PVwiNDRweFwiIGFsdD1cIkFwcCBTdG9yZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiaW1nW2FsdD1cIkFwcCBTdG9yZVwiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibm8tZm9jdXNhYmxlLWNvbnRlbnQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGRvZXMgbm90IGhhdmUgZm9jdXNhYmxlIGRlc2NlbmRhbnRzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGltZyBjbGFzcz1cIlwiIHNyYz1cImh0dHBzOi8vcmVzLm9hc3RhdGljLmNvbS92My9nb29nbGVQbGF5X2J1dHRvbkAyeC5wbmc/NmMzNmFjZTFcIiBoZWlnaHQ9XCI0NHB4XCIgYWx0PVwiR29vZ2xlIFBsYXkgU3RvcmVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImltZ1thbHQ9XCJHb29nbGUgUGxheSBTdG9yZVwiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAibm8tZm9jdXNhYmxlLWNvbnRlbnQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGRvZXMgbm90IGhhdmUgZm9jdXNhYmxlIGRlc2NlbmRhbnRzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGltZyBzcmM9XCJodHRwczovL3Jlcy5vYXN0YXRpYy5jb20vdGhlbWVzL29hZC1yb21hbmlhdHJhdmVsL2Nzcy9pbWFnZXMvRVUtUk8tbG9nby5wbmdcIiBzdHlsZT1cInBvc2l0aW9uOiBhYnNvbHV0ZTsgd2lkdGg6IDM1JTsgbGVmdDogMzJweDsgYm90dG9tOiAzN3B4O1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9wb3J0YWxfd3JhcHBlciA+IGltZyIKICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJwYWdlLWhhcy1oZWFkaW5nLW9uZSIsCiAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0LnNlbWFudGljcyIsCiAgICAgICAgImJlc3QtcHJhY3RpY2UiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmUgdGhhdCB0aGUgcGFnZSwgb3IgYXQgbGVhc3Qgb25lIG9mIGl0cyBmcmFtZXMgY29udGFpbnMgYSBsZXZlbC1vbmUgaGVhZGluZyIsCiAgICAgICJoZWxwIjogIlBhZ2Ugc2hvdWxkIGNvbnRhaW4gYSBsZXZlbC1vbmUgaGVhZGluZyIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L3BhZ2UtaGFzLWhlYWRpbmctb25lP2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJwYWdlLWhhcy1oZWFkaW5nLW9uZSIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJodG1sIjogIjxoMSBjbGFzcz1cIm9heF9ib2xkIG9heF9jdXN0b21fZm9udFwiPlxuXHRcdFx0XHRcdFx0U3RhaSBhY3RpdiDImWkgw65uIHNlem9udWwgcmVjZTogQXZlbnR1cmkgyJlpIHBlaXNhamUgZGUgdmlzIGlhcm5hPC9oMT4iLAogICAgICAgICAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAgICAgICAgICJoMSIKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiUGFnZSBoYXMgYXQgbGVhc3Qgb25lIGxldmVsLW9uZSBoZWFkaW5nIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGh0bWwgbGFuZz1cInJvXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJodG1sIgogICAgICAgICAgXQogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImlkIjogInByZXNlbnRhdGlvbi1yb2xlLWNvbmZsaWN0IiwKICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQuYXJpYSIsCiAgICAgICAgImJlc3QtcHJhY3RpY2UiLAogICAgICAgICJBQ1QiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbGVtZW50cyBtYXJrZWQgYXMgcHJlc2VudGF0aW9uYWwgc2hvdWxkIG5vdCBoYXZlIGdsb2JhbCBBUklBIG9yIHRhYmluZGV4IHRvIGVuc3VyZSBhbGwgc2NyZWVuIHJlYWRlcnMgaWdub3JlIHRoZW0iLAogICAgICAiaGVscCI6ICJFbnN1cmUgZWxlbWVudHMgbWFya2VkIGFzIHByZXNlbnRhdGlvbmFsIGFyZSBjb25zaXN0ZW50bHkgaWdub3JlZCIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L3ByZXNlbnRhdGlvbi1yb2xlLWNvbmZsaWN0P2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaXMtZWxlbWVudC1mb2N1c2FibGUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtaW5vciIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBpcyBmb2N1c2FibGUuIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy1nbG9iYWwtYXJpYS1hdHRyaWJ1dGUiLAogICAgICAgICAgICAgICJkYXRhIjogW10sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibWlub3IiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIGdsb2JhbCBBUklBIGF0dHJpYnV0ZXM6ICIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGltZyBzcmM9XCJodHRwczovL3JlczEub2FzdGF0aWMuY29tL2ljb25zL29hL3NraVJlc29ydC9ibHVlX3Zpb2xldC9za2lSZXNvcnQuc3F1YXJlX3ZlY3Rvci5zdmdcIiBjbGFzcz1cIm9heF9pbWFnZV9zbmlwcGV0X2NhdGVnb3J5X2ljb25cIiBhbHQ9XCJcIiBkYXRhLW9heF9pbWdfbG9hZD1cImRvbmVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtMzQ0MjA0MTIgPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gb3V0cHV0W2RhdGEtb2F4X2xhenlfbG9hZD1cImRvbmVcIl06bnRoLWNoaWxkKDEpID4gLm9heF9pbWFnZV9zbmlwcGV0X2NhdGVnb3J5X2ljb25bYWx0PVwiXCJdW2RhdGEtb2F4X2ltZ19sb2FkPVwiZG9uZVwiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImlzLWVsZW1lbnQtZm9jdXNhYmxlIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibWlub3IiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgZm9jdXNhYmxlLiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtZ2xvYmFsLWFyaWEtYXR0cmlidXRlIiwKICAgICAgICAgICAgICAiZGF0YSI6IFtdLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1pbm9yIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBnbG9iYWwgQVJJQSBhdHRyaWJ1dGVzOiAiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbWcgd2lkdGg9XCI0MjBcIiBoZWlnaHQ9XCIyMzdcIiBzcmM9XCJodHRwczovL2ltZy5vYXN0YXRpYy5jb20vaW1nMi8zNDQyMDQ5MC80MjB4MjM3ci92YXJpYW50LmpwZ1wiIHNyY3NldD1cImh0dHBzOi8vaW1nLm9hc3RhdGljLmNvbS9pbWcyLzM0NDIwNDkwLzQyMHgyMzdyL3ZhcmlhbnQuanBnIDQyMHcsaHR0cHM6Ly9pbWcub2FzdGF0aWMuY29tL2ltZzIvMzQ0MjA0OTAvNzI4eDQxMHIvdmFyaWFudC5qcGcgNzI4dyxodHRwczovL2ltZy5vYXN0YXRpYy5jb20vaW1nMi8zNDQyMDQ5MC8xMDgweDYxMHIvdmFyaWFudC5qcGcgMTA4MHdcIiBhbHQ9XCJcIiBzaXplcz1cIihtaW4td2lkdGg6IDgwMHB4KSA2MDBweCwgKG1pbi13aWR0aDogNjQwcHgpIDUwdncsIDEwMHZ3XCIgZGF0YS1vYXhfaW1nX2xvYWQ9XCJkb25lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM0NDIwNDEyID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IG91dHB1dFtkYXRhLW9heF9sYXp5X2xvYWQ9XCJkb25lXCJdOm50aC1jaGlsZCgzKSA+IGltZ1thbHQ9XCJcIl1bd2lkdGg9XCI0MjBcIl1baGVpZ2h0PVwiMjM3XCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFtdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiaXMtZWxlbWVudC1mb2N1c2FibGUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtaW5vciIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBpcyBmb2N1c2FibGUuIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy1nbG9iYWwtYXJpYS1hdHRyaWJ1dGUiLAogICAgICAgICAgICAgICJkYXRhIjogW10sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibWlub3IiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIGdsb2JhbCBBUklBIGF0dHJpYnV0ZXM6ICIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGltZyBzcmM9XCJodHRwczovL3JlczEub2FzdGF0aWMuY29tL2ljb25zL29hL3NraVJlc29ydC9ibHVlX3Zpb2xldC9za2lSZXNvcnQuc3F1YXJlX3ZlY3Rvci5zdmdcIiBjbGFzcz1cIm9heF9pbWFnZV9zbmlwcGV0X2NhdGVnb3J5X2ljb25cIiBhbHQ9XCJcIiBkYXRhLW9heF9pbWdfbG9hZD1cImRvbmVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtMzU3NDYyMzcgPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gb3V0cHV0W2RhdGEtb2F4X2xhenlfbG9hZD1cImRvbmVcIl06bnRoLWNoaWxkKDEpID4gLm9heF9pbWFnZV9zbmlwcGV0X2NhdGVnb3J5X2ljb25bYWx0PVwiXCJdW2RhdGEtb2F4X2ltZ19sb2FkPVwiZG9uZVwiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImlzLWVsZW1lbnQtZm9jdXNhYmxlIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibWlub3IiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaXMgZm9jdXNhYmxlLiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJoYXMtZ2xvYmFsLWFyaWEtYXR0cmlidXRlIiwKICAgICAgICAgICAgICAiZGF0YSI6IFtdLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1pbm9yIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGhhcyBnbG9iYWwgQVJJQSBhdHRyaWJ1dGVzOiAiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbWcgd2lkdGg9XCI0MjBcIiBoZWlnaHQ9XCIyMzdcIiBzcmM9XCJodHRwczovL2ltZzIub2FzdGF0aWMuY29tL2ltZzIvMzU3NDYzMjgvNDIweDIzN3IvdmFyaWFudC5qcGdcIiBzcmNzZXQ9XCJodHRwczovL2ltZzIub2FzdGF0aWMuY29tL2ltZzIvMzU3NDYzMjgvNDIweDIzN3IvdmFyaWFudC5qcGcgNDIwdyxodHRwczovL2ltZzIub2FzdGF0aWMuY29tL2ltZzIvMzU3NDYzMjgvNzI4eDQxMHIvdmFyaWFudC5qcGcgNzI4dyxodHRwczovL2ltZzIub2FzdGF0aWMuY29tL2ltZzIvMzU3NDYzMjgvMTA4MHg2MTByL3ZhcmlhbnQuanBnIDEwODB3XCIgYWx0PVwiXCIgc2l6ZXM9XCIobWluLXdpZHRoOiA4MDBweCkgNjAwcHgsIChtaW4td2lkdGg6IDY0MHB4KSA1MHZ3LCAxMDB2d1wiIGRhdGEtb2F4X2ltZ19sb2FkPVwiZG9uZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC0zNTc0NjIzNyA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiBvdXRwdXRbZGF0YS1vYXhfbGF6eV9sb2FkPVwiZG9uZVwiXTpudGgtY2hpbGQoMykgPiBpbWdbYWx0PVwiXCJdW3dpZHRoPVwiNDIwXCJdW2hlaWdodD1cIjIzN1wiXSIKICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5rZXlib2FyZCIsCiAgICAgICAgImJlc3QtcHJhY3RpY2UiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmVzIGFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIsCiAgICAgICJoZWxwIjogIkFsbCBwYWdlIGNvbnRlbnQgc2hvdWxkIGJlIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9yZWdpb24/YXBwbGljYXRpb249cGxheXdyaWdodCIsCiAgICAgICJub2RlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxuYXY+XG5cdDxhIGhyZWY9XCIjbWFpbkNvbnRlbnRcIiBjbGFzcz1cIm9heF9za2lwTGluayBvYXhfdmlzdWFsbHlfaGlkZGVuXCI+U2FyaSBsYSBjb27Im2ludXRcbjwvYT5cbjwvbmF2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAibmF2IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiI21haW5Db250ZW50XCIgY2xhc3M9XCJvYXhfc2tpcExpbmsgb2F4X3Zpc3VhbGx5X2hpZGRlblwiPlNhcmkgbGEgY29uyJtpbnV0XG48L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X3NraXBMaW5rIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2FkX2xlYWRlcmJvYXJkXCI+PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2FkX2xlYWRlcmJvYXJkIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aGVhZGVyPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiaGVhZGVyIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X291dGVyX3dyYXBwZXIgb2F4X3JlbGF0aXZlIG9heF9jZW50ZXJlZCBvYXhfaGVhZGVyX3dyYXBwZXJcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfaGVhZGVyX3dyYXBwZXIiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfbG9nb19oZWFkXCI+XG5cdFx0XHRcdFx0XHRcdDxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vXCIgdGl0bGU9XCJjxIN0cmUgcGFnaW5hIGRlIHN0YXJ0XCI+XG5cdFx0XHRcdFx0XHRcdFx0PGltZyBzcmM9XCJodHRwczovL3Jlcy5vYXN0YXRpYy5jb20vdGhlbWVzL29hZC1yb21hbmlhdHJhdmVsL2Nzcy9pbWFnZXMvbG9nb19yb21hbmlhLnBuZz90cz0xNzA2MTc2NTU3NTMwJmFtcDs2YzM2YWNlMVwiIGFsdD1cIkxvZ29yb21hbmlhdHJhdmVsLmd1aWRlXCI+XG5cdFx0XHRcdFx0XHRcdDwvYT5cblx0XHRcdFx0XHRcdDwvZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9sb2dvX2hlYWQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vXCIgdGl0bGU9XCJjxIN0cmUgcGFnaW5hIGRlIHN0YXJ0XCI+XG5cdFx0XHRcdFx0XHRcdFx0PGltZyBzcmM9XCJodHRwczovL3Jlcy5vYXN0YXRpYy5jb20vdGhlbWVzL29hZC1yb21hbmlhdHJhdmVsL2Nzcy9pbWFnZXMvbG9nb19yb21hbmlhLnBuZz90cz0xNzA2MTc2NTU3NTMwJmFtcDs2YzM2YWNlMVwiIGFsdD1cIkxvZ29yb21hbmlhdHJhdmVsLmd1aWRlXCI+XG5cdFx0XHRcdFx0XHRcdDwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImFbdGl0bGU9XCJjxIN0cmUgcGFnaW5hIGRlIHN0YXJ0XCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHNyYz1cImh0dHBzOi8vcmVzLm9hc3RhdGljLmNvbS90aGVtZXMvb2FkLXJvbWFuaWF0cmF2ZWwvY3NzL2ltYWdlcy9sb2dvX3JvbWFuaWEucG5nP3RzPTE3MDYxNzY1NTc1MzAmYW1wOzZjMzZhY2UxXCIgYWx0PVwiTG9nb3JvbWFuaWF0cmF2ZWwuZ3VpZGVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImltZ1thbHQ9XCJMb2dvcm9tYW5pYXRyYXZlbC5ndWlkZVwiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9tYWluX21lbnVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfbWFpbl9tZW51IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8dWwgY2xhc3M9XCJvYXhfaGVhZGVyX25hdlwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9oZWFkZXJfbmF2IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGk+PGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9naGlkLWRlLWNhbGF0b3JpZS9yb21hbmlhLzEwMzY5OTEvXCIgdGl0bGU9XCJHaGlkIHR1cmlzdGljXCI+R2hpZCB0dXJpc3RpYzwvYT48L2xpPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9oZWFkZXJfbmF2ID4gbGk6bnRoLWNoaWxkKDEpIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL2doaWQtZGUtY2FsYXRvcmllL3JvbWFuaWEvMTAzNjk5MS9cIiB0aXRsZT1cIkdoaWQgdHVyaXN0aWNcIj5HaGlkIHR1cmlzdGljPC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9oZWFkZXJfbmF2ID4gbGk6bnRoLWNoaWxkKDEpID4gYVt0aXRsZT1cIkdoaWQgdHVyaXN0aWNcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaT48YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL3BvaXMvXCIgdGl0bGU9XCJEZXN0aW5hyJtpaVwiPkRlc3RpbmHIm2lpPC9hPjwvbGk+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2hlYWRlcl9uYXYgPiBsaTpudGgtY2hpbGQoMikiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vcG9pcy9cIiB0aXRsZT1cIkRlc3RpbmHIm2lpXCI+RGVzdGluYcibaWk8L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJhW3RpdGxlPVwiRGVzdGluYcibaWlcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaT48YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL3RvdXJzL1wiIHRpdGxlPVwiVHJhc2VlXCI+VHJhc2VlPC9hPjwvbGk+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2hlYWRlcl9uYXYgPiBsaTpudGgtY2hpbGQoMykiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vdG91cnMvXCIgdGl0bGU9XCJUcmFzZWVcIj5UcmFzZWU8L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJhW3RpdGxlPVwiVHJhc2VlXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGk+PGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9zb3VyY2Uvcm9tYW5pYXRyYXZlbC5ndWlkZS8zMzY4MDgxNi9cIiB0aXRsZT1cIkRlc3ByZSBub2lcIj5EZXNwcmUgbm9pPC9hPjwvbGk+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2hlYWRlcl9uYXYgPiBsaTpudGgtY2hpbGQoNCkiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vc291cmNlL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvMzM2ODA4MTYvXCIgdGl0bGU9XCJEZXNwcmUgbm9pXCI+RGVzcHJlIG5vaTwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImFbdGl0bGU9XCJEZXNwcmUgbm9pXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2hlYWRlcl9yaWdodFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9oZWFkZXJfcmlnaHQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgaWQ9XCJvYXhfaGVhZGVyX3Byb2ZpbGVcIiBjbGFzcz1cIm9heF9sb2dpbl9mbHlvdXRfY29uXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjb2F4X2hlYWRlcl9wcm9maWxlIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL2NvbW11bml0eS9zaWduLWluLmh0bWxcIiBjbGFzcz1cIm9heC1sb2dpbi1jb25uZWN0b3ItbGluayBvYXhfYnRuIG9heF9idG5fbGFyZ2Ugb2F4X2J0bl9jdXN0b20gb2F4X2hlYWRlcl9idXR0b24gb2F4X21hcmdfdG9wXzJcIj7Djm5yZWdpc3RyZWF6xIMtdGUgc2F1IGF1dGVudGlmaWPEgy10ZTwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtbG9naW4tY29ubmVjdG9yLWxpbmsiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfbGFuZ3VhZ2Vfd3JhcFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9sYW5ndWFnZV93cmFwIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8c3Ryb25nIGNsYXNzPVwib2F4X3Zpc3VhbGx5X2hpZGRlblwiPkFsZWdlIGxpbWJhPC9zdHJvbmc+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2xhbmd1YWdlX3dyYXAgPiAub2F4X3Zpc3VhbGx5X2hpZGRlbiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9sYW5ndWFnZV9zZWxlY3Rpb25cIj48YSBjbGFzcz1cIm9heF9zZWxlY3Rpb24gb2F4X2hlYWRlcl9idXR0b24gb2F4X2J0biBvYXhfYnRuX21lZGl1bSBvYXhfYnRuX2RhcmtcIj5STzwvYT48dWw+PGxpIGlkPVwib2F4LWxhbmctZW5cIj48YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL2VuL1wiPkVuZ2xpc2g8L2E+PC9saT48bGkgaWQ9XCJvYXgtbGFuZy1kZVwiPjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvZGUvXCI+RGV1dHNjaDwvYT48L2xpPjwvdWw+PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2xhbmd1YWdlX3NlbGVjdGlvbiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgY2xhc3M9XCJvYXhfc2VsZWN0aW9uIG9heF9oZWFkZXJfYnV0dG9uIG9heF9idG4gb2F4X2J0bl9tZWRpdW0gb2F4X2J0bl9kYXJrXCI+Uk88L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X3NlbGVjdGlvbiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHVsPjxsaSBpZD1cIm9heC1sYW5nLWVuXCI+PGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9lbi9cIj5FbmdsaXNoPC9hPjwvbGk+PGxpIGlkPVwib2F4LWxhbmctZGVcIj48YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL2RlL1wiPkRldXRzY2g8L2E+PC9saT48L3VsPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9sYW5ndWFnZV9zZWxlY3Rpb24gPiB1bCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpIGlkPVwib2F4LWxhbmctZW5cIj48YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL2VuL1wiPkVuZ2xpc2g8L2E+PC9saT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNvYXgtbGFuZy1lbiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9lbi9cIj5FbmdsaXNoPC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI29heC1sYW5nLWVuID4gYSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpIGlkPVwib2F4LWxhbmctZGVcIj48YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL2RlL1wiPkRldXRzY2g8L2E+PC9saT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNvYXgtbGFuZy1kZSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9kZS9cIj5EZXV0c2NoPC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI29heC1sYW5nLWRlID4gYSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGJ1dHRvbiBjbGFzcz1cIm9heF9idG4gb2F4X2ZsIG9heF9ib2FyZF90b2dnbGUgb2F4X3BvaW50ZXIgb2F4LWhlYWRlci1ib2FyZC10b2dnbGUgb2F4LWhlYWRlci1ib2FyZC10b2dnbGUtYnRuXCIgYXJpYS1sYWJlbD1cIkRlc2NoaWRlIG1lbml1bFwiIGRhdGEtY2xvc2UtbGFiZWw9XCLDjm5jaGlkZSBtZW5pdWxcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfYm9hcmRfdG9nZ2xlIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2JvYXJkX3RvZ2dsZV9pY29uXCI+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8c3Bhbj48L3NwYW4+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8c3Bhbj48L3NwYW4+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8c3Bhbj48L3NwYW4+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8c3Bhbj48L3NwYW4+XG5cdFx0XHRcdFx0XHRcdFx0PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2JvYXJkX3RvZ2dsZV9pY29uIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8c3Bhbj48L3NwYW4+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2JvYXJkX3RvZ2dsZV9pY29uID4gc3BhbjpudGgtY2hpbGQoMSkiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxzcGFuPjwvc3Bhbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfYm9hcmRfdG9nZ2xlX2ljb24gPiBzcGFuOm50aC1jaGlsZCgyKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHNwYW4+PC9zcGFuPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9ib2FyZF90b2dnbGVfaWNvbiA+IHNwYW46bnRoLWNoaWxkKDMpIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8c3Bhbj48L3NwYW4+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJzcGFuOm50aC1jaGlsZCg0KSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9oZWFkZXJfc2VhcmNoXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2hlYWRlcl9zZWFyY2giCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfaGVhZGVyX3NlYXJjaF9jb250XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2hlYWRlcl9zZWFyY2hfY29udCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9mb3JtIG9heF9zZWFyY2hmb3JtX2hlYWRlciBvYXhfZmxcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfZm9ybSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGZvcm0gbWV0aG9kPVwiZ2V0XCIgYWN0aW9uPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL3NlYXJjaC9cIiBuYW1lPVwic2VhcmNoZm9ybVwiIGFjY2VwdC1jaGFyc2V0PVwiVVRGLThcIiBlbmN0eXBlPVwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJmb3JtIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW5wdXQgdGFiaW5kZXg9XCItMVwiIHR5cGU9XCJzdWJtaXRcIiBhcmlhLWxhYmVsPVwiUG9ybmXImXRlIGPEg3V0YXJlYVwiIGNsYXNzPVwib2F4X2ljb25fZm9udCBvYXhfZm9udF9sYXJnZTI4XCIgdmFsdWU9XCLwn5SNXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2ljb25fZm9udCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxhYmVsIGNsYXNzPVwib2F4X3Zpc3VhbGx5X2hpZGRlblwiIGZvcj1cInNlYXJjaEZpZWxkXCI+Q8SDdXRhcmU8L2xhYmVsPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAibGFiZWwiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbnB1dCB0YWJpbmRleD1cIi0xXCIgaWQ9XCJzZWFyY2hGaWVsZFwiIHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJvYXhfc2VhcmNoZm9ybV90ZXh0IG9heC1zZWFyY2hmb3JtLXRleHRcIiBuYW1lPVwicVwiIHZhbHVlPVwiXCIgcGxhY2Vob2xkZXI9XCJDxIN1dGFyZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI3NlYXJjaEZpZWxkIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YnV0dG9uIGNsYXNzPVwib2F4X2J0biBvYXhfc2VhcmNoX3RvZ2dsZSBvYXhfcG9pbnRlciBvYXhfZmwgb2F4LWhlYWRlci1iYXItdG9nZ2xlIG9heC1oZWFkZXItYmFyLXRvZ2dsZS1vcGVuXCIgYXJpYS1sYWJlbD1cIkRlc2NoaWRlIGPEg3V0YXJlYVwiPlxuXHRcdFx0XHRcdFx0ICBcdFx0XHQ8c3BhbiBjbGFzcz1cIm9heC1pY29uLW1hZ25pZmllciBvYXhfZm9udF9sYXJnZTI4XCI+PC9zcGFuPlxuXHRcdFx0XHRcdFx0ICBcdFx0PC9idXR0b24+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWhlYWRlci1iYXItdG9nZ2xlLW9wZW4iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxzcGFuIGNsYXNzPVwib2F4LWljb24tbWFnbmlmaWVyIG9heF9mb250X2xhcmdlMjhcIj48L3NwYW4+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWljb24tbWFnbmlmaWVyIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X3BvcnRhbF9zdGFnZSBvYXhfcGFkX3RvcF8xIG9heC1zY3JvbGwtY29udGFpbmVyXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X3BvcnRhbF9zdGFnZSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9jb250ZW50X3NsaWRlcl9mdWxsIG9heF9zbGlkZV9zbmlwcGV0X2Z1bGwgb2F4X21hcmdfdG9wX25lZ18xIG9heF9yZWxhdGl2ZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9jb250ZW50X3NsaWRlcl9mdWxsIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aDEgY2xhc3M9XCJvYXhfYm9sZCBvYXhfY3VzdG9tX2ZvbnRcIj5cblx0XHRcdFx0XHRcdFN0YWkgYWN0aXYgyJlpIMOubiBzZXpvbnVsIHJlY2U6IEF2ZW50dXJpIMiZaSBwZWlzYWplIGRlIHZpcyBpYXJuYTwvaDE+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJoMSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHNlY3Rpb24gY2xhc3M9XCJvYXhfZ3JpZF9mdWxsIG9heF9jb250ZW50X3NsaWRlciBvYXhfY29udGVudF9zbGlkZXJfaW1hZ2VzIG9heC1jb250ZW50LXNsaWRlci1pbWFnZXMgb2F4LWNvbnRlbnQtc2xpZGVyLWNvbnRcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfZ3JpZF9mdWxsIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8dWwgY2xhc3M9XCJvYXgtY29udGVudC1zbGlkZXItc2xpZGVzICBvYXhfaW1nX3JlbF9wYW5vcmFtYVwiIHN0eWxlPVwicG9zaXRpb246IHJlbGF0aXZlOyB6LWluZGV4OiAxOyBoZWlnaHQ6IDQ3MS45cHg7XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWNvbnRlbnQtc2xpZGVyLXNsaWRlcyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpIGNsYXNzPVwib2F4X3BvaW50ZXJcIiBzdHlsZT1cInBvc2l0aW9uOiBhYnNvbHV0ZTsgei1pbmRleDogNDsgb3BhY2l0eTogMTtcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfcG9pbnRlcjpudGgtY2hpbGQoMSkiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfc2xpZGVfc25pcHBldCBvYXgtc25pcHBldHMtc2xpZGUtaW1hZ2Ugb2F4LWlkIG9heC1pZC0yNTk0MzQwM1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC0yNTk0MzQwMyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heC1kb21hdy1yZXN0cmljdCBvYXgtb25lLWltYWdlXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTI1OTQzNDAzID4gLm9heC1kb21hdy1yZXN0cmljdC5vYXgtb25lLWltYWdlIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHNyYz1cImh0dHBzOi8vaW1nMi5vYXN0YXRpYy5jb20vaW1nMi8yNTk0MzQwMy8xMDgweDQxMHIvdmFyaWFudC5qcGdcIiB3aWR0aD1cIjEwODBcIiBoZWlnaHQ9XCI0MTBcIiBzcmNzZXQ9XCJodHRwczovL2ltZzIub2FzdGF0aWMuY29tL2ltZzIvMjU5NDM0MDMvMTA4MHg0MTByL3ZhcmlhbnQuanBnIDEwODB3LGh0dHBzOi8vaW1nMi5vYXN0YXRpYy5jb20vaW1nMi8yNTk0MzQwMy8xMjUweDQ3NXIvdmFyaWFudC5qcGcgMTI1MHcsaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzI1OTQzNDAzLzIxNjB4ODIxci92YXJpYW50LmpwZyAyMTYwdyxodHRwczovL2ltZzIub2FzdGF0aWMuY29tL2ltZzIvMjU5NDM0MDMvMjUwMHg5NTByL3ZhcmlhbnQuanBnIDI1MDB3XCIgc2l6ZXM9XCIxMDB2d1wiIGFsdD1cIlByaXZlbGnImXRlIHNwcmUgU2VtZW5pY1wiIGNsYXNzPVwib2F4X3dpZHRoX2Z1bGxcIiBkYXRhLWltZ2NvdW50PVwiMVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiaW1nW2FsdD1cIlByaXZlbGnImXRlIHNwcmUgU2VtZW5pY1wiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9zbGlkZV9zbmlwcGV0X2NsYWltXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTI1OTQzNDAzID4gLm9heC1kb21hdy1yZXN0cmljdC5vYXgtb25lLWltYWdlID4gLm9heF9zbGlkZV9zbmlwcGV0X2NsYWltIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2ZvbnRfc21hbGxcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtMjU5NDM0MDMgPiAub2F4LWRvbWF3LXJlc3RyaWN0Lm9heC1vbmUtaW1hZ2UgPiAub2F4X3NsaWRlX3NuaXBwZXRfY2xhaW0gPiAub2F4X2ZvbnRfc21hbGwiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXgtd3JhcC1jbGFpbSBvYXgtY2xhaW0tMjU5NDM0MDNcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtY2xhaW0tMjU5NDM0MDMiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGNsYXNzPVwib2F4X3VuZGVybGluZSBvYXhfZm9udF9ncmV5X2RhcmtcIiBocmVmPVwiaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LzQuMC9kZWVkLmVuXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9mb2xsb3cgbm9vcGVuZXJcIj5DQyBCWTwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtY2xhaW0tMjU5NDM0MDMgPiAub2F4LW9uZS1pbWFnZS1hdXRob3Iub2F4X2ZyLm9heF9oYWxmID4gLm9heF91bmRlcmxpbmUub2F4X2ZvbnRfZ3JleV9kYXJrW3JlbD1cIm5vZm9sbG93IG5vb3BlbmVyXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGkgY2xhc3M9XCJvYXhfcG9pbnRlclwiIHN0eWxlPVwicG9zaXRpb246IGFic29sdXRlOyB6LWluZGV4OiAyOyBvcGFjaXR5OiAwO1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1jb250ZW50LXNsaWRlci1zbGlkZXMgPiAub2F4X3BvaW50ZXI6bnRoLWNoaWxkKDIpIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X3NsaWRlX3NuaXBwZXQgb2F4LXNuaXBwZXRzLXNsaWRlLWltYWdlIG9heC1pZCBvYXgtaWQtNjQ1Nzk5MjlcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNjQ1Nzk5MjkiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXgtZG9tYXctcmVzdHJpY3Qgb2F4LW9uZS1pbWFnZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC02NDU3OTkyOSA+IC5vYXgtZG9tYXctcmVzdHJpY3Qub2F4LW9uZS1pbWFnZSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGltZyBzcmM9XCJodHRwczovL2ltZzMub2FzdGF0aWMuY29tL2ltZzIvNjQ1Nzk5MjkvMTA4MHg0MTByL3ZhcmlhbnQuanBnXCIgd2lkdGg9XCIxMDgwXCIgaGVpZ2h0PVwiNDEwXCIgc3Jjc2V0PVwiaHR0cHM6Ly9pbWczLm9hc3RhdGljLmNvbS9pbWcyLzY0NTc5OTI5LzEwODB4NDEwci92YXJpYW50LmpwZyAxMDgwdyxodHRwczovL2ltZzMub2FzdGF0aWMuY29tL2ltZzIvNjQ1Nzk5MjkvMTI1MHg0NzVyL3ZhcmlhbnQuanBnIDEyNTB3LGh0dHBzOi8vaW1nMy5vYXN0YXRpYy5jb20vaW1nMi82NDU3OTkyOS8yMTYweDgyMXIvdmFyaWFudC5qcGcgMjE2MHcsaHR0cHM6Ly9pbWczLm9hc3RhdGljLmNvbS9pbWcyLzY0NTc5OTI5LzI1MDB4OTUwci92YXJpYW50LmpwZyAyNTAwd1wiIHNpemVzPVwiMTAwdndcIiBhbHQ9XCJNdW7Im2lpIEbEg2fEg3JhyJlcIiBjbGFzcz1cIm9heF93aWR0aF9mdWxsXCIgZGF0YS1pbWdjb3VudD1cIjJcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImltZ1thbHQ9XCJNdW7Im2lpIEbEg2fEg3JhyJlcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfc2xpZGVfc25pcHBldF9jbGFpbVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC02NDU3OTkyOSA+IC5vYXgtZG9tYXctcmVzdHJpY3Qub2F4LW9uZS1pbWFnZSA+IC5vYXhfc2xpZGVfc25pcHBldF9jbGFpbSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9mb250X3NtYWxsXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTY0NTc5OTI5ID4gLm9heC1kb21hdy1yZXN0cmljdC5vYXgtb25lLWltYWdlID4gLm9heF9zbGlkZV9zbmlwcGV0X2NsYWltID4gLm9heF9mb250X3NtYWxsIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4LXdyYXAtY2xhaW0gb2F4LWNsYWltLTY0NTc5OTI5XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWNsYWltLTY0NTc5OTI5IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBjbGFzcz1cIm9heF91bmRlcmxpbmUgb2F4X2ZvbnRfZ3JleV9kYXJrXCIgaHJlZj1cImh0dHBzOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS80LjAvZGVlZC5lblwiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vZm9sbG93IG5vb3BlbmVyXCI+Q0MgQlk8L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWNsYWltLTY0NTc5OTI5ID4gLm9heC1vbmUtaW1hZ2UtYXV0aG9yLm9heF9mci5vYXhfaGFsZiA+IC5vYXhfdW5kZXJsaW5lLm9heF9mb250X2dyZXlfZGFya1tyZWw9XCJub2ZvbGxvdyBub29wZW5lclwiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpIGNsYXNzPVwib2F4X3BvaW50ZXJcIiBzdHlsZT1cInBvc2l0aW9uOiBhYnNvbHV0ZTsgei1pbmRleDogMjsgb3BhY2l0eTogMDtcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtY29udGVudC1zbGlkZXItc2xpZGVzID4gLm9heF9wb2ludGVyOm50aC1jaGlsZCgzKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9zbGlkZV9zbmlwcGV0IG9heC1zbmlwcGV0cy1zbGlkZS1pbWFnZSBvYXgtaWQgb2F4LWlkLTM1OTI5MTY4XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM1OTI5MTY4IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4LWRvbWF3LXJlc3RyaWN0IG9heC1vbmUtaW1hZ2VcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtMzU5MjkxNjggPiAub2F4LWRvbWF3LXJlc3RyaWN0Lm9heC1vbmUtaW1hZ2UiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbWcgc3JjPVwiaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzM1OTI5MTY4LzEwODB4NDEwci92YXJpYW50LmpwZ1wiIHdpZHRoPVwiMTA4MFwiIGhlaWdodD1cIjQxMFwiIHNyY3NldD1cImh0dHBzOi8vaW1nMi5vYXN0YXRpYy5jb20vaW1nMi8zNTkyOTE2OC8xMDgweDQxMHIvdmFyaWFudC5qcGcgMTA4MHcsaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzM1OTI5MTY4LzEyNTB4NDc1ci92YXJpYW50LmpwZyAxMjUwdyxodHRwczovL2ltZzIub2FzdGF0aWMuY29tL2ltZzIvMzU5MjkxNjgvMjE2MHg4MjFyL3ZhcmlhbnQuanBnIDIxNjB3LGh0dHBzOi8vaW1nMi5vYXN0YXRpYy5jb20vaW1nMi8zNTkyOTE2OC8yNTAweDk1MHIvdmFyaWFudC5qcGcgMjUwMHdcIiBzaXplcz1cIjEwMHZ3XCIgYWx0PVwiTXVudGVsZSBCxINpyJlvcmlpLCBDbHVqLCBSb21hbmlhXCIgY2xhc3M9XCJvYXhfd2lkdGhfZnVsbFwiIGRhdGEtaW1nY291bnQ9XCIzXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJpbWdbZGF0YS1pbWdjb3VudD1cIjNcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfc2xpZGVfc25pcHBldF9jbGFpbVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC0zNTkyOTE2OCA+IC5vYXgtZG9tYXctcmVzdHJpY3Qub2F4LW9uZS1pbWFnZSA+IC5vYXhfc2xpZGVfc25pcHBldF9jbGFpbSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9mb250X3NtYWxsXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM1OTI5MTY4ID4gLm9heC1kb21hdy1yZXN0cmljdC5vYXgtb25lLWltYWdlID4gLm9heF9zbGlkZV9zbmlwcGV0X2NsYWltID4gLm9heF9mb250X3NtYWxsIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4LXdyYXAtY2xhaW0gb2F4LWNsYWltLTM1OTI5MTY4XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWNsYWltLTM1OTI5MTY4IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBjbGFzcz1cIm9heF91bmRlcmxpbmUgb2F4X2ZvbnRfZ3JleV9kYXJrXCIgaHJlZj1cImh0dHBzOi8vY3JlYXRpdmVjb21tb25zLm9yZy9wdWJsaWNkb21haW4vemVyby8xLjAvZGVlZC5lblwiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vZm9sbG93IG5vb3BlbmVyXCI+Q0MwPC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1jbGFpbS0zNTkyOTE2OCA+IC5vYXgtb25lLWltYWdlLWF1dGhvci5vYXhfZnIub2F4X2hhbGYgPiAub2F4X3VuZGVybGluZS5vYXhfZm9udF9ncmV5X2RhcmtbcmVsPVwibm9mb2xsb3cgbm9vcGVuZXJcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaSBjbGFzcz1cIm9heF9wb2ludGVyXCIgc3R5bGU9XCJwb3NpdGlvbjogYWJzb2x1dGU7IHotaW5kZXg6IDI7IG9wYWNpdHk6IDA7XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X3BvaW50ZXI6bnRoLWNoaWxkKDQpIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X3NsaWRlX3NuaXBwZXQgb2F4LXNuaXBwZXRzLXNsaWRlLWltYWdlIG9heC1pZCBvYXgtaWQtNTUxMjQyMzlcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNTUxMjQyMzkiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXgtZG9tYXctcmVzdHJpY3Qgb2F4LW9uZS1pbWFnZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC01NTEyNDIzOSA+IC5vYXgtZG9tYXctcmVzdHJpY3Qub2F4LW9uZS1pbWFnZSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9zbGlkZV9pbWFnZV93cmFwcGVyIG9heF9zbGlkZV9pbWFnZV93cmFwcGVyX3doaXRlXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTU1MTI0MjM5ID4gLm9heC1kb21hdy1yZXN0cmljdC5vYXgtb25lLWltYWdlID4gLm9heF9zbGlkZV9pbWFnZV93cmFwcGVyLm9heF9zbGlkZV9pbWFnZV93cmFwcGVyX3doaXRlIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8b3V0cHV0IGNsYXNzPVwib2F4LW9uc2Nyb2xsLWltZy1sb2FkIGpzLW9uc2Nyb2xsLWltZ1wiIGRhdGEtb2F4X2xhenlfbG9hZD1cImRvbmVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfc2xpZGVfaW1hZ2Vfd3JhcHBlci5vYXhfc2xpZGVfaW1hZ2Vfd3JhcHBlcl93aGl0ZSA+IG91dHB1dFtkYXRhLW9heF9sYXp5X2xvYWQ9XCJkb25lXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHdpZHRoPVwiMTA4MFwiIGhlaWdodD1cIjQxMFwiIHNyYz1cImh0dHBzOi8vaW1nMy5vYXN0YXRpYy5jb20vaW1nMi81NTEyNDIzOS8xMDgweDQxMHIvdmFyaWFudC5qcGdcIiBzcmNzZXQ9XCJodHRwczovL2ltZzMub2FzdGF0aWMuY29tL2ltZzIvNTUxMjQyMzkvMTA4MHg0MTByL3ZhcmlhbnQuanBnIDEwODB3LGh0dHBzOi8vaW1nMy5vYXN0YXRpYy5jb20vaW1nMi81NTEyNDIzOS8xMjUweDQ3NXIvdmFyaWFudC5qcGcgMTI1MHcsaHR0cHM6Ly9pbWczLm9hc3RhdGljLmNvbS9pbWcyLzU1MTI0MjM5LzIxNjB4ODIxci92YXJpYW50LmpwZyAyMTYwdyxodHRwczovL2ltZzMub2FzdGF0aWMuY29tL2ltZzIvNTUxMjQyMzkvMjUwMHg5NTByL3ZhcmlhbnQuanBnIDI1MDB3XCIgYWx0PVwiUMSDZHVyZSBsw6JuZ8SDIE1lZGlhyJlcIiBzaXplcz1cIjEwMHZ3XCIgY2xhc3M9XCJvYXhfd2lkdGhfZnVsbFwiIGRhdGEtb2F4X2ltZ19sb2FkPVwiZG9uZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiaW1nW2FsdD1cIlDEg2R1cmUgbMOibmfEgyBNZWRpYciZXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X3NsaWRlX3NuaXBwZXRfY2xhaW1cIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNTUxMjQyMzkgPiAub2F4LWRvbWF3LXJlc3RyaWN0Lm9heC1vbmUtaW1hZ2UgPiAub2F4X3NsaWRlX3NuaXBwZXRfY2xhaW0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfZm9udF9zbWFsbFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC01NTEyNDIzOSA+IC5vYXgtZG9tYXctcmVzdHJpY3Qub2F4LW9uZS1pbWFnZSA+IC5vYXhfc2xpZGVfc25pcHBldF9jbGFpbSA+IC5vYXhfZm9udF9zbWFsbCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heC13cmFwLWNsYWltIG9heC1jbGFpbS01NTEyNDIzOVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1jbGFpbS01NTEyNDIzOSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgY2xhc3M9XCJvYXhfdW5kZXJsaW5lIG9heF9mb250X2dyZXlfZGFya1wiIGhyZWY9XCJodHRwczovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvYnktbmQvNC4wL2RlZWQuZW5cIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub2ZvbGxvdyBub29wZW5lclwiPkNDIEJZLU5EPC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1jbGFpbS01NTEyNDIzOSA+IC5vYXgtb25lLWltYWdlLWF1dGhvci5vYXhfZnIub2F4X2hhbGYgPiAub2F4X3VuZGVybGluZS5vYXhfZm9udF9ncmV5X2RhcmtbcmVsPVwibm9mb2xsb3cgbm9vcGVuZXJcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfcG9ydGFsX3dyYXBwZXIgb2F4X2NsZWFyZml4IG9heF9tYXJnX3RvcF9uZWdfMVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9wb3J0YWxfd3JhcHBlci5vYXhfbWFyZ190b3BfbmVnXzEub2F4X2NsZWFyZml4IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X291dGVyX3dyYXBwZXIgb2F4X2ZsXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X291dGVyX3dyYXBwZXIub2F4X2ZsIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bWFpbiBpZD1cIm1haW5Db250ZW50XCIgY2xhc3M9XCJvYXgtdG9wLWNvbnRcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNtYWluQ29udGVudCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF93cmFwcGVyIG9heC1wYXJ0LWZsZXh2aWV3cGFnZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF93cmFwcGVyIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X3NpbmdsZVBhZ2VfZmxleFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF93cmFwcGVyID4gLm9heF9zaW5nbGVQYWdlX2ZsZXgiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhcnRpY2xlIGNsYXNzPVwib2F4X2NvbnRhaW5lcl8xMiBvYXhfc2luZ2xlUGFnZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiYXJ0aWNsZSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heC1wYXJ0LXNpbmdsZXZpZXdwYWdlIG9heC1wYXJ0LXNpbmdsZXZpZXdwYWdlLXVzZXIgb2F4X3NpbmdsZVBhZ2VfZmxleFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1wYXJ0LXNpbmdsZXZpZXdwYWdlIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2NvbnRhaW5lcl9mbHVpZCBvYXhfc2luZ2xlUGFnZSBvYXhfbWFyZ19ib3R0b21fMTAwXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X21hcmdfYm90dG9tXzEwMCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9yb3cgb2F4X2ZsZXhncmlkIG9heF9oX2NlbnRlcmVkIG9heF9wYWdlV2lkZ2V0X2RpdmlkZXJfY2VudGVyZWQgb2F4X21hcmdfdG9wXzQwXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2ZsZXhncmlkIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2NvbCBvYXhfY29sX2RfOCBvYXhfY29sX2Rfb2Zmc2V0XzIgb2F4X3RleHRfbGFyZ2UxOFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF90ZXh0X2xhcmdlMTgiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfY29sX29mZnNldF9uZWcgb2F4X2NvbF9vZmZzZXRfbmVnX2Z1bGwgb2F4X2NvbF9mdWxsd2lkdGhfb2Zmc2V0X25lZ18yIG9heF9tYXJnX2JvdHRvbV83NyBvYXhfbWFyZ190b3BfbmVnXzc3XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X21hcmdfYm90dG9tXzc3IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8dWwgY2xhc3M9XCJvYXhfbWVudV9iZWx0XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X21lbnVfYmVsdCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpIGNsYXNzPVwiIG9heF9tYXJnX2JvdHRvbV80NFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9tZW51X2JlbHQgPiAub2F4X21hcmdfYm90dG9tXzQ0Om50aC1jaGlsZCgxKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9naGlkLWRlLWNhbGF0b3JpZS9yb21hbmlhLzEwMzY5OTEvXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X21hcmdfYm90dG9tXzQ0Om50aC1jaGlsZCgxKSA+IGEiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfbWVudV9iZWx0X2l0ZW1cIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfbWFyZ19ib3R0b21fNDQ6bnRoLWNoaWxkKDEpID4gYSA+IC5vYXhfbWVudV9iZWx0X2l0ZW0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfbWVudV9iZWx0X3RpdGxlXCI+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRHaGlkIHR1cmlzdGljPGJyPjxzcGFuIGNsYXNzPVwib2F4LWljb24tYXJyb3ctcmlnaHRcIj48L3NwYW4+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCBcdDwvZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9tYXJnX2JvdHRvbV80NDpudGgtY2hpbGQoMSkgPiBhID4gLm9heF9tZW51X2JlbHRfaXRlbSA+IC5vYXhfbWVudV9iZWx0X3RpdGxlIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YnI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X21hcmdfYm90dG9tXzQ0Om50aC1jaGlsZCgxKSA+IGEgPiAub2F4X21lbnVfYmVsdF9pdGVtID4gLm9heF9tZW51X2JlbHRfdGl0bGUgPiBiciIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHNwYW4gY2xhc3M9XCJvYXgtaWNvbi1hcnJvdy1yaWdodFwiPjwvc3Bhbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfbWFyZ19ib3R0b21fNDQ6bnRoLWNoaWxkKDEpID4gYSA+IC5vYXhfbWVudV9iZWx0X2l0ZW0gPiAub2F4X21lbnVfYmVsdF90aXRsZSA+IC5vYXgtaWNvbi1hcnJvdy1yaWdodCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9tZW51X2JlbHRfaW1hZ2VcIj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgXHQ8b3V0cHV0IGNsYXNzPVwib2F4LW9uc2Nyb2xsLWltZy1sb2FkIGpzLW9uc2Nyb2xsLWltZ1wiIGRhdGEtb2F4X2xhenlfbG9hZD1cImRvbmVcIj48aW1nIHNyYz1cImh0dHBzOi8vaW1nMS5vYXN0YXRpYy5jb20vaW1nMi84NzU5ODY4Mi80MjB4MjM3ci92YXJpYW50LmpwZ1wiIGFsdD1cIkNhYmFuxIMgbW9udGFuxIMsIHRvYW1uYVwiIHdpZHRoPVwiNDIwXCIgaGVpZ2h0PVwiMjM3XCIgZGF0YS1vYXhfaW1nX2xvYWQ9XCJkb25lXCI+PC9vdXRwdXQ+PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X21hcmdfYm90dG9tXzQ0Om50aC1jaGlsZCgxKSA+IGEgPiAub2F4X21lbnVfYmVsdF9pdGVtID4gLm9heF9tZW51X2JlbHRfaW1hZ2UiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxvdXRwdXQgY2xhc3M9XCJvYXgtb25zY3JvbGwtaW1nLWxvYWQganMtb25zY3JvbGwtaW1nXCIgZGF0YS1vYXhfbGF6eV9sb2FkPVwiZG9uZVwiPjxpbWcgc3JjPVwiaHR0cHM6Ly9pbWcxLm9hc3RhdGljLmNvbS9pbWcyLzg3NTk4NjgyLzQyMHgyMzdyL3ZhcmlhbnQuanBnXCIgYWx0PVwiQ2FiYW7EgyBtb250YW7EgywgdG9hbW5hXCIgd2lkdGg9XCI0MjBcIiBoZWlnaHQ9XCIyMzdcIiBkYXRhLW9heF9pbWdfbG9hZD1cImRvbmVcIj48L291dHB1dD4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfbWFyZ19ib3R0b21fNDQ6bnRoLWNoaWxkKDEpID4gYSA+IC5vYXhfbWVudV9iZWx0X2l0ZW0gPiAub2F4X21lbnVfYmVsdF9pbWFnZSA+IG91dHB1dFtkYXRhLW9heF9sYXp5X2xvYWQ9XCJkb25lXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHNyYz1cImh0dHBzOi8vaW1nMS5vYXN0YXRpYy5jb20vaW1nMi84NzU5ODY4Mi80MjB4MjM3ci92YXJpYW50LmpwZ1wiIGFsdD1cIkNhYmFuxIMgbW9udGFuxIMsIHRvYW1uYVwiIHdpZHRoPVwiNDIwXCIgaGVpZ2h0PVwiMjM3XCIgZGF0YS1vYXhfaW1nX2xvYWQ9XCJkb25lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJpbWdbYWx0PVwiQ2FiYW7EgyBtb250YW7EgywgdG9hbW5hXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGkgY2xhc3M9XCIgb2F4X21hcmdfYm90dG9tXzQ0XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X21lbnVfYmVsdCA+IC5vYXhfbWFyZ19ib3R0b21fNDQ6bnRoLWNoaWxkKDIpIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL2xpc3QvYmlzZXJpY2lsZS1kaW4tbm9yZHVsLW1vbGRvdmVpLWluY2x1c2UtaW4tcGF0cmltb25pdWwtdW5lc2NvLzExODY5MjY5My9cIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfbWFyZ19ib3R0b21fNDQ6bnRoLWNoaWxkKDIpID4gYSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9tZW51X2JlbHRfaXRlbVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9tYXJnX2JvdHRvbV80NDpudGgtY2hpbGQoMikgPiBhID4gLm9heF9tZW51X2JlbHRfaXRlbSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9tZW51X2JlbHRfdGl0bGVcIj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFBhdHJpbW9uaXUgVU5FU0NPPGJyPjxzcGFuIGNsYXNzPVwib2F4LWljb24tYXJyb3ctcmlnaHRcIj48L3NwYW4+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCBcdDwvZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9tYXJnX2JvdHRvbV80NDpudGgtY2hpbGQoMikgPiBhID4gLm9heF9tZW51X2JlbHRfaXRlbSA+IC5vYXhfbWVudV9iZWx0X3RpdGxlIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YnI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X21hcmdfYm90dG9tXzQ0Om50aC1jaGlsZCgyKSA+IGEgPiAub2F4X21lbnVfYmVsdF9pdGVtID4gLm9heF9tZW51X2JlbHRfdGl0bGUgPiBiciIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHNwYW4gY2xhc3M9XCJvYXgtaWNvbi1hcnJvdy1yaWdodFwiPjwvc3Bhbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfbWFyZ19ib3R0b21fNDQ6bnRoLWNoaWxkKDIpID4gYSA+IC5vYXhfbWVudV9iZWx0X2l0ZW0gPiAub2F4X21lbnVfYmVsdF90aXRsZSA+IC5vYXgtaWNvbi1hcnJvdy1yaWdodCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9tZW51X2JlbHRfaW1hZ2VcIj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgXHQ8b3V0cHV0IGNsYXNzPVwib2F4LW9uc2Nyb2xsLWltZy1sb2FkIGpzLW9uc2Nyb2xsLWltZ1wiIGRhdGEtb2F4X2xhenlfbG9hZD1cImRvbmVcIj48aW1nIHNyYz1cImh0dHBzOi8vaW1nMS5vYXN0YXRpYy5jb20vaW1nMi8zNTg1MzUxMi80MjB4MjM3ci92YXJpYW50LmpwZ1wiIGFsdD1cIk3Eg27Eg3N0aXJlYSBTdWNldmnFo2FcIiB3aWR0aD1cIjQyMFwiIGhlaWdodD1cIjIzN1wiIGRhdGEtb2F4X2ltZ19sb2FkPVwiZG9uZVwiPjwvb3V0cHV0PjwvZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9tYXJnX2JvdHRvbV80NDpudGgtY2hpbGQoMikgPiBhID4gLm9heF9tZW51X2JlbHRfaXRlbSA+IC5vYXhfbWVudV9iZWx0X2ltYWdlIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8b3V0cHV0IGNsYXNzPVwib2F4LW9uc2Nyb2xsLWltZy1sb2FkIGpzLW9uc2Nyb2xsLWltZ1wiIGRhdGEtb2F4X2xhenlfbG9hZD1cImRvbmVcIj48aW1nIHNyYz1cImh0dHBzOi8vaW1nMS5vYXN0YXRpYy5jb20vaW1nMi8zNTg1MzUxMi80MjB4MjM3ci92YXJpYW50LmpwZ1wiIGFsdD1cIk3Eg27Eg3N0aXJlYSBTdWNldmnFo2FcIiB3aWR0aD1cIjQyMFwiIGhlaWdodD1cIjIzN1wiIGRhdGEtb2F4X2ltZ19sb2FkPVwiZG9uZVwiPjwvb3V0cHV0PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9tYXJnX2JvdHRvbV80NDpudGgtY2hpbGQoMikgPiBhID4gLm9heF9tZW51X2JlbHRfaXRlbSA+IC5vYXhfbWVudV9iZWx0X2ltYWdlID4gb3V0cHV0W2RhdGEtb2F4X2xhenlfbG9hZD1cImRvbmVcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbWcgc3JjPVwiaHR0cHM6Ly9pbWcxLm9hc3RhdGljLmNvbS9pbWcyLzM1ODUzNTEyLzQyMHgyMzdyL3ZhcmlhbnQuanBnXCIgYWx0PVwiTcSDbsSDc3RpcmVhIFN1Y2V2acWjYVwiIHdpZHRoPVwiNDIwXCIgaGVpZ2h0PVwiMjM3XCIgZGF0YS1vYXhfaW1nX2xvYWQ9XCJkb25lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJpbWdbYWx0PVwiTcSDbsSDc3RpcmVhIFN1Y2V2acWjYVwiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpIGNsYXNzPVwiIG9heF9tYXJnX2JvdHRvbV80NFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9tYXJnX2JvdHRvbV80NDpudGgtY2hpbGQoMykiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vcC9wcm9ncmFtdWwtZGUtYWZpbGllcmUvNjI2NzM5MjkvXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X21hcmdfYm90dG9tXzQ0Om50aC1jaGlsZCgzKSA+IGEiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfbWVudV9iZWx0X2l0ZW1cIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfbWFyZ19ib3R0b21fNDQ6bnRoLWNoaWxkKDMpID4gYSA+IC5vYXhfbWVudV9iZWx0X2l0ZW0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfbWVudV9iZWx0X3RpdGxlXCI+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRQcm9ncmFtdWwgZGUgYWZpbGllcmU8YnI+PHNwYW4gY2xhc3M9XCJvYXgtaWNvbi1hcnJvdy1yaWdodFwiPjwvc3Bhbj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0IFx0PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X21hcmdfYm90dG9tXzQ0Om50aC1jaGlsZCgzKSA+IGEgPiAub2F4X21lbnVfYmVsdF9pdGVtID4gLm9heF9tZW51X2JlbHRfdGl0bGUiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxicj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfbWFyZ19ib3R0b21fNDQ6bnRoLWNoaWxkKDMpID4gYSA+IC5vYXhfbWVudV9iZWx0X2l0ZW0gPiAub2F4X21lbnVfYmVsdF90aXRsZSA+IGJyIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8c3BhbiBjbGFzcz1cIm9heC1pY29uLWFycm93LXJpZ2h0XCI+PC9zcGFuPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9tYXJnX2JvdHRvbV80NDpudGgtY2hpbGQoMykgPiBhID4gLm9heF9tZW51X2JlbHRfaXRlbSA+IC5vYXhfbWVudV9iZWx0X3RpdGxlID4gLm9heC1pY29uLWFycm93LXJpZ2h0IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X21lbnVfYmVsdF9pbWFnZVwiPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCBcdDxvdXRwdXQgY2xhc3M9XCJvYXgtb25zY3JvbGwtaW1nLWxvYWQganMtb25zY3JvbGwtaW1nXCIgZGF0YS1vYXhfbGF6eV9sb2FkPVwiZG9uZVwiPjxpbWcgc3JjPVwiaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzUzMjMxNTMzLzQyMHgyMzdyL3ZhcmlhbnQuanBnXCIgYWx0PVwiUGVpc2FqIGRpbiBNdW7Im2lpIFJldGV6YXRcIiB3aWR0aD1cIjQyMFwiIGhlaWdodD1cIjIzN1wiIGRhdGEtb2F4X2ltZ19sb2FkPVwiZG9uZVwiPjwvb3V0cHV0PjwvZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9tYXJnX2JvdHRvbV80NDpudGgtY2hpbGQoMykgPiBhID4gLm9heF9tZW51X2JlbHRfaXRlbSA+IC5vYXhfbWVudV9iZWx0X2ltYWdlIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8b3V0cHV0IGNsYXNzPVwib2F4LW9uc2Nyb2xsLWltZy1sb2FkIGpzLW9uc2Nyb2xsLWltZ1wiIGRhdGEtb2F4X2xhenlfbG9hZD1cImRvbmVcIj48aW1nIHNyYz1cImh0dHBzOi8vaW1nMi5vYXN0YXRpYy5jb20vaW1nMi81MzIzMTUzMy80MjB4MjM3ci92YXJpYW50LmpwZ1wiIGFsdD1cIlBlaXNhaiBkaW4gTXVuyJtpaSBSZXRlemF0XCIgd2lkdGg9XCI0MjBcIiBoZWlnaHQ9XCIyMzdcIiBkYXRhLW9heF9pbWdfbG9hZD1cImRvbmVcIj48L291dHB1dD4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfbWFyZ19ib3R0b21fNDQ6bnRoLWNoaWxkKDMpID4gYSA+IC5vYXhfbWVudV9iZWx0X2l0ZW0gPiAub2F4X21lbnVfYmVsdF9pbWFnZSA+IG91dHB1dFtkYXRhLW9heF9sYXp5X2xvYWQ9XCJkb25lXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHNyYz1cImh0dHBzOi8vaW1nMi5vYXN0YXRpYy5jb20vaW1nMi81MzIzMTUzMy80MjB4MjM3ci92YXJpYW50LmpwZ1wiIGFsdD1cIlBlaXNhaiBkaW4gTXVuyJtpaSBSZXRlemF0XCIgd2lkdGg9XCI0MjBcIiBoZWlnaHQ9XCIyMzdcIiBkYXRhLW9heF9pbWdfbG9hZD1cImRvbmVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImltZ1thbHQ9XCJQZWlzYWogZGluIE11bsibaWkgUmV0ZXphdFwiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9jZW50ZXJlZFwiPlxuXHRcdFx0XHRcdCBcdFx0XHQ8L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfY2VudGVyZWQ6bnRoLWNoaWxkKDIpIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X21hcmdfdG9wXzIyXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X3RleHRfbGFyZ2UxOCA+IC5vYXhfbWFyZ190b3BfMjIiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfbGF5b3V0X2NlbnRlcmVkIFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9sYXlvdXRfY2VudGVyZWQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgaWQ9XCIxXCIgY2xhc3M9XCJvYXhfbWFyZ190b3BfNzcgb2F4X3BhZ2VXaWRnZXRfZGl2aWRlclwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzEgIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2NvbF9vZmZzZXRfbmVnIG9heF9jb2xfb2Zmc2V0X25lZ19mdWxsIG9heF9jb2xfZnVsbHdpZHRoX2Z1bGwgb2F4X21hcmdfYm90dG9tXzQ0XCI+XG5cdFx0PGhyPlxuXHQ8L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDMxICA+IC5vYXhfY29sX2Z1bGx3aWR0aF9mdWxsLm9heF9jb2xfb2Zmc2V0X25lZ19mdWxsLm9heF9tYXJnX2JvdHRvbV80NCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGhyPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzEgID4gLm9heF9jb2xfZnVsbHdpZHRoX2Z1bGwub2F4X2NvbF9vZmZzZXRfbmVnX2Z1bGwub2F4X21hcmdfYm90dG9tXzQ0ID4gaHIiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfcGFnZVdpZGdldF9kaXZpZGVyX2ljb24gb2F4LWljb24tc2tpRnJlZXJpZGUgb2F4X2xpbmtfY29sb3JcIj48L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWNvbi1za2lGcmVlcmlkZSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGgyIGNsYXNzPVwib2F4X3BhZ2VXaWRnZXRfZGl2aWRlcl90aXRsZSBvYXhfbWFyZ190b3BfOCBvYXhfbGluZV9oZWlnaHRfMzMgb2F4X2ZvbnRfZ3JleV9kYXJrIG9heF9mb250X2xhcmdlMjQgb2F4X3VwcGVyY2FzZVwiPlZhY2FuyJtlIGRlIGlhcm7EgyBhY3RpdmU8L2gyPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzEgID4gaDIiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgaWQ9XCIyXCIgY2xhc3M9XCJvYXhfbWFyZ190b3BfNzdcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDMyICIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdj5cblx0XHRcblx0XHRcblx0IDwvZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzIgID4gZGl2Om50aC1jaGlsZCgxKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9jb2xfb2Zmc2V0X25lZyBvYXhfY29sX29mZnNldF9uZWdfZnVsbCBvYXhfY29sX2Z1bGx3aWR0aF9vZmZzZXRfbmVnXzJcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDMyICA+IC5vYXhfY29sX2Z1bGx3aWR0aF9vZmZzZXRfbmVnXzIub2F4X2NvbF9vZmZzZXRfbmVnX2Z1bGwub2F4X2NvbF9vZmZzZXRfbmVnIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X3N0YXRpY19saXN0X2NvbnQgb2F4X3RpbGVfdGVhc2VyIG9heF9jbGVhcmZpeFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9zdGF0aWNfbGlzdF9jb250IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2NvbCBvYXhfY29sX3hzXzEyIG9heF9jb2xfc18xMiBvYXhfY29sX2RfNiBvYXhfbWFyZ19ib3R0b21fMjJcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfY29sX3hzXzEyLm9heF9jb2xfc18xMi5vYXhfY29sX2RfNjpudGgtY2hpbGQoMSkiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXgtaW1hZ2Utc25pcHBldCBvYXgtaWQgb2F4LWlkLTM0NDIwNDEyIG9heC10cmFjay1jb250ZW50IG9heC10cmFjay1kb25lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM0NDIwNDEyIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL3NraXJlc29ydC9zdGF0aXVuZWEtc2ktcGFydGlhLXNlbWVuaWMvMzQ0MjA0MTIvXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM0NDIwNDEyID4gYSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGZpZ3VyZSBjbGFzcz1cIm9heF9pbWFnZV9zbmlwcGV0XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM0NDIwNDEyID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPG91dHB1dCBjbGFzcz1cIm9heC1vbnNjcm9sbC1pbWctbG9hZCBqcy1vbnNjcm9sbC1pbWdcIiBkYXRhLW9heF9sYXp5X2xvYWQ9XCJkb25lXCI+PGltZyBzcmM9XCJodHRwczovL3JlczEub2FzdGF0aWMuY29tL2ljb25zL29hL3NraVJlc29ydC9ibHVlX3Zpb2xldC9za2lSZXNvcnQuc3F1YXJlX3ZlY3Rvci5zdmdcIiBjbGFzcz1cIm9heF9pbWFnZV9zbmlwcGV0X2NhdGVnb3J5X2ljb25cIiBhbHQ9XCJcIiBkYXRhLW9heF9pbWdfbG9hZD1cImRvbmVcIj48L291dHB1dD4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtMzQ0MjA0MTIgPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gb3V0cHV0W2RhdGEtb2F4X2xhenlfbG9hZD1cImRvbmVcIl06bnRoLWNoaWxkKDEpIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHNyYz1cImh0dHBzOi8vcmVzMS5vYXN0YXRpYy5jb20vaWNvbnMvb2Evc2tpUmVzb3J0L2JsdWVfdmlvbGV0L3NraVJlc29ydC5zcXVhcmVfdmVjdG9yLnN2Z1wiIGNsYXNzPVwib2F4X2ltYWdlX3NuaXBwZXRfY2F0ZWdvcnlfaWNvblwiIGFsdD1cIlwiIGRhdGEtb2F4X2ltZ19sb2FkPVwiZG9uZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC0zNDQyMDQxMiA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiBvdXRwdXRbZGF0YS1vYXhfbGF6eV9sb2FkPVwiZG9uZVwiXTpudGgtY2hpbGQoMSkgPiAub2F4X2ltYWdlX3NuaXBwZXRfY2F0ZWdvcnlfaWNvblthbHQ9XCJcIl1bZGF0YS1vYXhfaW1nX2xvYWQ9XCJkb25lXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X3NuaXBwZXRfbG9jYXRvciBvYXhfaW1hZ2Vfc25pcHBldF9sb2NhdG9yXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM0NDIwNDEyID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IC5vYXhfc25pcHBldF9sb2NhdG9yLm9heF9pbWFnZV9zbmlwcGV0X2xvY2F0b3IiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxzcGFuIGNsYXNzPVwib2F4X2VsbGlwc2lzXCI+QmFuYXR1bCBtb250YW48L3NwYW4+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM0NDIwNDEyID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IC5vYXhfc25pcHBldF9sb2NhdG9yLm9heF9pbWFnZV9zbmlwcGV0X2xvY2F0b3IgPiAub2F4X2VsbGlwc2lzIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8b3V0cHV0IGNsYXNzPVwib2F4LW9uc2Nyb2xsLWltZy1sb2FkIGpzLW9uc2Nyb2xsLWltZ1wiIGRhdGEtb2F4X2xhenlfbG9hZD1cImRvbmVcIj48aW1nIHNyYz1cImh0dHBzOi8vb2FkLm91dGRvb3JhY3RpdmUuY29tL2FwaS9zdGF0aWNtYXA/aT0zNDQyMDQxMiZhbXA7c2l6ZT1sb2NhdG9yJmFtcDtwcm9qZWN0PW9hZC1yb21hbmlhdHJhdmVsXCIgYWx0PVwiSGFydMSDIC8gU3RhyJtpdW5lYSDImWkgUMOicnRpYSBTZW1lbmljXCIgd2lkdGg9XCI0MDBcIiBoZWlnaHQ9XCIyMjVcIiBkYXRhLW9heF9pbWdfbG9hZD1cImRvbmVcIj48L291dHB1dD4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtMzQ0MjA0MTIgPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gLm9heF9zbmlwcGV0X2xvY2F0b3Iub2F4X2ltYWdlX3NuaXBwZXRfbG9jYXRvciA+IG91dHB1dFtkYXRhLW9heF9sYXp5X2xvYWQ9XCJkb25lXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIHNyYz1cImh0dHBzOi8vb2FkLm91dGRvb3JhY3RpdmUuY29tL2FwaS9zdGF0aWNtYXA/aT0zNDQyMDQxMiZhbXA7c2l6ZT1sb2NhdG9yJmFtcDtwcm9qZWN0PW9hZC1yb21hbmlhdHJhdmVsXCIgYWx0PVwiSGFydMSDIC8gU3RhyJtpdW5lYSDImWkgUMOicnRpYSBTZW1lbmljXCIgd2lkdGg9XCI0MDBcIiBoZWlnaHQ9XCIyMjVcIiBkYXRhLW9heF9pbWdfbG9hZD1cImRvbmVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtMzQ0MjA0MTIgPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gLm9heF9zbmlwcGV0X2xvY2F0b3Iub2F4X2ltYWdlX3NuaXBwZXRfbG9jYXRvciA+IG91dHB1dFtkYXRhLW9heF9sYXp5X2xvYWQ9XCJkb25lXCJdID4gaW1nW3dpZHRoPVwiNDAwXCJdW2hlaWdodD1cIjIyNVwiXVtkYXRhLW9heF9pbWdfbG9hZD1cImRvbmVcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxvdXRwdXQgY2xhc3M9XCJvYXgtb25zY3JvbGwtaW1nLWxvYWQganMtb25zY3JvbGwtaW1nXCIgZGF0YS1vYXhfbGF6eV9sb2FkPVwiZG9uZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC0zNDQyMDQxMiA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiBvdXRwdXRbZGF0YS1vYXhfbGF6eV9sb2FkPVwiZG9uZVwiXTpudGgtY2hpbGQoMykiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbWcgd2lkdGg9XCI0MjBcIiBoZWlnaHQ9XCIyMzdcIiBzcmM9XCJodHRwczovL2ltZy5vYXN0YXRpYy5jb20vaW1nMi8zNDQyMDQ5MC80MjB4MjM3ci92YXJpYW50LmpwZ1wiIHNyY3NldD1cImh0dHBzOi8vaW1nLm9hc3RhdGljLmNvbS9pbWcyLzM0NDIwNDkwLzQyMHgyMzdyL3ZhcmlhbnQuanBnIDQyMHcsaHR0cHM6Ly9pbWcub2FzdGF0aWMuY29tL2ltZzIvMzQ0MjA0OTAvNzI4eDQxMHIvdmFyaWFudC5qcGcgNzI4dyxodHRwczovL2ltZy5vYXN0YXRpYy5jb20vaW1nMi8zNDQyMDQ5MC8xMDgweDYxMHIvdmFyaWFudC5qcGcgMTA4MHdcIiBhbHQ9XCJcIiBzaXplcz1cIihtaW4td2lkdGg6IDgwMHB4KSA2MDBweCwgKG1pbi13aWR0aDogNjQwcHgpIDUwdncsIDEwMHZ3XCIgZGF0YS1vYXhfaW1nX2xvYWQ9XCJkb25lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM0NDIwNDEyID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IG91dHB1dFtkYXRhLW9heF9sYXp5X2xvYWQ9XCJkb25lXCJdOm50aC1jaGlsZCgzKSA+IGltZ1thbHQ9XCJcIl1bd2lkdGg9XCI0MjBcIl1baGVpZ2h0PVwiMjM3XCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2dhbGxlcnlfc2hhZG93XCI+PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM0NDIwNDEyID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IC5vYXhfZ2FsbGVyeV9zaGFkb3ciCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfZ2FsbGVyeV9zaGFkb3dfaG92XCI+PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM0NDIwNDEyID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IC5vYXhfZ2FsbGVyeV9zaGFkb3dfaG92IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZmlnY2FwdGlvbj5cblx0XHRcdFx0XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cIm9heF9mb250X3NtYWxsIG9heF9pbmxpbmVfYmxvY2sgb2F4X21hcmdfYm90dG9tXzZcIj5SZWNvbWFuZGFyZSByZWdpdW5lIGRlIHNjaGk8L3NwYW4+XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFxuXHRcdFx0XHQ8c3Ryb25nIGNsYXNzPVwib2F4X2Jsb2NrIG9heF9zZW1pX2JvbGRcIj5cblx0XHQgXHQgXHRcdFN0YcibaXVuZWEgyJlpIFDDonJ0aWEgU2VtZW5pY1xuXHRcdCBcdCBcdDwvc3Ryb25nPlxuXHRcdCBcdCA8L2ZpZ2NhcHRpb24+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM0NDIwNDEyID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IGZpZ2NhcHRpb24iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxzcGFuIGNsYXNzPVwib2F4X2ZvbnRfc21hbGwgb2F4X2lubGluZV9ibG9jayBvYXhfbWFyZ19ib3R0b21fNlwiPlJlY29tYW5kYXJlIHJlZ2l1bmUgZGUgc2NoaTwvc3Bhbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtMzQ0MjA0MTIgPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gZmlnY2FwdGlvbiA+IC5vYXhfbWFyZ19ib3R0b21fNi5vYXhfaW5saW5lX2Jsb2NrLm9heF9mb250X3NtYWxsIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8c3Ryb25nIGNsYXNzPVwib2F4X2Jsb2NrIG9heF9zZW1pX2JvbGRcIj5cblx0XHQgXHQgXHRcdFN0YcibaXVuZWEgyJlpIFDDonJ0aWEgU2VtZW5pY1xuXHRcdCBcdCBcdDwvc3Ryb25nPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC0zNDQyMDQxMiA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiBmaWdjYXB0aW9uID4gLm9heF9ibG9jay5vYXhfc2VtaV9ib2xkIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2NvbCBvYXhfY29sX3hzXzEyIG9heF9jb2xfc18xMiBvYXhfY29sX2RfNiBvYXhfbWFyZ19ib3R0b21fMjJcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfY29sX3hzXzEyLm9heF9jb2xfc18xMi5vYXhfY29sX2RfNjpudGgtY2hpbGQoMikiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXgtaW1hZ2Utc25pcHBldCBvYXgtaWQgb2F4LWlkLTM1NzQ2MjM3IG9heC10cmFjay1jb250ZW50IG9heC10cmFjay1kb25lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM1NzQ2MjM3IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL3NraXJlc29ydC9zdGF0aXVuZWEtc3RyYWphLzM1NzQ2MjM3L1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC0zNTc0NjIzNyA+IGEiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxmaWd1cmUgY2xhc3M9XCJvYXhfaW1hZ2Vfc25pcHBldFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC0zNTc0NjIzNyA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxvdXRwdXQgY2xhc3M9XCJvYXgtb25zY3JvbGwtaW1nLWxvYWQganMtb25zY3JvbGwtaW1nXCIgZGF0YS1vYXhfbGF6eV9sb2FkPVwiZG9uZVwiPjxpbWcgc3JjPVwiaHR0cHM6Ly9yZXMxLm9hc3RhdGljLmNvbS9pY29ucy9vYS9za2lSZXNvcnQvYmx1ZV92aW9sZXQvc2tpUmVzb3J0LnNxdWFyZV92ZWN0b3Iuc3ZnXCIgY2xhc3M9XCJvYXhfaW1hZ2Vfc25pcHBldF9jYXRlZ29yeV9pY29uXCIgYWx0PVwiXCIgZGF0YS1vYXhfaW1nX2xvYWQ9XCJkb25lXCI+PC9vdXRwdXQ+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM1NzQ2MjM3ID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IG91dHB1dFtkYXRhLW9heF9sYXp5X2xvYWQ9XCJkb25lXCJdOm50aC1jaGlsZCgxKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGltZyBzcmM9XCJodHRwczovL3JlczEub2FzdGF0aWMuY29tL2ljb25zL29hL3NraVJlc29ydC9ibHVlX3Zpb2xldC9za2lSZXNvcnQuc3F1YXJlX3ZlY3Rvci5zdmdcIiBjbGFzcz1cIm9heF9pbWFnZV9zbmlwcGV0X2NhdGVnb3J5X2ljb25cIiBhbHQ9XCJcIiBkYXRhLW9heF9pbWdfbG9hZD1cImRvbmVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtMzU3NDYyMzcgPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gb3V0cHV0W2RhdGEtb2F4X2xhenlfbG9hZD1cImRvbmVcIl06bnRoLWNoaWxkKDEpID4gLm9heF9pbWFnZV9zbmlwcGV0X2NhdGVnb3J5X2ljb25bYWx0PVwiXCJdW2RhdGEtb2F4X2ltZ19sb2FkPVwiZG9uZVwiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9zbmlwcGV0X2xvY2F0b3Igb2F4X2ltYWdlX3NuaXBwZXRfbG9jYXRvclwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC0zNTc0NjIzNyA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiAub2F4X3NuaXBwZXRfbG9jYXRvci5vYXhfaW1hZ2Vfc25pcHBldF9sb2NhdG9yIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8c3BhbiBjbGFzcz1cIm9heF9lbGxpcHNpc1wiPlZhbGVhIEppdWx1aTwvc3Bhbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtMzU3NDYyMzcgPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gLm9heF9zbmlwcGV0X2xvY2F0b3Iub2F4X2ltYWdlX3NuaXBwZXRfbG9jYXRvciA+IC5vYXhfZWxsaXBzaXMiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxvdXRwdXQgY2xhc3M9XCJvYXgtb25zY3JvbGwtaW1nLWxvYWQganMtb25zY3JvbGwtaW1nXCIgZGF0YS1vYXhfbGF6eV9sb2FkPVwiZG9uZVwiPjxpbWcgc3JjPVwiaHR0cHM6Ly9vYWQub3V0ZG9vcmFjdGl2ZS5jb20vYXBpL3N0YXRpY21hcD9pPTM1NzQ2MjM3JmFtcDtzaXplPWxvY2F0b3ImYW1wO3Byb2plY3Q9b2FkLXJvbWFuaWF0cmF2ZWxcIiBhbHQ9XCJIYXJ0xIMgLyBTdGHIm2l1bmVhIFN0cmFqYVwiIHdpZHRoPVwiNDAwXCIgaGVpZ2h0PVwiMjI1XCIgZGF0YS1vYXhfaW1nX2xvYWQ9XCJkb25lXCI+PC9vdXRwdXQ+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM1NzQ2MjM3ID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IC5vYXhfc25pcHBldF9sb2NhdG9yLm9heF9pbWFnZV9zbmlwcGV0X2xvY2F0b3IgPiBvdXRwdXRbZGF0YS1vYXhfbGF6eV9sb2FkPVwiZG9uZVwiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGltZyBzcmM9XCJodHRwczovL29hZC5vdXRkb29yYWN0aXZlLmNvbS9hcGkvc3RhdGljbWFwP2k9MzU3NDYyMzcmYW1wO3NpemU9bG9jYXRvciZhbXA7cHJvamVjdD1vYWQtcm9tYW5pYXRyYXZlbFwiIGFsdD1cIkhhcnTEgyAvIFN0YcibaXVuZWEgU3RyYWphXCIgd2lkdGg9XCI0MDBcIiBoZWlnaHQ9XCIyMjVcIiBkYXRhLW9heF9pbWdfbG9hZD1cImRvbmVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImltZ1thbHQ9XCJIYXJ0xIMgLyBTdGHIm2l1bmVhIFN0cmFqYVwiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPG91dHB1dCBjbGFzcz1cIm9heC1vbnNjcm9sbC1pbWctbG9hZCBqcy1vbnNjcm9sbC1pbWdcIiBkYXRhLW9heF9sYXp5X2xvYWQ9XCJkb25lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM1NzQ2MjM3ID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IG91dHB1dFtkYXRhLW9heF9sYXp5X2xvYWQ9XCJkb25lXCJdOm50aC1jaGlsZCgzKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGltZyB3aWR0aD1cIjQyMFwiIGhlaWdodD1cIjIzN1wiIHNyYz1cImh0dHBzOi8vaW1nMi5vYXN0YXRpYy5jb20vaW1nMi8zNTc0NjMyOC80MjB4MjM3ci92YXJpYW50LmpwZ1wiIHNyY3NldD1cImh0dHBzOi8vaW1nMi5vYXN0YXRpYy5jb20vaW1nMi8zNTc0NjMyOC80MjB4MjM3ci92YXJpYW50LmpwZyA0MjB3LGh0dHBzOi8vaW1nMi5vYXN0YXRpYy5jb20vaW1nMi8zNTc0NjMyOC83Mjh4NDEwci92YXJpYW50LmpwZyA3Mjh3LGh0dHBzOi8vaW1nMi5vYXN0YXRpYy5jb20vaW1nMi8zNTc0NjMyOC8xMDgweDYxMHIvdmFyaWFudC5qcGcgMTA4MHdcIiBhbHQ9XCJcIiBzaXplcz1cIihtaW4td2lkdGg6IDgwMHB4KSA2MDBweCwgKG1pbi13aWR0aDogNjQwcHgpIDUwdncsIDEwMHZ3XCIgZGF0YS1vYXhfaW1nX2xvYWQ9XCJkb25lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM1NzQ2MjM3ID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IG91dHB1dFtkYXRhLW9heF9sYXp5X2xvYWQ9XCJkb25lXCJdOm50aC1jaGlsZCgzKSA+IGltZ1thbHQ9XCJcIl1bd2lkdGg9XCI0MjBcIl1baGVpZ2h0PVwiMjM3XCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2dhbGxlcnlfc2hhZG93XCI+PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM1NzQ2MjM3ID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IC5vYXhfZ2FsbGVyeV9zaGFkb3ciCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfZ2FsbGVyeV9zaGFkb3dfaG92XCI+PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM1NzQ2MjM3ID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IC5vYXhfZ2FsbGVyeV9zaGFkb3dfaG92IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZmlnY2FwdGlvbj5cblx0XHRcdFx0XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cIm9heF9mb250X3NtYWxsIG9heF9pbmxpbmVfYmxvY2sgb2F4X21hcmdfYm90dG9tXzZcIj5SZWNvbWFuZGFyZSByZWdpdW5lIGRlIHNjaGk8L3NwYW4+XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFxuXHRcdFx0XHQ8c3Ryb25nIGNsYXNzPVwib2F4X2Jsb2NrIG9heF9zZW1pX2JvbGRcIj5cblx0XHQgXHQgXHRcdFN0YcibaXVuZWEgU3RyYWphXG5cdFx0IFx0IFx0PC9zdHJvbmc+XG5cdFx0IFx0IDwvZmlnY2FwdGlvbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtMzU3NDYyMzcgPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gZmlnY2FwdGlvbiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHNwYW4gY2xhc3M9XCJvYXhfZm9udF9zbWFsbCBvYXhfaW5saW5lX2Jsb2NrIG9heF9tYXJnX2JvdHRvbV82XCI+UmVjb21hbmRhcmUgcmVnaXVuZSBkZSBzY2hpPC9zcGFuPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC0zNTc0NjIzNyA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiBmaWdjYXB0aW9uID4gLm9heF9tYXJnX2JvdHRvbV82Lm9heF9pbmxpbmVfYmxvY2sub2F4X2ZvbnRfc21hbGwiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxzdHJvbmcgY2xhc3M9XCJvYXhfYmxvY2sgb2F4X3NlbWlfYm9sZFwiPlxuXHRcdCBcdCBcdFx0U3RhyJtpdW5lYSBTdHJhamFcblx0XHQgXHQgXHQ8L3N0cm9uZz4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtMzU3NDYyMzcgPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gZmlnY2FwdGlvbiA+IC5vYXhfYmxvY2sub2F4X3NlbWlfYm9sZCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9jb2wgb2F4X2NvbF94c18xMiBvYXhfY29sX3NfMTIgb2F4X2NvbF9kXzYgb2F4X21hcmdfYm90dG9tXzIyXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2NvbF94c18xMi5vYXhfY29sX3NfMTIub2F4X2NvbF9kXzY6bnRoLWNoaWxkKDMpIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4LWltYWdlLXNuaXBwZXQgb2F4LWlkIG9heC1pZC00NDQyNTY1OCBvYXgtdHJhY2stY29udGVudCBvYXgtdHJhY2stZG9uZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC00NDQyNTY1OCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9za2lyZXNvcnQvZG9tZW5pdWwtc2NoaWFiaWwtcHJlZGVhbC80NDQyNTY1OC9cIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNDQ0MjU2NTggPiBhIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZmlndXJlIGNsYXNzPVwib2F4X2ltYWdlX3NuaXBwZXRcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNDQ0MjU2NTggPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8b3V0cHV0IGNsYXNzPVwib2F4LW9uc2Nyb2xsLWltZy1sb2FkIGpzLW9uc2Nyb2xsLWltZ1wiPjxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgY2xhc3M9XCJvYXgtbG9hZC1wYXRoXCIgdmFsdWU9XCJ7c3JjOiZxdW90O2h0dHBzOi8vcmVzMS5vYXN0YXRpYy5jb20vaWNvbnMvb2Evc2tpUmVzb3J0L2JsdWVfdmlvbGV0L3NraVJlc29ydC5zcXVhcmVfdmVjdG9yLnN2ZyZxdW90OyxjbGFzczomcXVvdDtvYXhfaW1hZ2Vfc25pcHBldF9jYXRlZ29yeV9pY29uJnF1b3Q7LGFsdDomcXVvdDsmcXVvdDt9XCI+PC9vdXRwdXQ+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTQ0NDI1NjU4ID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IG91dHB1dDpudGgtY2hpbGQoMSkiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfc25pcHBldF9sb2NhdG9yIG9heF9pbWFnZV9zbmlwcGV0X2xvY2F0b3JcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNDQ0MjU2NTggPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gLm9heF9zbmlwcGV0X2xvY2F0b3Iub2F4X2ltYWdlX3NuaXBwZXRfbG9jYXRvciIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHNwYW4gY2xhc3M9XCJvYXhfZWxsaXBzaXNcIj5NdW7Fo2lpIEJyYcWfb3Z1bHVpPC9zcGFuPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC00NDQyNTY1OCA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiAub2F4X3NuaXBwZXRfbG9jYXRvci5vYXhfaW1hZ2Vfc25pcHBldF9sb2NhdG9yID4gLm9heF9lbGxpcHNpcyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPG91dHB1dCBjbGFzcz1cIm9heC1vbnNjcm9sbC1pbWctbG9hZCBqcy1vbnNjcm9sbC1pbWdcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNDQ0MjU2NTggPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gLm9heF9zbmlwcGV0X2xvY2F0b3Iub2F4X2ltYWdlX3NuaXBwZXRfbG9jYXRvciA+IG91dHB1dCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPG91dHB1dCBjbGFzcz1cIm9heC1vbnNjcm9sbC1pbWctbG9hZCBqcy1vbnNjcm9sbC1pbWdcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNDQ0MjU2NTggPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gb3V0cHV0Om50aC1jaGlsZCgzKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9nYWxsZXJ5X3NoYWRvd1wiPjwvZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC00NDQyNTY1OCA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiAub2F4X2dhbGxlcnlfc2hhZG93IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2dhbGxlcnlfc2hhZG93X2hvdlwiPjwvZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC00NDQyNTY1OCA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiAub2F4X2dhbGxlcnlfc2hhZG93X2hvdiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGZpZ2NhcHRpb24+XG5cdFx0XHRcdFxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJvYXhfZm9udF9zbWFsbCBvYXhfaW5saW5lX2Jsb2NrIG9heF9tYXJnX2JvdHRvbV82XCI+UmVjb21hbmRhcmUgcmVnaXVuZSBkZSBzY2hpPC9zcGFuPlxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcblx0XHRcdFx0PHN0cm9uZyBjbGFzcz1cIm9heF9ibG9jayBvYXhfc2VtaV9ib2xkXCI+XG5cdFx0IFx0IFx0XHREb21lbml1bCBzY2hpYWJpbCBQcmVkZWFsXG5cdFx0IFx0IFx0PC9zdHJvbmc+XG5cdFx0IFx0IDwvZmlnY2FwdGlvbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNDQ0MjU2NTggPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gZmlnY2FwdGlvbiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHNwYW4gY2xhc3M9XCJvYXhfZm9udF9zbWFsbCBvYXhfaW5saW5lX2Jsb2NrIG9heF9tYXJnX2JvdHRvbV82XCI+UmVjb21hbmRhcmUgcmVnaXVuZSBkZSBzY2hpPC9zcGFuPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC00NDQyNTY1OCA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiBmaWdjYXB0aW9uID4gLm9heF9tYXJnX2JvdHRvbV82Lm9heF9pbmxpbmVfYmxvY2sub2F4X2ZvbnRfc21hbGwiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxzdHJvbmcgY2xhc3M9XCJvYXhfYmxvY2sgb2F4X3NlbWlfYm9sZFwiPlxuXHRcdCBcdCBcdFx0RG9tZW5pdWwgc2NoaWFiaWwgUHJlZGVhbFxuXHRcdCBcdCBcdDwvc3Ryb25nPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC00NDQyNTY1OCA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiBmaWdjYXB0aW9uID4gLm9heF9ibG9jay5vYXhfc2VtaV9ib2xkIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2NvbCBvYXhfY29sX3hzXzEyIG9heF9jb2xfc18xMiBvYXhfY29sX2RfNiBvYXhfbWFyZ19ib3R0b21fMjJcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfY29sX3hzXzEyLm9heF9jb2xfc18xMi5vYXhfY29sX2RfNjpudGgtY2hpbGQoNCkiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXgtaW1hZ2Utc25pcHBldCBvYXgtaWQgb2F4LWlkLTQ0NDI1MzM4IG9heC10cmFjay1jb250ZW50IG9heC10cmFjay1kb25lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTQ0NDI1MzM4IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL3NraXJlc29ydC9jYXJsaWJhYmEvNDQ0MjUzMzgvXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTQ0NDI1MzM4ID4gYSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGZpZ3VyZSBjbGFzcz1cIm9heF9pbWFnZV9zbmlwcGV0XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTQ0NDI1MzM4ID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPG91dHB1dCBjbGFzcz1cIm9heC1vbnNjcm9sbC1pbWctbG9hZCBqcy1vbnNjcm9sbC1pbWdcIj48aW5wdXQgdHlwZT1cImhpZGRlblwiIGNsYXNzPVwib2F4LWxvYWQtcGF0aFwiIHZhbHVlPVwie3NyYzomcXVvdDtodHRwczovL3JlczEub2FzdGF0aWMuY29tL2ljb25zL29hL3NraVJlc29ydC9ibHVlX3Zpb2xldC9za2lSZXNvcnQuc3F1YXJlX3ZlY3Rvci5zdmcmcXVvdDssY2xhc3M6JnF1b3Q7b2F4X2ltYWdlX3NuaXBwZXRfY2F0ZWdvcnlfaWNvbiZxdW90OyxhbHQ6JnF1b3Q7JnF1b3Q7fVwiPjwvb3V0cHV0PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC00NDQyNTMzOCA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiBvdXRwdXQ6bnRoLWNoaWxkKDEpIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X3NuaXBwZXRfbG9jYXRvciBvYXhfaW1hZ2Vfc25pcHBldF9sb2NhdG9yXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTQ0NDI1MzM4ID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IC5vYXhfc25pcHBldF9sb2NhdG9yLm9heF9pbWFnZV9zbmlwcGV0X2xvY2F0b3IiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxzcGFuIGNsYXNzPVwib2F4X2VsbGlwc2lzXCI+TWFzaXZ1bCBNYXJhbXVyZcWfLVJvZG5hPC9zcGFuPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC00NDQyNTMzOCA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiAub2F4X3NuaXBwZXRfbG9jYXRvci5vYXhfaW1hZ2Vfc25pcHBldF9sb2NhdG9yID4gLm9heF9lbGxpcHNpcyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPG91dHB1dCBjbGFzcz1cIm9heC1vbnNjcm9sbC1pbWctbG9hZCBqcy1vbnNjcm9sbC1pbWdcIj48aW5wdXQgdHlwZT1cImhpZGRlblwiIGNsYXNzPVwib2F4LWxvYWQtcGF0aFwiIHZhbHVlPVwie3NyYzogJnF1b3Q7aHR0cHM6Ly9vYWQub3V0ZG9vcmFjdGl2ZS5jb20vYXBpL3N0YXRpY21hcD9pPTQ0NDI1MzM4JmFtcDtzaXplPWxvY2F0b3ImYW1wO3Byb2plY3Q9b2FkLXJvbWFuaWF0cmF2ZWwmcXVvdDssIGFsdCA6ICZxdW90O0hhcnTEgyBcXC8gQ8OicmxpYmFiYSZxdW90Oywgd2lkdGg6IDQwMCwgaGVpZ2h0OiAyMjV9XCI+PC9vdXRwdXQ+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTQ0NDI1MzM4ID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IC5vYXhfc25pcHBldF9sb2NhdG9yLm9heF9pbWFnZV9zbmlwcGV0X2xvY2F0b3IgPiBvdXRwdXQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxvdXRwdXQgY2xhc3M9XCJvYXgtb25zY3JvbGwtaW1nLWxvYWQganMtb25zY3JvbGwtaW1nXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTQ0NDI1MzM4ID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IG91dHB1dDpudGgtY2hpbGQoMykiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfZ2FsbGVyeV9zaGFkb3dcIj48L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNDQ0MjUzMzggPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gLm9heF9nYWxsZXJ5X3NoYWRvdyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9nYWxsZXJ5X3NoYWRvd19ob3ZcIj48L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNDQ0MjUzMzggPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gLm9heF9nYWxsZXJ5X3NoYWRvd19ob3YiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxmaWdjYXB0aW9uPlxuXHRcdFx0XHRcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwib2F4X2ZvbnRfc21hbGwgb2F4X2lubGluZV9ibG9jayBvYXhfbWFyZ19ib3R0b21fNlwiPlJlY29tYW5kYXJlIHJlZ2l1bmUgZGUgc2NoaTwvc3Bhbj5cblx0XHRcdFx0XHRcblx0XHRcdFx0XG5cdFx0XHRcdDxzdHJvbmcgY2xhc3M9XCJvYXhfYmxvY2sgb2F4X3NlbWlfYm9sZFwiPlxuXHRcdCBcdCBcdFx0Q8OicmxpYmFiYVxuXHRcdCBcdCBcdDwvc3Ryb25nPlxuXHRcdCBcdCA8L2ZpZ2NhcHRpb24+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTQ0NDI1MzM4ID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IGZpZ2NhcHRpb24iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxzcGFuIGNsYXNzPVwib2F4X2ZvbnRfc21hbGwgb2F4X2lubGluZV9ibG9jayBvYXhfbWFyZ19ib3R0b21fNlwiPlJlY29tYW5kYXJlIHJlZ2l1bmUgZGUgc2NoaTwvc3Bhbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNDQ0MjUzMzggPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gZmlnY2FwdGlvbiA+IC5vYXhfbWFyZ19ib3R0b21fNi5vYXhfaW5saW5lX2Jsb2NrLm9heF9mb250X3NtYWxsIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8c3Ryb25nIGNsYXNzPVwib2F4X2Jsb2NrIG9heF9zZW1pX2JvbGRcIj5cblx0XHQgXHQgXHRcdEPDonJsaWJhYmFcblx0XHQgXHQgXHQ8L3N0cm9uZz4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNDQ0MjUzMzggPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gZmlnY2FwdGlvbiA+IC5vYXhfYmxvY2sub2F4X3NlbWlfYm9sZCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBpZD1cIjNcIiBjbGFzcz1cIm9heF9tYXJnX3RvcF83N1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzMgIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2PlxuXHRcdFxuXHRcdFx0PGgzIGNsYXNzPVwib2F4X2ggb2F4X2N1c3RvbV9mb250IG9heF9oM1wiPk9mZXJ0ZTwvaDM+XG5cdFx0XG5cdFx0XG5cdCA8L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDMzICA+IGRpdjpudGgtY2hpbGQoMSkiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxoMyBjbGFzcz1cIm9heF9oIG9heF9jdXN0b21fZm9udCBvYXhfaDNcIj5PZmVydGU8L2gzPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzMgID4gZGl2Om50aC1jaGlsZCgxKSA+IC5vYXhfaDMiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfY29sX29mZnNldF9uZWcgb2F4X2NvbF9mdWxsd2lkdGhfb2Zmc2V0X25lZ18xXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzMyAgPiAub2F4X2NvbF9mdWxsd2lkdGhfb2Zmc2V0X25lZ18xLm9heF9jb2xfb2Zmc2V0X25lZyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9ub19tYXJnIG9heF90aWxlX3RlYXNlciBvYXhfY2xlYXJmaXhcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDMzICA+IC5vYXhfY29sX2Z1bGx3aWR0aF9vZmZzZXRfbmVnXzEub2F4X2NvbF9vZmZzZXRfbmVnID4gLm9heF90aWxlX3RlYXNlci5vYXhfbm9fbWFyZy5vYXhfY2xlYXJmaXgiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfY2xlYXJmaXggb2F4LXNsaWRlLWxpc3QtY29udCBvYXhfc2xpZGVfbGlzdF9jb250IG9heF9zbGlkZV9saXN0X2NvbnRfZXh0XCIgZGF0YS1fYWxwX3hfc2xpZGVfbGlzdD1cImRvbmVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDMzICA+IC5vYXhfY29sX2Z1bGx3aWR0aF9vZmZzZXRfbmVnXzEub2F4X2NvbF9vZmZzZXRfbmVnID4gLm9heF90aWxlX3RlYXNlci5vYXhfbm9fbWFyZy5vYXhfY2xlYXJmaXggPiAub2F4LXNsaWRlLWxpc3QtY29udC5vYXhfc2xpZGVfbGlzdF9jb250Lm9heF9zbGlkZV9saXN0X2NvbnRfZXh0IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X3NsaWRlX2NvbnRyb2wgb2F4X2ZsIG9heF9mb250X2dyYXkgb2F4LXNsaWRlLWxpc3QtcHJldiBvYXhfZmxleGJveCBvYXhfZmxleGJveF92X2NlbnRlciBvYXhfZmxleGJveF9oX2NlbnRlciBhbHAteC1jbGlja2FibGUgb2F4X2luYWN0aXZlXCI+XG5cdCBcdFx0PHNwYW4gY2xhc3M9XCJvYXgtaWNvbi1hcnJvd2hlYWQtbGVmdFwiPjwvc3Bhbj5cblx0IFx0PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzMyAgPiAub2F4X2NvbF9mdWxsd2lkdGhfb2Zmc2V0X25lZ18xLm9heF9jb2xfb2Zmc2V0X25lZyA+IC5vYXhfdGlsZV90ZWFzZXIub2F4X25vX21hcmcub2F4X2NsZWFyZml4ID4gLm9heC1zbGlkZS1saXN0LWNvbnQub2F4X3NsaWRlX2xpc3RfY29udC5vYXhfc2xpZGVfbGlzdF9jb250X2V4dCA+IC5vYXgtc2xpZGUtbGlzdC1wcmV2Lm9heF9pbmFjdGl2ZS5vYXhfc2xpZGVfY29udHJvbCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHNwYW4gY2xhc3M9XCJvYXgtaWNvbi1hcnJvd2hlYWQtbGVmdFwiPjwvc3Bhbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDMzICA+IC5vYXhfY29sX2Z1bGx3aWR0aF9vZmZzZXRfbmVnXzEub2F4X2NvbF9vZmZzZXRfbmVnID4gLm9heF90aWxlX3RlYXNlci5vYXhfbm9fbWFyZy5vYXhfY2xlYXJmaXggPiAub2F4LXNsaWRlLWxpc3QtY29udC5vYXhfc2xpZGVfbGlzdF9jb250Lm9heF9zbGlkZV9saXN0X2NvbnRfZXh0ID4gLm9heC1zbGlkZS1saXN0LXByZXYub2F4X2luYWN0aXZlLm9heF9zbGlkZV9jb250cm9sID4gLm9heC1pY29uLWFycm93aGVhZC1sZWZ0IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X3NsaWRlX2xpc3Qgb2F4X3RpbGVfc25pcHBldF9saXN0IG9heF9mbFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF90aWxlX3NuaXBwZXRfbGlzdCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHVsIGNsYXNzPVwib2F4X3JvdyBvYXgtc2xpZGUtbGlzdCBvYXgtc25pcHBldC1jb250YWluZXJcIiBzdHlsZT1cInRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMHB4LCAwcHgsIDBweCk7XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X3RpbGVfc25pcHBldF9saXN0ID4gLm9heC1zbGlkZS1saXN0Lm9heC1zbmlwcGV0LWNvbnRhaW5lci5vYXhfcm93IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGkgY2xhc3M9XCJvYXhfY29sIG9heF9jb2xfeHNfNiBvYXhfY29sX3NfNCBvYXhfY29sX21fNCBvYXhfY29sX2RfMyBvYXhfaW5saW5lIG9heC1zbGlkZS1saXN0LWl0ZW0gb2F4LWlkIG9heC1pZC04MDM2MTM3MDBcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAzNjEzNzAwLm9heF9jb2xfeHNfNi5vYXhfY29sX3NfNCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9vZmZlci9kcnVtZXRpZS9kcnVtZXRpZS1kZS00LXppbGUtaW4tcmV0ZXphdC84MDM2MTM3MDAvXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMzYxMzcwMC5vYXhfY29sX3hzXzYub2F4X2NvbF9zXzQgPiBhIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4LXRpbGUtc25pcHBldCBvYXhfaGVpZ2h0X2Z1bGwgb2F4LWlkIG9heC1pZC04MDM2MTM3MDAgb2F4LXRyYWNrLWNvbnRlbnQgb2F4LXRyYWNrLWRvbmVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAzNjEzNzAwLm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8c3Bhbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAzNjEzNzAwLm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsID4gc3BhbiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGZpZ3VyZSBjbGFzcz1cIm9heF90aWxlX3NuaXBwZXRcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAzNjEzNzAwLm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsID4gc3BhbiA+IC5vYXhfdGlsZV9zbmlwcGV0IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8b3V0cHV0IGNsYXNzPVwib2F4LW9uc2Nyb2xsLWltZy1sb2FkIGpzLW9uc2Nyb2xsLWltZ1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDM2MTM3MDAub2F4LXRpbGUtc25pcHBldC5vYXhfaGVpZ2h0X2Z1bGwgPiBzcGFuID4gLm9heF90aWxlX3NuaXBwZXQgPiBvdXRwdXQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfZ2FsbGVyeV9zaGFkb3dcIj48L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAzNjEzNzAwLm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsID4gc3BhbiA+IC5vYXhfdGlsZV9zbmlwcGV0ID4gLm9heF9nYWxsZXJ5X3NoYWRvdyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9nYWxsZXJ5X3NoYWRvd19ob3ZcIj48L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAzNjEzNzAwLm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsID4gc3BhbiA+IC5vYXhfdGlsZV9zbmlwcGV0ID4gLm9heF9nYWxsZXJ5X3NoYWRvd19ob3YiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxmaWdjYXB0aW9uPlxuXHQgXHRcdFxuXHQgXHQgXHREcnVtZXRpZSBkZSA0IHppbGUgaW4gUmV0ZXphdFxuXHQgXHQ8L2ZpZ2NhcHRpb24+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMzYxMzcwMC5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4gPiAub2F4X3RpbGVfc25pcHBldCA+IGZpZ2NhcHRpb24iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaSBjbGFzcz1cIm9heF9jb2wgb2F4X2NvbF94c182IG9heF9jb2xfc180IG9heF9jb2xfbV80IG9heF9jb2xfZF8zIG9heF9pbmxpbmUgb2F4LXNsaWRlLWxpc3QtaXRlbSBvYXgtaWQgb2F4LWlkLTgwMDQ5NzQxMFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDA0OTc0MTAub2F4X2NvbF94c182Lm9heF9jb2xfc180IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL29mZmVyL21pbnRlLWNvcnAtc2ktc3Bpcml0L3BpY25pYy1sYS1jb2xpYmUvODAwNDk3NDEwL1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDA0OTc0MTAub2F4X2NvbF94c182Lm9heF9jb2xfc180ID4gYSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heC10aWxlLXNuaXBwZXQgb2F4X2hlaWdodF9mdWxsIG9heC1pZCBvYXgtaWQtODAwNDk3NDEwIG9heC10cmFjay1jb250ZW50IG9heC10cmFjay1kb25lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQxMC5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHNwYW4+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQxMC5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxmaWd1cmUgY2xhc3M9XCJvYXhfdGlsZV9zbmlwcGV0XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQxMC5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4gPiAub2F4X3RpbGVfc25pcHBldCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPG91dHB1dCBjbGFzcz1cIm9heC1vbnNjcm9sbC1pbWctbG9hZCBqcy1vbnNjcm9sbC1pbWdcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAwNDk3NDEwLm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsID4gc3BhbiA+IC5vYXhfdGlsZV9zbmlwcGV0ID4gb3V0cHV0IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2dhbGxlcnlfc2hhZG93XCI+PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQxMC5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4gPiAub2F4X3RpbGVfc25pcHBldCA+IC5vYXhfZ2FsbGVyeV9zaGFkb3ciCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfZ2FsbGVyeV9zaGFkb3dfaG92XCI+PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQxMC5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4gPiAub2F4X3RpbGVfc25pcHBldCA+IC5vYXhfZ2FsbGVyeV9zaGFkb3dfaG92IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZmlnY2FwdGlvbj5cblx0IFx0XHRcblx0IFx0IFx0UGljbmljIGxhIGNvbGliZVxuXHQgXHQ8L2ZpZ2NhcHRpb24+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQxMC5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4gPiAub2F4X3RpbGVfc25pcHBldCA+IGZpZ2NhcHRpb24iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaSBjbGFzcz1cIm9heF9jb2wgb2F4X2NvbF94c182IG9heF9jb2xfc180IG9heF9jb2xfbV80IG9heF9jb2xfZF8zIG9heF9pbmxpbmUgb2F4LXNsaWRlLWxpc3QtaXRlbSBvYXgtaWQgb2F4LWlkLTgwMTEzOTczOVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDExMzk3Mzkub2F4X2NvbF94c182Lm9heF9jb2xfc180IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL29mZmVyL29sYXJpdC9hdGVsaWVyLWNlcmFtaWNhLWNvcnVuZC84MDExMzk3MzkvXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMTEzOTczOS5vYXhfY29sX3hzXzYub2F4X2NvbF9zXzQgPiBhIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4LXRpbGUtc25pcHBldCBvYXhfaGVpZ2h0X2Z1bGwgb2F4LWlkIG9heC1pZC04MDExMzk3Mzkgb2F4LXRyYWNrLWNvbnRlbnQgb2F4LXRyYWNrLWRvbmVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAxMTM5NzM5Lm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8c3Bhbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAxMTM5NzM5Lm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsID4gc3BhbiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGZpZ3VyZSBjbGFzcz1cIm9heF90aWxlX3NuaXBwZXRcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAxMTM5NzM5Lm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsID4gc3BhbiA+IC5vYXhfdGlsZV9zbmlwcGV0IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8b3V0cHV0IGNsYXNzPVwib2F4LW9uc2Nyb2xsLWltZy1sb2FkIGpzLW9uc2Nyb2xsLWltZ1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDExMzk3Mzkub2F4LXRpbGUtc25pcHBldC5vYXhfaGVpZ2h0X2Z1bGwgPiBzcGFuID4gLm9heF90aWxlX3NuaXBwZXQgPiBvdXRwdXQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfZ2FsbGVyeV9zaGFkb3dcIj48L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAxMTM5NzM5Lm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsID4gc3BhbiA+IC5vYXhfdGlsZV9zbmlwcGV0ID4gLm9heF9nYWxsZXJ5X3NoYWRvdyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9nYWxsZXJ5X3NoYWRvd19ob3ZcIj48L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAxMTM5NzM5Lm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsID4gc3BhbiA+IC5vYXhfdGlsZV9zbmlwcGV0ID4gLm9heF9nYWxsZXJ5X3NoYWRvd19ob3YiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxmaWdjYXB0aW9uPlxuXHQgXHRcdFxuXHQgXHQgXHRBdGVsaWVyIENlcmFtaWPEgyBDb3J1bmRcblx0IFx0PC9maWdjYXB0aW9uPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDExMzk3Mzkub2F4LXRpbGUtc25pcHBldC5vYXhfaGVpZ2h0X2Z1bGwgPiBzcGFuID4gLm9heF90aWxlX3NuaXBwZXQgPiBmaWdjYXB0aW9uIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGkgY2xhc3M9XCJvYXhfY29sIG9heF9jb2xfeHNfNiBvYXhfY29sX3NfNCBvYXhfY29sX21fNCBvYXhfY29sX2RfMyBvYXhfaW5saW5lIG9heC1zbGlkZS1saXN0LWl0ZW0gb2F4LWlkIG9heC1pZC04MDA0OTc0NjlcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAwNDk3NDY5Lm9heF9jb2xfeHNfNi5vYXhfY29sX3NfNCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9vZmZlci9taW50ZS1jb3JwLXNpLXNwaXJpdC9mb3JhZ2luZy1pbi1wYWR1cmUtYWxhdHVyaS1kZS11bi1iaW9sb2ctY3VsZXMtZmxvcmEtc3BvbnRhbmEtc2ktY2l1cGVyY2kvODAwNDk3NDY5L1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDA0OTc0Njkub2F4X2NvbF94c182Lm9heF9jb2xfc180ID4gYSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heC10aWxlLXNuaXBwZXQgb2F4X2hlaWdodF9mdWxsIG9heC1pZCBvYXgtaWQtODAwNDk3NDY5IG9heC10cmFjay1jb250ZW50IG9heC10cmFjay1kb25lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQ2OS5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHNwYW4+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQ2OS5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxmaWd1cmUgY2xhc3M9XCJvYXhfdGlsZV9zbmlwcGV0XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQ2OS5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4gPiAub2F4X3RpbGVfc25pcHBldCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPG91dHB1dCBjbGFzcz1cIm9heC1vbnNjcm9sbC1pbWctbG9hZCBqcy1vbnNjcm9sbC1pbWdcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAwNDk3NDY5Lm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsID4gc3BhbiA+IC5vYXhfdGlsZV9zbmlwcGV0ID4gb3V0cHV0IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2dhbGxlcnlfc2hhZG93XCI+PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQ2OS5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4gPiAub2F4X3RpbGVfc25pcHBldCA+IC5vYXhfZ2FsbGVyeV9zaGFkb3ciCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfZ2FsbGVyeV9zaGFkb3dfaG92XCI+PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQ2OS5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4gPiAub2F4X3RpbGVfc25pcHBldCA+IC5vYXhfZ2FsbGVyeV9zaGFkb3dfaG92IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZmlnY2FwdGlvbj5cblx0IFx0XHRcblx0IFx0IFx0Rm9yYWdpbmcgw65uIHDEg2R1cmUgYWzEg3R1cmkgZGUgdW4gYmlvbG9nOiBDdWxlcyBmbG9yxIMgc3BvbnRhbsSDIMiZaSBjaXVwZXJjaVxuXHQgXHQ8L2ZpZ2NhcHRpb24+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQ2OS5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4gPiAub2F4X3RpbGVfc25pcHBldCA+IGZpZ2NhcHRpb24iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaSBjbGFzcz1cIm9heF9jb2wgb2F4X2NvbF94c182IG9heF9jb2xfc180IG9heF9jb2xfbV80IG9heF9jb2xfZF8zIG9heF9pbmxpbmUgb2F4LXNsaWRlLWxpc3QtaXRlbSBvYXgtaWQgb2F4LWlkLTgwMDQ5NzQ1OVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDA0OTc0NTkub2F4X2NvbF94c182Lm9heF9jb2xfc180IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL29mZmVyL21pbnRlLWNvcnAtc2ktc3Bpcml0L3RyYW12YWktZXhwcmVzdWwtYnJhbnplaS1kZWd1c3RhcmUtZGUtYnJhbnpldHVyaS1zaS1wcm9kdXNlLWxvY2FsZS1pbi84MDA0OTc0NTkvXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQ1OS5vYXhfY29sX3hzXzYub2F4X2NvbF9zXzQgPiBhIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4LXRpbGUtc25pcHBldCBvYXhfaGVpZ2h0X2Z1bGwgb2F4LWlkIG9heC1pZC04MDA0OTc0NTkgb2F4LXRyYWNrLWNvbnRlbnQgb2F4LXRyYWNrLWRvbmVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAwNDk3NDU5Lm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8c3Bhbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAwNDk3NDU5Lm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsID4gc3BhbiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGZpZ3VyZSBjbGFzcz1cIm9heF90aWxlX3NuaXBwZXRcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAwNDk3NDU5Lm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsID4gc3BhbiA+IC5vYXhfdGlsZV9zbmlwcGV0IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8b3V0cHV0IGNsYXNzPVwib2F4LW9uc2Nyb2xsLWltZy1sb2FkIGpzLW9uc2Nyb2xsLWltZ1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDA0OTc0NTkub2F4LXRpbGUtc25pcHBldC5vYXhfaGVpZ2h0X2Z1bGwgPiBzcGFuID4gLm9heF90aWxlX3NuaXBwZXQgPiBvdXRwdXQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfZ2FsbGVyeV9zaGFkb3dcIj48L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAwNDk3NDU5Lm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsID4gc3BhbiA+IC5vYXhfdGlsZV9zbmlwcGV0ID4gLm9heF9nYWxsZXJ5X3NoYWRvdyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9nYWxsZXJ5X3NoYWRvd19ob3ZcIj48L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAwNDk3NDU5Lm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsID4gc3BhbiA+IC5vYXhfdGlsZV9zbmlwcGV0ID4gLm9heF9nYWxsZXJ5X3NoYWRvd19ob3YiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxmaWdjYXB0aW9uPlxuXHQgXHRcdFxuXHQgXHQgXHRUcmFtdmFpIEV4cHJlc3VsIEJyw6JuemVpOiBEZWd1c3RhcmUgZGUgYnLDom56ZXR1cmkgyJlpIHByb2R1c2UgbG9jYWxlIMOubiB0cmFtdmFpXG5cdCBcdDwvZmlnY2FwdGlvbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAwNDk3NDU5Lm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsID4gc3BhbiA+IC5vYXhfdGlsZV9zbmlwcGV0ID4gZmlnY2FwdGlvbiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpIGNsYXNzPVwib2F4X2NvbCBvYXhfY29sX3hzXzYgb2F4X2NvbF9zXzQgb2F4X2NvbF9tXzQgb2F4X2NvbF9kXzMgb2F4X2lubGluZSBvYXgtc2xpZGUtbGlzdC1pdGVtIG9heC1pZCBvYXgtaWQtODAwNDk3NDQ4XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQ0OC5vYXhfY29sX3hzXzYub2F4X2NvbF9zXzQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vb2ZmZXIvbWludGUtY29ycC1zaS1zcGlyaXQvcGFjaGV0LXBpY25pYy1zaS1icnVuY2gtaW4tY3VydGUtdHJhZGl0aW9uYWxhLXBlbnRydS1ncnVwdXJpLzgwMDQ5NzQ0OC9cIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAwNDk3NDQ4Lm9heF9jb2xfeHNfNi5vYXhfY29sX3NfNCA+IGEiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXgtdGlsZS1zbmlwcGV0IG9heF9oZWlnaHRfZnVsbCBvYXgtaWQgb2F4LWlkLTgwMDQ5NzQ0OCBvYXgtdHJhY2stY29udGVudCBvYXgtdHJhY2stZG9uZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDA0OTc0NDgub2F4LXRpbGUtc25pcHBldC5vYXhfaGVpZ2h0X2Z1bGwiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxzcGFuPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDA0OTc0NDgub2F4LXRpbGUtc25pcHBldC5vYXhfaGVpZ2h0X2Z1bGwgPiBzcGFuIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZmlndXJlIGNsYXNzPVwib2F4X3RpbGVfc25pcHBldFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDA0OTc0NDgub2F4LXRpbGUtc25pcHBldC5vYXhfaGVpZ2h0X2Z1bGwgPiBzcGFuID4gLm9heF90aWxlX3NuaXBwZXQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxvdXRwdXQgY2xhc3M9XCJvYXgtb25zY3JvbGwtaW1nLWxvYWQganMtb25zY3JvbGwtaW1nXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQ0OC5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4gPiAub2F4X3RpbGVfc25pcHBldCA+IG91dHB1dCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9nYWxsZXJ5X3NoYWRvd1wiPjwvZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDA0OTc0NDgub2F4LXRpbGUtc25pcHBldC5vYXhfaGVpZ2h0X2Z1bGwgPiBzcGFuID4gLm9heF90aWxlX3NuaXBwZXQgPiAub2F4X2dhbGxlcnlfc2hhZG93IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2dhbGxlcnlfc2hhZG93X2hvdlwiPjwvZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDA0OTc0NDgub2F4LXRpbGUtc25pcHBldC5vYXhfaGVpZ2h0X2Z1bGwgPiBzcGFuID4gLm9heF90aWxlX3NuaXBwZXQgPiAub2F4X2dhbGxlcnlfc2hhZG93X2hvdiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGZpZ2NhcHRpb24+XG5cdCBcdFx0XG5cdCBcdCBcdFBhY2hldCBwaWNuaWMgyJlpIGJydW5jaCDDrm4gY3VydGUgdHJhZGnIm2lvbmFsxIMgcGVudHJ1IGdydXB1cmlcblx0IFx0PC9maWdjYXB0aW9uPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDA0OTc0NDgub2F4LXRpbGUtc25pcHBldC5vYXhfaGVpZ2h0X2Z1bGwgPiBzcGFuID4gLm9heF90aWxlX3NuaXBwZXQgPiBmaWdjYXB0aW9uIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGkgY2xhc3M9XCJvYXhfY29sIG9heF9jb2xfeHNfNiBvYXhfY29sX3NfNCBvYXhfY29sX21fNCBvYXhfY29sX2RfMyBvYXhfaW5saW5lIG9heC1zbGlkZS1saXN0LWl0ZW0gb2F4LWlkIG9heC1pZC04MDA0OTc0MjhcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAwNDk3NDI4Lm9heF9jb2xfeHNfNi5vYXhfY29sX3NfNCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9vZmZlci9taW50ZS1jb3JwLXNpLXNwaXJpdC9icnVuY2gtcHJpdmF0LWN1LXByb2R1Y2F0b3JpaS1sb2NhbGkvODAwNDk3NDI4L1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDA0OTc0Mjgub2F4X2NvbF94c182Lm9heF9jb2xfc180ID4gYSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heC10aWxlLXNuaXBwZXQgb2F4X2hlaWdodF9mdWxsIG9heC1pZCBvYXgtaWQtODAwNDk3NDI4IG9heC10cmFjay1jb250ZW50IG9heC10cmFjay1kb25lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQyOC5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHNwYW4+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQyOC5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxmaWd1cmUgY2xhc3M9XCJvYXhfdGlsZV9zbmlwcGV0XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQyOC5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4gPiAub2F4X3RpbGVfc25pcHBldCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPG91dHB1dCBjbGFzcz1cIm9heC1vbnNjcm9sbC1pbWctbG9hZCBqcy1vbnNjcm9sbC1pbWdcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAwNDk3NDI4Lm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsID4gc3BhbiA+IC5vYXhfdGlsZV9zbmlwcGV0ID4gb3V0cHV0IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2dhbGxlcnlfc2hhZG93XCI+PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQyOC5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4gPiAub2F4X3RpbGVfc25pcHBldCA+IC5vYXhfZ2FsbGVyeV9zaGFkb3ciCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfZ2FsbGVyeV9zaGFkb3dfaG92XCI+PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQyOC5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4gPiAub2F4X3RpbGVfc25pcHBldCA+IC5vYXhfZ2FsbGVyeV9zaGFkb3dfaG92IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZmlnY2FwdGlvbj5cblx0IFx0XHRcblx0IFx0IFx0QnJ1bmNoIHByaXZhdCBjdSBwcm9kdWPEg3RvcmlpIGxvY2FsaVxuXHQgXHQ8L2ZpZ2NhcHRpb24+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQyOC5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4gPiAub2F4X3RpbGVfc25pcHBldCA+IGZpZ2NhcHRpb24iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaSBjbGFzcz1cIm9heF9jb2wgb2F4X2NvbF94c182IG9heF9jb2xfc180IG9heF9jb2xfbV80IG9heF9jb2xfZF8zIG9heF9pbmxpbmUgb2F4LXNsaWRlLWxpc3QtaXRlbSBvYXgtaWQgb2F4LWlkLTgwMDQ5NzQyMlwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDA0OTc0MjIub2F4X2NvbF94c182Lm9heF9jb2xfc180IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL29mZmVyL21pbnRlLWNvcnAtc2ktc3Bpcml0L2JydW5jaC1wcml2YXQtaW50ci1vLWdvc3BvZGFyaWUtdHJhZGl0aW9uYWxhLWRpbi10YXJhLW9sdHVsdWkvODAwNDk3NDIyL1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDA0OTc0MjIub2F4X2NvbF94c182Lm9heF9jb2xfc180ID4gYSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heC10aWxlLXNuaXBwZXQgb2F4X2hlaWdodF9mdWxsIG9heC1pZCBvYXgtaWQtODAwNDk3NDIyIG9heC10cmFjay1jb250ZW50IG9heC10cmFjay1kb25lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQyMi5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHNwYW4+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQyMi5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxmaWd1cmUgY2xhc3M9XCJvYXhfdGlsZV9zbmlwcGV0XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQyMi5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4gPiAub2F4X3RpbGVfc25pcHBldCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPG91dHB1dCBjbGFzcz1cIm9heC1vbnNjcm9sbC1pbWctbG9hZCBqcy1vbnNjcm9sbC1pbWdcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAwNDk3NDIyLm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsID4gc3BhbiA+IC5vYXhfdGlsZV9zbmlwcGV0ID4gb3V0cHV0IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2dhbGxlcnlfc2hhZG93XCI+PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQyMi5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4gPiAub2F4X3RpbGVfc25pcHBldCA+IC5vYXhfZ2FsbGVyeV9zaGFkb3ciCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfZ2FsbGVyeV9zaGFkb3dfaG92XCI+PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQyMi5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4gPiAub2F4X3RpbGVfc25pcHBldCA+IC5vYXhfZ2FsbGVyeV9zaGFkb3dfaG92IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZmlnY2FwdGlvbj5cblx0IFx0XHRcblx0IFx0IFx0QnJ1bmNoIHByaXZhdCDDrm50ci1vIGdvc3BvZMSDcmllIHRyYWRpyJtpb25hbMSDIGRpbiDImmFyYSBPbHR1bHVpXG5cdCBcdDwvZmlnY2FwdGlvbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAwNDk3NDIyLm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsID4gc3BhbiA+IC5vYXhfdGlsZV9zbmlwcGV0ID4gZmlnY2FwdGlvbiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpIGNsYXNzPVwib2F4X2NvbCBvYXhfY29sX3hzXzYgb2F4X2NvbF9zXzQgb2F4X2NvbF9tXzQgb2F4X2NvbF9kXzMgb2F4X2lubGluZSBvYXgtc2xpZGUtbGlzdC1pdGVtIG9heC1pZCBvYXgtaWQtODAwNDk3NDE5XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQxOS5vYXhfY29sX3hzXzYub2F4X2NvbF9zXzQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vb2ZmZXIvbWludGUtY29ycC1zaS1zcGlyaXQvZHJ1bWV0aWUtY3UtcGljbmljLXNwcmUtY2FiYW5hLXN1cnUvODAwNDk3NDE5L1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDA0OTc0MTkub2F4X2NvbF94c182Lm9heF9jb2xfc180ID4gYSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heC10aWxlLXNuaXBwZXQgb2F4X2hlaWdodF9mdWxsIG9heC1pZCBvYXgtaWQtODAwNDk3NDE5IG9heC10cmFjay1jb250ZW50IG9heC10cmFjay1kb25lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQxOS5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHNwYW4+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQxOS5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxmaWd1cmUgY2xhc3M9XCJvYXhfdGlsZV9zbmlwcGV0XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQxOS5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4gPiAub2F4X3RpbGVfc25pcHBldCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPG91dHB1dCBjbGFzcz1cIm9heC1vbnNjcm9sbC1pbWctbG9hZCBqcy1vbnNjcm9sbC1pbWdcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAwNDk3NDE5Lm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsID4gc3BhbiA+IC5vYXhfdGlsZV9zbmlwcGV0ID4gb3V0cHV0IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2dhbGxlcnlfc2hhZG93XCI+PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQxOS5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4gPiAub2F4X3RpbGVfc25pcHBldCA+IC5vYXhfZ2FsbGVyeV9zaGFkb3ciCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfZ2FsbGVyeV9zaGFkb3dfaG92XCI+PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQxOS5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4gPiAub2F4X3RpbGVfc25pcHBldCA+IC5vYXhfZ2FsbGVyeV9zaGFkb3dfaG92IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZmlnY2FwdGlvbj5cblx0IFx0XHRcblx0IFx0IFx0RHJ1bWXIm2llIGN1IHBpY25pYyBzcHJlIENhYmFuYSBTdXJ1XG5cdCBcdDwvZmlnY2FwdGlvbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAwNDk3NDE5Lm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsID4gc3BhbiA+IC5vYXhfdGlsZV9zbmlwcGV0ID4gZmlnY2FwdGlvbiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpIGNsYXNzPVwib2F4X2NvbCBvYXhfY29sX3hzXzYgb2F4X2NvbF9zXzQgb2F4X2NvbF9tXzQgb2F4X2NvbF9kXzMgb2F4X2lubGluZSBvYXgtc2xpZGUtbGlzdC1pdGVtIG9heC1pZCBvYXgtaWQtODAwNDk3NDE1XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQxNS5vYXhfY29sX3hzXzYub2F4X2NvbF9zXzQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vb2ZmZXIvbWludGUtY29ycC1zaS1zcGlyaXQvbGl2YWRhLWNpc3RlcmNpZW5pbG9yLTQ2LzgwMDQ5NzQxNS9cIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAwNDk3NDE1Lm9heF9jb2xfeHNfNi5vYXhfY29sX3NfNCA+IGEiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXgtdGlsZS1zbmlwcGV0IG9heF9oZWlnaHRfZnVsbCBvYXgtaWQgb2F4LWlkLTgwMDQ5NzQxNSBvYXgtdHJhY2stY29udGVudCBvYXgtdHJhY2stZG9uZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDA0OTc0MTUub2F4LXRpbGUtc25pcHBldC5vYXhfaGVpZ2h0X2Z1bGwiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxzcGFuPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDA0OTc0MTUub2F4LXRpbGUtc25pcHBldC5vYXhfaGVpZ2h0X2Z1bGwgPiBzcGFuIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZmlndXJlIGNsYXNzPVwib2F4X3RpbGVfc25pcHBldFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDA0OTc0MTUub2F4LXRpbGUtc25pcHBldC5vYXhfaGVpZ2h0X2Z1bGwgPiBzcGFuID4gLm9heF90aWxlX3NuaXBwZXQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxvdXRwdXQgY2xhc3M9XCJvYXgtb25zY3JvbGwtaW1nLWxvYWQganMtb25zY3JvbGwtaW1nXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQxNS5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4gPiAub2F4X3RpbGVfc25pcHBldCA+IG91dHB1dCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9nYWxsZXJ5X3NoYWRvd1wiPjwvZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDA0OTc0MTUub2F4LXRpbGUtc25pcHBldC5vYXhfaGVpZ2h0X2Z1bGwgPiBzcGFuID4gLm9heF90aWxlX3NuaXBwZXQgPiAub2F4X2dhbGxlcnlfc2hhZG93IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2dhbGxlcnlfc2hhZG93X2hvdlwiPjwvZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDA0OTc0MTUub2F4LXRpbGUtc25pcHBldC5vYXhfaGVpZ2h0X2Z1bGwgPiBzcGFuID4gLm9heF90aWxlX3NuaXBwZXQgPiAub2F4X2dhbGxlcnlfc2hhZG93X2hvdiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGZpZ2NhcHRpb24+XG5cdCBcdFx0XG5cdCBcdCBcdExpdmFkYSBDaXN0ZXJjaWVuaWxvciA0NlxuXHQgXHQ8L2ZpZ2NhcHRpb24+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQxNS5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4gPiAub2F4X3RpbGVfc25pcHBldCA+IGZpZ2NhcHRpb24iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfc2xpZGVfY29udHJvbCBvYXhfZmwgb2F4X2ZvbnRfZ3JheSBvYXgtc2xpZGUtbGlzdC1uZXh0IG9heF9mbGV4Ym94IG9heF9mbGV4Ym94X3ZfY2VudGVyIG9heF9mbGV4Ym94X2hfY2VudGVyIGFscC14LWNsaWNrYWJsZVwiPlxuXHQgXHRcdDxzcGFuIGNsYXNzPVwib2F4LWljb24tYXJyb3doZWFkLXJpZ2h0XCI+PC9zcGFuPlxuXHQgXHQ8L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDMzICA+IC5vYXhfY29sX2Z1bGx3aWR0aF9vZmZzZXRfbmVnXzEub2F4X2NvbF9vZmZzZXRfbmVnID4gLm9heF90aWxlX3RlYXNlci5vYXhfbm9fbWFyZy5vYXhfY2xlYXJmaXggPiAub2F4LXNsaWRlLWxpc3QtY29udC5vYXhfc2xpZGVfbGlzdF9jb250Lm9heF9zbGlkZV9saXN0X2NvbnRfZXh0ID4gLm9heC1zbGlkZS1saXN0LW5leHQub2F4X3NsaWRlX2NvbnRyb2wub2F4X2ZvbnRfZ3JheSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHNwYW4gY2xhc3M9XCJvYXgtaWNvbi1hcnJvd2hlYWQtcmlnaHRcIj48L3NwYW4+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzMyAgPiAub2F4X2NvbF9mdWxsd2lkdGhfb2Zmc2V0X25lZ18xLm9heF9jb2xfb2Zmc2V0X25lZyA+IC5vYXhfdGlsZV90ZWFzZXIub2F4X25vX21hcmcub2F4X2NsZWFyZml4ID4gLm9heC1zbGlkZS1saXN0LWNvbnQub2F4X3NsaWRlX2xpc3RfY29udC5vYXhfc2xpZGVfbGlzdF9jb250X2V4dCA+IC5vYXgtc2xpZGUtbGlzdC1uZXh0Lm9heF9zbGlkZV9jb250cm9sLm9heF9mb250X2dyYXkgPiAub2F4LWljb24tYXJyb3doZWFkLXJpZ2h0IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGlkPVwiNFwiIGNsYXNzPVwib2F4X21hcmdfdG9wXzc3IG9heF9wYWdlV2lkZ2V0X2RpdmlkZXJcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDM0ICIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9jb2xfb2Zmc2V0X25lZyBvYXhfY29sX29mZnNldF9uZWdfZnVsbCBvYXhfY29sX2Z1bGx3aWR0aF9mdWxsIG9heF9tYXJnX2JvdHRvbV80NFwiPlxuXHRcdDxocj5cblx0PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzNCAgPiAub2F4X2NvbF9mdWxsd2lkdGhfZnVsbC5vYXhfY29sX29mZnNldF9uZWdfZnVsbC5vYXhfbWFyZ19ib3R0b21fNDQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxocj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDM0ICA+IC5vYXhfY29sX2Z1bGx3aWR0aF9mdWxsLm9heF9jb2xfb2Zmc2V0X25lZ19mdWxsLm9heF9tYXJnX2JvdHRvbV80NCA+IGhyIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X3BhZ2VXaWRnZXRfZGl2aWRlcl9pY29uIG9heC1pY29uLW1vdW50YWluIG9heF9saW5rX2NvbG9yXCI+PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWljb24tbW91bnRhaW4iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxoMiBjbGFzcz1cIm9heF9wYWdlV2lkZ2V0X2RpdmlkZXJfdGl0bGUgb2F4X21hcmdfdG9wXzggb2F4X2xpbmVfaGVpZ2h0XzMzIG9heF9mb250X2dyZXlfZGFyayBvYXhfZm9udF9sYXJnZTI0IG9heF91cHBlcmNhc2VcIj5JbnNwaXLEgy10ZSDImWkgZGVzY29wZXLEgyBSb23Dom5pYTwvaDI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzNCAgPiBoMiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBpZD1cIjVcIiBjbGFzcz1cIm9heF9tYXJnX3RvcF83NyBcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDM1ICIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdj5cblx0XHRcblx0PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzNSAgPiBkaXY6bnRoLWNoaWxkKDEpIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X21hcmdfdG9wXzExIG9heF90ZXh0X2NlbnRlckZpcnN0TGluZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF90ZXh0X2NlbnRlckZpcnN0TGluZS5vYXhfbWFyZ190b3BfMTEiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXY+PHA+Q2F1yJtpIGlkZWkgZGUgY8SDbMSDdG9yaWU/IEFjZXN0IGdoaWQgZGUgY8SDbMSDdG9yaWUgZXhjbHVzaXYgw67Im2kmbmJzcDt2YSBwZXJtaXRlIHBsYW5pZmljYXJlYSBzaW1wbMSDIGEmbmJzcDtjxINsxIN0b3JpZWkgcGVyZmVjdMSDLiBBZmzEgyBkZXNwcmUgY2VsZSBtYWkgaW50ZXJlc2FudGUgY29syJt1cmkgYWxlIFJvbcOibmllaSwgZXZlbmltZW50ZSBjYXJlIG51IHRyZWJ1aWUgcmF0YXRlLCBjZWxlIG1haSBub3RhYmlsZSBwdW5jdGUgZGUgaW50ZXJlcyDImWkgbG9jdXJpIGRlIGNhemFyZSBydXN0aWNlLjwvcD48L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfdGV4dF9jZW50ZXJGaXJzdExpbmUub2F4X21hcmdfdG9wXzExID4gZGl2IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8cD5DYXXIm2kgaWRlaSBkZSBjxINsxIN0b3JpZT8gQWNlc3QgZ2hpZCBkZSBjxINsxIN0b3JpZSBleGNsdXNpdiDDrsibaSZuYnNwO3ZhIHBlcm1pdGUgcGxhbmlmaWNhcmVhIHNpbXBsxIMgYSZuYnNwO2PEg2zEg3RvcmllaSBwZXJmZWN0xIMuIEFmbMSDIGRlc3ByZSBjZWxlIG1haSBpbnRlcmVzYW50ZSBjb2zIm3VyaSBhbGUgUm9tw6JuaWVpLCBldmVuaW1lbnRlIGNhcmUgbnUgdHJlYnVpZSByYXRhdGUsIGNlbGUgbWFpIG5vdGFiaWxlIHB1bmN0ZSBkZSBpbnRlcmVzIMiZaSBsb2N1cmkgZGUgY2F6YXJlIHJ1c3RpY2UuPC9wPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF90ZXh0X2NlbnRlckZpcnN0TGluZS5vYXhfbWFyZ190b3BfMTEgPiBkaXYgPiBwIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGlkPVwiNlwiIGNsYXNzPVwib2F4X21hcmdfdG9wXzc3XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzNiAiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfY29sX29mZnNldF9uZWcgb2F4X2NvbF9vZmZzZXRfbmVnX2Z1bGwgb2F4X2NvbF9mdWxsd2lkdGhfZnVsbCBvYXhfbWFyZ19ib3R0b21fNDQgXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzNiAgPiAub2F4X2NvbF9mdWxsd2lkdGhfZnVsbC5vYXhfY29sX29mZnNldF9uZWdfZnVsbC5vYXhfbWFyZ19ib3R0b21fNDQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfcGFnZVdpZGdldF90ZWFzZXIgb2F4X3BhZ2VXaWRnZXRfdGVhc2VyX2JnX2ltZ1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9wYWdlV2lkZ2V0X3RlYXNlciIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heC1vbnNjcm9sbC1pbWctbG9hZCBvYXhfaGVpZ2h0X2Z1bGxcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfaGVpZ2h0X2Z1bGwub2F4LW9uc2Nyb2xsLWltZy1sb2FkIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X3BhZ2VXaWRnZXRfdGVhc2VyX3RleHQgb2F4X2ZvbnRfbGlnaHRcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfcGFnZVdpZGdldF90ZWFzZXJfdGV4dCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfcGFnZVdpZGdldF90ZWFzZXJfdGV4dCA+IGRpdiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGgzIGNsYXNzPVwib2F4X2ggb2F4X2N1c3RvbV9mb250IG9heF9oMiBvYXhfbWFyZ19ib3R0b21fMTEgb2F4X21hcmdfdG9wXzAgb2F4X2h5cGhlbnNfYXV0b1wiPkdhdGEgZGUgZHJ1bWXIm2llPzwvaDM+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2gyIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8c2VjdGlvbj5cblx0XHRcdFx0XHQ8cD5HaGlkdWwgbm9zdHJ1IHRlIHZhIGR1Y2Ugw65uIGNlbGUgbWFpIGludGVyZXNhbnRlIGxvY3VyaSZuYnNwO2RpbiBSb23Dom5hIMiZaSB0ZSZuYnNwO3ZhIGFqdXRhIHPEgy3Im2kgcGxhbmlmaWNpIGPEg2zEg3RvcmlhLjwvcD5cblx0XHRcdFx0PC9zZWN0aW9uPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9wYWdlV2lkZ2V0X3RlYXNlcl90ZXh0ID4gZGl2ID4gc2VjdGlvbiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHA+R2hpZHVsIG5vc3RydSB0ZSB2YSBkdWNlIMOubiBjZWxlIG1haSBpbnRlcmVzYW50ZSBsb2N1cmkmbmJzcDtkaW4gUm9tw6JuYSDImWkgdGUmbmJzcDt2YSBhanV0YSBzxIMtyJtpIHBsYW5pZmljaSBjxINsxIN0b3JpYS48L3A+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJzZWN0aW9uID4gcCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9tYXJnX3RvcF8yMlwiPlx0XG5cdFx0XHRcdFx0XHQ8YSB0YXJnZXQ9XCJfc2VsZlwiIHJlbD1cIlwiIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vdGFyYS9yb21hbmlhLzEwMzY5OTEvXCIgY2xhc3M9XCJvYXhfYnRuIG9heF9idG5fbGFyZ2Ugb2F4X2J0bl93aGl0ZVwiPlNwcmUgZ2hpZDwvYT5cblx0XHRcdFx0XHQ8L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfcGFnZVdpZGdldF90ZWFzZXJfdGV4dCA+IGRpdiA+IC5vYXhfbWFyZ190b3BfMjIiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIHRhcmdldD1cIl9zZWxmXCIgcmVsPVwiXCIgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby90YXJhL3JvbWFuaWEvMTAzNjk5MS9cIiBjbGFzcz1cIm9heF9idG4gb2F4X2J0bl9sYXJnZSBvYXhfYnRuX3doaXRlXCI+U3ByZSBnaGlkPC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9idG5fd2hpdGUiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfbWFyZ190b3BfMTFcIj5cblx0XHRcdFxuXG48ZGl2IGNsYXNzPVwib2F4X2ZvbnRfc21hbGxcIj5cblx0XG5cdFxuXHRcblx0XG5cdFxuXHQ8c3BhbiBjbGFzcz1cIm9heF9jb3B5cmlnaHRfb25fbGlnaHRcIj5cblx0XHRcblx0Rm90bzpcdEFnbmVzIEVsZW5hIENyxINjaXVuLCBVbnNwbGFzaFxuXHQ8L3NwYW4+XG5cdFxuPC9kaXY+XG5cblx0XHQ8L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfY29sX2Z1bGx3aWR0aF9mdWxsLm9heF9jb2xfb2Zmc2V0X25lZ19mdWxsLm9heF9tYXJnX2JvdHRvbV80NCA+IC5vYXhfbWFyZ190b3BfMTEiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfZm9udF9zbWFsbFwiPlxuXHRcblx0XG5cdFxuXHRcblx0XG5cdDxzcGFuIGNsYXNzPVwib2F4X2NvcHlyaWdodF9vbl9saWdodFwiPlxuXHRcdFxuXHRGb3RvOlx0QWduZXMgRWxlbmEgQ3LEg2NpdW4sIFVuc3BsYXNoXG5cdDwvc3Bhbj5cblx0XG48L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfbWFyZ190b3BfMTEgPiAub2F4X2ZvbnRfc21hbGwiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxzcGFuIGNsYXNzPVwib2F4X2NvcHlyaWdodF9vbl9saWdodFwiPlxuXHRcdFxuXHRGb3RvOlx0QWduZXMgRWxlbmEgQ3LEg2NpdW4sIFVuc3BsYXNoXG5cdDwvc3Bhbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfY29weXJpZ2h0X29uX2xpZ2h0IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGlkPVwiN1wiIGNsYXNzPVwib2F4X21hcmdfdG9wXzc3IG9heF9wYWdlV2lkZ2V0X2RpdmlkZXJcIj5cblx0PGRpdiBjbGFzcz1cIm9heF9jb2xfb2Zmc2V0X25lZyBvYXhfY29sX29mZnNldF9uZWdfZnVsbCBvYXhfY29sX2Z1bGx3aWR0aF9mdWxsIG9heF9tYXJnX2JvdHRvbV80NFwiPlxuXHRcdDxocj5cblx0PC9kaXY+XG5cdFxuXHRcdDxkaXYgY2xhc3M9XCJvYXhfcGFnZVdpZGdldF9kaXZpZGVyX2ljb24gb2F4LWljb24tdG91ci1hbHQgb2F4X2xpbmtfY29sb3JcIj48L2Rpdj5cblx0XG5cblx0XG5cdFxuPC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzNyAiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfY29sX29mZnNldF9uZWcgb2F4X2NvbF9vZmZzZXRfbmVnX2Z1bGwgb2F4X2NvbF9mdWxsd2lkdGhfZnVsbCBvYXhfbWFyZ19ib3R0b21fNDRcIj5cblx0XHQ8aHI+XG5cdDwvZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzcgID4gLm9heF9jb2xfZnVsbHdpZHRoX2Z1bGwub2F4X2NvbF9vZmZzZXRfbmVnX2Z1bGwub2F4X21hcmdfYm90dG9tXzQ0IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aHI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzNyAgPiAub2F4X2NvbF9mdWxsd2lkdGhfZnVsbC5vYXhfY29sX29mZnNldF9uZWdfZnVsbC5vYXhfbWFyZ19ib3R0b21fNDQgPiBociIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9wYWdlV2lkZ2V0X2RpdmlkZXJfaWNvbiBvYXgtaWNvbi10b3VyLWFsdCBvYXhfbGlua19jb2xvclwiPjwvZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pY29uLXRvdXItYWx0IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGlkPVwiOFwiIGNsYXNzPVwib2F4X2Zvcm1hdHRlZF9saXN0X3dyYXAgb2F4X21hcmdfdG9wXzc3IFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzggIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X21hcmdfYm90dG9tXzQ0IG9heF9jb2xfb2Zmc2V0X25lZyBvYXhfY29sX2Z1bGx3aWR0aF9vZmZzZXRfbmVnXzJcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDM4ICA+IC5vYXhfY29sX2Z1bGx3aWR0aF9vZmZzZXRfbmVnXzIub2F4X21hcmdfYm90dG9tXzQ0Lm9heF9jb2xfb2Zmc2V0X25lZyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9tYXJnX2JvdHRvbV8xMVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzggID4gLm9heF9jb2xfZnVsbHdpZHRoX29mZnNldF9uZWdfMi5vYXhfbWFyZ19ib3R0b21fNDQub2F4X2NvbF9vZmZzZXRfbmVnID4gLm9heF9tYXJnX2JvdHRvbV8xMSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPG91dHB1dCBjbGFzcz1cIm9heC1vbnNjcm9sbC1pbWctbG9hZCBqcy1vbnNjcm9sbC1pbWdcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDM4ICA+IC5vYXhfY29sX2Z1bGx3aWR0aF9vZmZzZXRfbmVnXzIub2F4X21hcmdfYm90dG9tXzQ0Lm9heF9jb2xfb2Zmc2V0X25lZyA+IC5vYXhfbWFyZ19ib3R0b21fMTEgPiBvdXRwdXQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfZm9udF9zbWFsbFwiPlxuXHRcblx0XG5cdFxuXHRcblx0XG48L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDM4ICA+IC5vYXhfY29sX2Z1bGx3aWR0aF9vZmZzZXRfbmVnXzIub2F4X21hcmdfYm90dG9tXzQ0Lm9heF9jb2xfb2Zmc2V0X25lZyA+IC5vYXhfZm9udF9zbWFsbCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdj5cblx0XHRcdFxuXHRcdFx0XHQ8aDMgY2xhc3M9XCJvYXhfaCBvYXhfY3VzdG9tX2ZvbnQgb2F4X2gzXCI+T3JnYW5pemVhesSDLcibaSBncmF0dWl0IGV4Y3Vyc2lhIGN1IFBsYW5pZmljYXRvcnVsIGRlIFRyYXNlZTwvaDM+XG5cdFx0XHRcblx0XHQ8L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDM4ICA+IGRpdjpudGgtY2hpbGQoMikiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxoMyBjbGFzcz1cIm9heF9oIG9heF9jdXN0b21fZm9udCBvYXhfaDNcIj5Pcmdhbml6ZWF6xIMtyJtpIGdyYXR1aXQgZXhjdXJzaWEgY3UgUGxhbmlmaWNhdG9ydWwgZGUgVHJhc2VlPC9oMz4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDM4ICA+IGRpdjpudGgtY2hpbGQoMikgPiAub2F4X2gzIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X3RleHRfY2VudGVyRmlyc3RMaW5lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzOCAgPiAub2F4X3RleHRfY2VudGVyRmlyc3RMaW5lIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzggID4gLm9heF90ZXh0X2NlbnRlckZpcnN0TGluZSA+IGRpdiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHA+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzOCAgPiAub2F4X3RleHRfY2VudGVyRmlyc3RMaW5lID4gZGl2ID4gcCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBpZD1cIjlcIj5cblx0XG5cdFxuXHRcblx0XG5cdFxuXHRcblx0XHRcblx0XG5cdFxuXHRcblx0XG5cblx0XG5cdFxuXHRcblx0XG5cdFx0XG5cdFx0XG5cdFxuXHRcblx0PGRpdiBjbGFzcz1cIm9heF9jZW50ZXJlZCBvYXhfbWFyZ190b3BfMzNcIj5cdFxuXHRcdDxhIHRhcmdldD1cIl9zZWxmXCIgcmVsPVwiXCIgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby90b3VycGxhbm5lci9cIiBjbGFzcz1cIm9heF9idG4gb2F4X2J0bl9sYXJnZSBvYXhfYnRuX2N1c3RvbSBvYXhfYnRuX21pbldpZHRoX3dpZGVcIj5QbGFuaWZpY8SDIGFjdW0gcHJpbXVsIHRyYXNldTwvYT5cblx0PC9kaXY+XG48L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDM5ICIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9jZW50ZXJlZCBvYXhfbWFyZ190b3BfMzNcIj5cdFxuXHRcdDxhIHRhcmdldD1cIl9zZWxmXCIgcmVsPVwiXCIgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby90b3VycGxhbm5lci9cIiBjbGFzcz1cIm9heF9idG4gb2F4X2J0bl9sYXJnZSBvYXhfYnRuX2N1c3RvbSBvYXhfYnRuX21pbldpZHRoX3dpZGVcIj5QbGFuaWZpY8SDIGFjdW0gcHJpbXVsIHRyYXNldTwvYT5cblx0PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X21hcmdfdG9wXzMzLm9heF9jZW50ZXJlZCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgdGFyZ2V0PVwiX3NlbGZcIiByZWw9XCJcIiBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL3RvdXJwbGFubmVyL1wiIGNsYXNzPVwib2F4X2J0biBvYXhfYnRuX2xhcmdlIG9heF9idG5fY3VzdG9tIG9heF9idG5fbWluV2lkdGhfd2lkZVwiPlBsYW5pZmljxIMgYWN1bSBwcmltdWwgdHJhc2V1PC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9idG5fbWluV2lkdGhfd2lkZSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBpZD1cIjEwXCIgY2xhc3M9XCJvYXhfbWFyZ190b3BfNzcgb2F4X3BhZ2VXaWRnZXRfZGl2aWRlclwiPlxuXHQ8ZGl2IGNsYXNzPVwib2F4X2NvbF9vZmZzZXRfbmVnIG9heF9jb2xfb2Zmc2V0X25lZ19mdWxsIG9heF9jb2xfZnVsbHdpZHRoX2Z1bGwgb2F4X21hcmdfYm90dG9tXzQ0XCI+XG5cdFx0PGhyPlxuXHQ8L2Rpdj5cblx0XG5cdFx0PGRpdiBjbGFzcz1cIm9heF9wYWdlV2lkZ2V0X2RpdmlkZXJfaWNvbiBvYXgtaWNvbi10b2dldGhlciBvYXhfbGlua19jb2xvclwiPjwvZGl2PlxuXHRcblxuXHRcblx0XG48L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDMxIDAiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfY29sX29mZnNldF9uZWcgb2F4X2NvbF9vZmZzZXRfbmVnX2Z1bGwgb2F4X2NvbF9mdWxsd2lkdGhfZnVsbCBvYXhfbWFyZ19ib3R0b21fNDRcIj5cblx0XHQ8aHI+XG5cdDwvZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzEgMCA+IC5vYXhfY29sX2Z1bGx3aWR0aF9mdWxsLm9heF9jb2xfb2Zmc2V0X25lZ19mdWxsLm9heF9tYXJnX2JvdHRvbV80NCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGhyPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzEgMCA+IC5vYXhfY29sX2Z1bGx3aWR0aF9mdWxsLm9heF9jb2xfb2Zmc2V0X25lZ19mdWxsLm9heF9tYXJnX2JvdHRvbV80NCA+IGhyIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X3BhZ2VXaWRnZXRfZGl2aWRlcl9pY29uIG9heC1pY29uLXRvZ2V0aGVyIG9heF9saW5rX2NvbG9yXCI+PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWljb24tdG9nZXRoZXIiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgaWQ9XCIxMVwiIGNsYXNzPVwib2F4X2Zvcm1hdHRlZF9saXN0X3dyYXAgb2F4X21hcmdfdG9wXzc3IFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzEgMSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9tYXJnX2JvdHRvbV80NCBvYXhfY29sX29mZnNldF9uZWcgb2F4X2NvbF9mdWxsd2lkdGhfb2Zmc2V0X25lZ18yXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzMSAxID4gLm9heF9jb2xfZnVsbHdpZHRoX29mZnNldF9uZWdfMi5vYXhfbWFyZ19ib3R0b21fNDQub2F4X2NvbF9vZmZzZXRfbmVnIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X21hcmdfYm90dG9tXzExXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzMSAxID4gLm9heF9jb2xfZnVsbHdpZHRoX29mZnNldF9uZWdfMi5vYXhfbWFyZ19ib3R0b21fNDQub2F4X2NvbF9vZmZzZXRfbmVnID4gLm9heF9tYXJnX2JvdHRvbV8xMSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPG91dHB1dCBjbGFzcz1cIm9heC1vbnNjcm9sbC1pbWctbG9hZCBqcy1vbnNjcm9sbC1pbWdcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDMxIDEgPiAub2F4X2NvbF9mdWxsd2lkdGhfb2Zmc2V0X25lZ18yLm9heF9tYXJnX2JvdHRvbV80NC5vYXhfY29sX29mZnNldF9uZWcgPiAub2F4X21hcmdfYm90dG9tXzExID4gb3V0cHV0IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2ZvbnRfc21hbGxcIj5cblx0XG5cdFxuXHRcblx0XG5cdFxuPC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzMSAxID4gLm9heF9jb2xfZnVsbHdpZHRoX29mZnNldF9uZWdfMi5vYXhfbWFyZ19ib3R0b21fNDQub2F4X2NvbF9vZmZzZXRfbmVnID4gLm9heF9mb250X3NtYWxsIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2PlxuXHRcdFx0XG5cdFx0XHRcdDxoMyBjbGFzcz1cIm9heF9oIG9heF9jdXN0b21fZm9udCBvYXhfaDNcIj5EaXN0cmlidWllIHRyYXNlZWxlIHBhcmN1cnNlIMiZaSBleHBlcmllbsibZWxlIHRyxINpdGU8L2gzPlxuXHRcdFx0XG5cdFx0PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzMSAxID4gZGl2Om50aC1jaGlsZCgyKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGgzIGNsYXNzPVwib2F4X2ggb2F4X2N1c3RvbV9mb250IG9heF9oM1wiPkRpc3RyaWJ1aWUgdHJhc2VlbGUgcGFyY3Vyc2UgyJlpIGV4cGVyaWVuyJtlbGUgdHLEg2l0ZTwvaDM+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzMSAxID4gZGl2Om50aC1jaGlsZCgyKSA+IC5vYXhfaDMiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfdGV4dF9jZW50ZXJGaXJzdExpbmVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDMxIDEgPiAub2F4X3RleHRfY2VudGVyRmlyc3RMaW5lIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzEgMSA+IC5vYXhfdGV4dF9jZW50ZXJGaXJzdExpbmUgPiBkaXYiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxwPk8gcGxhbmlmaWNhcmVhIHByZWNpc8SDJm5ic3A7YSB0cmFzZXVsdWkgbnUgZXN0ZSBkZWPDonQgbyBwYXJ0ZSBkaW4gZGludHItbyBhdmVudHVyxIMmbmJzcDtyZXXImWl0xIMuIEN1IGFkZXbEg3JhdCBpbnRlcmVzYW50ZSBkZXZpbiB0cmFzZWVsZSBhYmlhIGR1cMSDIHB1YmxpY2FyZWEgZGVzY3JpZXJlaWkgYWNlc3RvcmEgw65uc2/Im2l0xIMgZGUgaW1hZ2luaSBkaW4gZXhjdXJzaWUuJm5ic3A7PC9wPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzEgMSA+IC5vYXhfdGV4dF9jZW50ZXJGaXJzdExpbmUgPiBkaXYgPiBwOm50aC1jaGlsZCgxKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHA+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJwOm50aC1jaGlsZCgyKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHA+Jm5ic3A7PC9wPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAicDpudGgtY2hpbGQoMykiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgaWQ9XCIxMlwiIGNsYXNzPVwib2F4X21hcmdfdG9wXzc3IG9heF9wYWdlV2lkZ2V0X2RpdmlkZXJcIj5cblx0PGRpdiBjbGFzcz1cIm9heF9jb2xfb2Zmc2V0X25lZyBvYXhfY29sX29mZnNldF9uZWdfZnVsbCBvYXhfY29sX2Z1bGx3aWR0aF9mdWxsIG9heF9tYXJnX2JvdHRvbV80NFwiPlxuXHRcdDxocj5cblx0PC9kaXY+XG5cdFxuXHRcdDxkaXYgY2xhc3M9XCJvYXhfcGFnZVdpZGdldF9kaXZpZGVyX2ljb24gb2F4LWljb24tZXllIG9heF9saW5rX2NvbG9yXCI+PC9kaXY+XG5cdFxuXG5cdFxuXHRcbjwvZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzEgMiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9jb2xfb2Zmc2V0X25lZyBvYXhfY29sX29mZnNldF9uZWdfZnVsbCBvYXhfY29sX2Z1bGx3aWR0aF9mdWxsIG9heF9tYXJnX2JvdHRvbV80NFwiPlxuXHRcdDxocj5cblx0PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzMSAyID4gLm9heF9jb2xfZnVsbHdpZHRoX2Z1bGwub2F4X2NvbF9vZmZzZXRfbmVnX2Z1bGwub2F4X21hcmdfYm90dG9tXzQ0IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aHI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIjXFwzMSAyID4gLm9heF9jb2xfZnVsbHdpZHRoX2Z1bGwub2F4X2NvbF9vZmZzZXRfbmVnX2Z1bGwub2F4X21hcmdfYm90dG9tXzQ0ID4gaHIiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfcGFnZVdpZGdldF9kaXZpZGVyX2ljb24gb2F4LWljb24tZXllIG9heF9saW5rX2NvbG9yXCI+PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWljb24tZXllIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGlkPVwiMTNcIiBjbGFzcz1cIm9heF9tYXJnX3RvcF83N1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzEgMyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDMxIDMgPiBkaXY6bnRoLWNoaWxkKDEpIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aDMgY2xhc3M9XCJvYXhfaCBvYXhfY3VzdG9tX2ZvbnQgb2F4X2gzXCI+SW5zcGlyYcibaWEgcG90cml2aXTEgyBwZW50cnUgb3JpY2Ugb2NhemllPC9oMz4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIiNcXDMxIDMgPiBkaXY6bnRoLWNoaWxkKDEpID4gLm9heF9oMyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9tYXJnX3RvcF8yMiBvYXhfbWFyZ19ib3R0b21fNDQgb2F4X3RleHRfY2VudGVyRmlyc3RMaW5lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X21hcmdfdG9wXzIyLm9heF90ZXh0X2NlbnRlckZpcnN0TGluZS5vYXhfbWFyZ19ib3R0b21fNDQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXY+PHA+R2hpZHVsIFJvbWFuaWFUcmF2ZWwuZ3VpZGUgYXJlIHVuIHRyYXNldSBwZW50cnUgb3JpY2UgYWN0aXZpdGF0ZSDImWkgw65uIG9yaWNlIHJlZ2l1bmUgYWxlZ2kgc8SDIGV4cGxvcmV6aS4gVG9hdGUgdHJhc2VlbGUgc3VudCBpbnRyb2R1c2UgbWFudWFsLCBjaGlhciBkZSBjxIN0cmUgY2VpIGNlIGxlLWF1IHBhcmN1cnMsIMiZaSBwb3QgZmkgZmlsdHJhdGUgw65uIGZ1bmPIm2llIGRlIGRpc3RhbsibxIMsIGRpZmljdWx0YXRlIMiZaSBsZWfEg3R1cmlsZSBjdSZuYnNwO3RyYW5zcG9ydCBwdWJsaWMuPC9wPjwvZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9tYXJnX3RvcF8yMi5vYXhfdGV4dF9jZW50ZXJGaXJzdExpbmUub2F4X21hcmdfYm90dG9tXzQ0ID4gZGl2IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8cD5HaGlkdWwgUm9tYW5pYVRyYXZlbC5ndWlkZSBhcmUgdW4gdHJhc2V1IHBlbnRydSBvcmljZSBhY3Rpdml0YXRlIMiZaSDDrm4gb3JpY2UgcmVnaXVuZSBhbGVnaSBzxIMgZXhwbG9yZXppLiBUb2F0ZSB0cmFzZWVsZSBzdW50IGludHJvZHVzZSBtYW51YWwsIGNoaWFyIGRlIGPEg3RyZSBjZWkgY2UgbGUtYXUgcGFyY3VycywgyJlpIHBvdCBmaSBmaWx0cmF0ZSDDrm4gZnVuY8ibaWUgZGUgZGlzdGFuyJvEgywgZGlmaWN1bHRhdGUgyJlpIGxlZ8SDdHVyaWxlIGN1Jm5ic3A7dHJhbnNwb3J0IHB1YmxpYy48L3A+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X21hcmdfdG9wXzIyLm9heF90ZXh0X2NlbnRlckZpcnN0TGluZS5vYXhfbWFyZ19ib3R0b21fNDQgPiBkaXYgPiBwIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2NvbF9vZmZzZXRfbmVnIG9heF9jb2xfZnVsbHdpZHRoX29mZnNldF9uZWdfMVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzEgMyA+IC5vYXhfY29sX2Z1bGx3aWR0aF9vZmZzZXRfbmVnXzEub2F4X2NvbF9vZmZzZXRfbmVnIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X25vX21hcmcgb2F4X3RpbGVfdGVhc2VyIG9heF9jbGVhcmZpeFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI1xcMzEgMyA+IC5vYXhfY29sX2Z1bGx3aWR0aF9vZmZzZXRfbmVnXzEub2F4X2NvbF9vZmZzZXRfbmVnID4gLm9heF90aWxlX3RlYXNlci5vYXhfbm9fbWFyZy5vYXhfY2xlYXJmaXgiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfY2xlYXJmaXggb2F4LXNsaWRlLWxpc3QtY29udCBvYXhfc2xpZGVfbGlzdF9jb250IG9heF9zbGlkZV9saXN0X2NvbnRfZXh0IG9heF9zbGlkZV9saXN0X2luYWN0aXZlXCIgZGF0YS1fYWxwX3hfc2xpZGVfbGlzdD1cImRvbmVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfc2xpZGVfbGlzdF9pbmFjdGl2ZSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9zbGlkZV9saXN0IG9heF9mbGF0X3NuaXBwZXRfbGlzdCBvYXhfZmxcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfZmxhdF9zbmlwcGV0X2xpc3QiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjx1bCBjbGFzcz1cIm9heF9yb3cgb2F4LXNsaWRlLWxpc3Qgb2F4LXNuaXBwZXQtY29udGFpbmVyXCIgc3R5bGU9XCJ0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpO1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9mbGF0X3NuaXBwZXRfbGlzdCA+IC5vYXgtc2xpZGUtbGlzdC5vYXgtc25pcHBldC1jb250YWluZXIub2F4X3JvdyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpIGNsYXNzPVwib2F4X2NvbCBvYXhfY29sX3hzXzEwIG9heF9jb2xfc182IG9heF9jb2xfbV82IG9heF9jb2xfZF80IG9heF9pbmxpbmUgb2F4LXNsaWRlLWxpc3QtaXRlbSBvYXgtaWQgb2F4LWlkLTU0MjMxMTIzXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTU0MjMxMTIzLm9heF9jb2xfeHNfMTAub2F4X2NvbF9zXzYiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vcC9kZXN0aW5hdGlpLWRlLW5lcmF0YXQvNTQyMzExMjMvXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTU0MjMxMTIzLm9heF9jb2xfeHNfMTAub2F4X2NvbF9zXzYgPiBhIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4LWZsYXQtc25pcHBldCBvYXgtaWQgb2F4LWlkLTU0MjMxMTIzIG9heC10cmFjay1jb250ZW50IG9heC10cmFjay1kb25lXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTU0MjMxMTIzLm9heC1mbGF0LXNuaXBwZXQub2F4LXRyYWNrLWNvbnRlbnQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxzcGFuPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC01NDIzMTEyMy5vYXgtZmxhdC1zbmlwcGV0Lm9heC10cmFjay1jb250ZW50ID4gc3BhbiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9yZWxhdGl2ZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC01NDIzMTEyMy5vYXgtZmxhdC1zbmlwcGV0Lm9heC10cmFjay1jb250ZW50ID4gc3BhbiA+IC5vYXhfcmVsYXRpdmUiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxvdXRwdXQgY2xhc3M9XCJvYXgtb25zY3JvbGwtaW1nLWxvYWQganMtb25zY3JvbGwtaW1nXCI+PGlucHV0IHR5cGU9XCJoaWRkZW5cIiBjbGFzcz1cIm9heC1sb2FkLXBhdGhcIiB2YWx1ZT1cIntzcmM6ICZxdW90O2h0dHBzOi8vaW1nLm9hc3RhdGljLmNvbS9pbWcyLzU0MjMxMTM1LzQyMHgyMzdyL3ZhcmlhbnQuanBnJnF1b3Q7LCBhbHQ6ICZxdW90OyZxdW90Oywgd2lkdGg6IDQyMCwgaGVpZ2h0OiAyMzd9XCIgZGF0YS1pbWdjb3VudD1cIjM0XCI+PC9vdXRwdXQ+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTU0MjMxMTIzLm9heC1mbGF0LXNuaXBwZXQub2F4LXRyYWNrLWNvbnRlbnQgPiBzcGFuID4gLm9heF9yZWxhdGl2ZSA+IG91dHB1dCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9nYWxsZXJ5X3NoYWRvd19ob3ZcIj48L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNTQyMzExMjMub2F4LWZsYXQtc25pcHBldC5vYXgtdHJhY2stY29udGVudCA+IHNwYW4gPiAub2F4X3JlbGF0aXZlID4gLm9heF9nYWxsZXJ5X3NoYWRvd19ob3YiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfZmxhdF9xdWlja2ZhY3RzXCI+IFxuIFx0PGRpdiBjbGFzcz1cIm9heF9zbWFsbF9jYXBzIG9heF9tYXJnX3RvcF8xMSBvYXhfZWxsaXBzaXNcIj5cbiBcdFx0XG4gXHRcdFxuIFx0PC9kaXY+XG4gXG5cdCA8c3Ryb25nIGNsYXNzPVwib2F4X2Jsb2NrIG9heF9zZW1pX2JvbGQgb2F4X3dvcmRicmVhayBvYXhfZmxhdF9zbmlwcGV0X3RpdGxlXCI+XG5cdCBcdDxzcGFuIGNsYXNzPVwib2F4X2hvdmVybGluayBvYXhfZm9udF9kYXJrXCI+RGVzdGluYcibaWkgZGUgbmVyYXRhdDwvc3Bhbj5cdFxuXHQgPC9zdHJvbmc+XG4gPC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTU0MjMxMTIzLm9heC1mbGF0LXNuaXBwZXQub2F4LXRyYWNrLWNvbnRlbnQgPiAub2F4X2ZsYXRfcXVpY2tmYWN0cyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9zbWFsbF9jYXBzIG9heF9tYXJnX3RvcF8xMSBvYXhfZWxsaXBzaXNcIj5cbiBcdFx0XG4gXHRcdFxuIFx0PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTU0MjMxMTIzLm9heC1mbGF0LXNuaXBwZXQub2F4LXRyYWNrLWNvbnRlbnQgPiAub2F4X2ZsYXRfcXVpY2tmYWN0cyA+IC5vYXhfc21hbGxfY2Fwcy5vYXhfbWFyZ190b3BfMTEub2F4X2VsbGlwc2lzIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8c3Ryb25nIGNsYXNzPVwib2F4X2Jsb2NrIG9heF9zZW1pX2JvbGQgb2F4X3dvcmRicmVhayBvYXhfZmxhdF9zbmlwcGV0X3RpdGxlXCI+XG5cdCBcdDxzcGFuIGNsYXNzPVwib2F4X2hvdmVybGluayBvYXhfZm9udF9kYXJrXCI+RGVzdGluYcibaWkgZGUgbmVyYXRhdDwvc3Bhbj5cdFxuXHQgPC9zdHJvbmc+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTU0MjMxMTIzLm9heC1mbGF0LXNuaXBwZXQub2F4LXRyYWNrLWNvbnRlbnQgPiAub2F4X2ZsYXRfcXVpY2tmYWN0cyA+IC5vYXhfd29yZGJyZWFrLm9heF9mbGF0X3NuaXBwZXRfdGl0bGUub2F4X2Jsb2NrIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8c3BhbiBjbGFzcz1cIm9heF9ob3Zlcmxpbmsgb2F4X2ZvbnRfZGFya1wiPkRlc3RpbmHIm2lpIGRlIG5lcmF0YXQ8L3NwYW4+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTU0MjMxMTIzLm9heC1mbGF0LXNuaXBwZXQub2F4LXRyYWNrLWNvbnRlbnQgPiAub2F4X2ZsYXRfcXVpY2tmYWN0cyA+IC5vYXhfd29yZGJyZWFrLm9heF9mbGF0X3NuaXBwZXRfdGl0bGUub2F4X2Jsb2NrID4gLm9heF9ob3Zlcmxpbmsub2F4X2ZvbnRfZGFyayIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpIGNsYXNzPVwib2F4X2NvbCBvYXhfY29sX3hzXzEwIG9heF9jb2xfc182IG9heF9jb2xfbV82IG9heF9jb2xfZF80IG9heF9pbmxpbmUgb2F4LXNsaWRlLWxpc3QtaXRlbSBvYXgtaWQgb2F4LWlkLTU0MjMwODkxXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTU0MjMwODkxLm9heF9jb2xfeHNfMTAub2F4X2NvbF9zXzYiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vcC92YWNhbnRhLWluLWZhbWlsZS81NDIzMDg5MS9cIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNTQyMzA4OTEub2F4X2NvbF94c18xMC5vYXhfY29sX3NfNiA+IGEiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXgtZmxhdC1zbmlwcGV0IG9heC1pZCBvYXgtaWQtNTQyMzA4OTEgb2F4LXRyYWNrLWNvbnRlbnQgb2F4LXRyYWNrLWRvbmVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNTQyMzA4OTEub2F4LWZsYXQtc25pcHBldC5vYXgtdHJhY2stY29udGVudCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHNwYW4+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTU0MjMwODkxLm9heC1mbGF0LXNuaXBwZXQub2F4LXRyYWNrLWNvbnRlbnQgPiBzcGFuIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X3JlbGF0aXZlXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTU0MjMwODkxLm9heC1mbGF0LXNuaXBwZXQub2F4LXRyYWNrLWNvbnRlbnQgPiBzcGFuID4gLm9heF9yZWxhdGl2ZSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPG91dHB1dCBjbGFzcz1cIm9heC1vbnNjcm9sbC1pbWctbG9hZCBqcy1vbnNjcm9sbC1pbWdcIj48aW5wdXQgdHlwZT1cImhpZGRlblwiIGNsYXNzPVwib2F4LWxvYWQtcGF0aFwiIHZhbHVlPVwie3NyYzogJnF1b3Q7aHR0cHM6Ly9pbWczLm9hc3RhdGljLmNvbS9pbWcyLzU0MjMwODg0LzQyMHgyMzdyL3ZhcmlhbnQuanBnJnF1b3Q7LCBhbHQ6ICZxdW90OyZxdW90Oywgd2lkdGg6IDQyMCwgaGVpZ2h0OiAyMzd9XCIgZGF0YS1pbWdjb3VudD1cIjM1XCI+PC9vdXRwdXQ+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTU0MjMwODkxLm9heC1mbGF0LXNuaXBwZXQub2F4LXRyYWNrLWNvbnRlbnQgPiBzcGFuID4gLm9heF9yZWxhdGl2ZSA+IG91dHB1dCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9nYWxsZXJ5X3NoYWRvd19ob3ZcIj48L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNTQyMzA4OTEub2F4LWZsYXQtc25pcHBldC5vYXgtdHJhY2stY29udGVudCA+IHNwYW4gPiAub2F4X3JlbGF0aXZlID4gLm9heF9nYWxsZXJ5X3NoYWRvd19ob3YiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfZmxhdF9xdWlja2ZhY3RzXCI+IFxuIFx0PGRpdiBjbGFzcz1cIm9heF9zbWFsbF9jYXBzIG9heF9tYXJnX3RvcF8xMSBvYXhfZWxsaXBzaXNcIj5cbiBcdFx0XG4gXHRcdFxuIFx0PC9kaXY+XG4gXG5cdCA8c3Ryb25nIGNsYXNzPVwib2F4X2Jsb2NrIG9heF9zZW1pX2JvbGQgb2F4X3dvcmRicmVhayBvYXhfZmxhdF9zbmlwcGV0X3RpdGxlXCI+XG5cdCBcdDxzcGFuIGNsYXNzPVwib2F4X2hvdmVybGluayBvYXhfZm9udF9kYXJrXCI+VmFjYW7Im8SDIMOubiBmYW1pbGU8L3NwYW4+XHRcblx0IDwvc3Ryb25nPlxuIDwvZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC01NDIzMDg5MS5vYXgtZmxhdC1zbmlwcGV0Lm9heC10cmFjay1jb250ZW50ID4gLm9heF9mbGF0X3F1aWNrZmFjdHMiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfc21hbGxfY2FwcyBvYXhfbWFyZ190b3BfMTEgb2F4X2VsbGlwc2lzXCI+XG4gXHRcdFxuIFx0XHRcbiBcdDwvZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC01NDIzMDg5MS5vYXgtZmxhdC1zbmlwcGV0Lm9heC10cmFjay1jb250ZW50ID4gLm9heF9mbGF0X3F1aWNrZmFjdHMgPiAub2F4X3NtYWxsX2NhcHMub2F4X21hcmdfdG9wXzExLm9heF9lbGxpcHNpcyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHN0cm9uZyBjbGFzcz1cIm9heF9ibG9jayBvYXhfc2VtaV9ib2xkIG9heF93b3JkYnJlYWsgb2F4X2ZsYXRfc25pcHBldF90aXRsZVwiPlxuXHQgXHQ8c3BhbiBjbGFzcz1cIm9heF9ob3Zlcmxpbmsgb2F4X2ZvbnRfZGFya1wiPlZhY2FuyJvEgyDDrm4gZmFtaWxlPC9zcGFuPlx0XG5cdCA8L3N0cm9uZz4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNTQyMzA4OTEub2F4LWZsYXQtc25pcHBldC5vYXgtdHJhY2stY29udGVudCA+IC5vYXhfZmxhdF9xdWlja2ZhY3RzID4gLm9heF93b3JkYnJlYWsub2F4X2ZsYXRfc25pcHBldF90aXRsZS5vYXhfYmxvY2siCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxzcGFuIGNsYXNzPVwib2F4X2hvdmVybGluayBvYXhfZm9udF9kYXJrXCI+VmFjYW7Im8SDIMOubiBmYW1pbGU8L3NwYW4+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTU0MjMwODkxLm9heC1mbGF0LXNuaXBwZXQub2F4LXRyYWNrLWNvbnRlbnQgPiAub2F4X2ZsYXRfcXVpY2tmYWN0cyA+IC5vYXhfd29yZGJyZWFrLm9heF9mbGF0X3NuaXBwZXRfdGl0bGUub2F4X2Jsb2NrID4gLm9heF9ob3Zlcmxpbmsub2F4X2ZvbnRfZGFyayIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpIGNsYXNzPVwib2F4X2NvbCBvYXhfY29sX3hzXzEwIG9heF9jb2xfc182IG9heF9jb2xfbV82IG9heF9jb2xfZF80IG9heF9pbmxpbmUgb2F4LXNsaWRlLWxpc3QtaXRlbSBvYXgtaWQgb2F4LWlkLTU0MjMwOTI3XCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTU0MjMwOTI3Lm9heF9jb2xfeHNfMTAub2F4X2NvbF9zXzYiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vcC9wYXJhZGlzdXJpLW1vdW50YWluYmlrZS81NDIzMDkyNy9cIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNTQyMzA5Mjcub2F4X2NvbF94c18xMC5vYXhfY29sX3NfNiA+IGEiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXgtZmxhdC1zbmlwcGV0IG9heC1pZCBvYXgtaWQtNTQyMzA5Mjcgb2F4LXRyYWNrLWNvbnRlbnQgb2F4LXRyYWNrLWRvbmVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNTQyMzA5Mjcub2F4LWZsYXQtc25pcHBldC5vYXgtdHJhY2stY29udGVudCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHNwYW4+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTU0MjMwOTI3Lm9heC1mbGF0LXNuaXBwZXQub2F4LXRyYWNrLWNvbnRlbnQgPiBzcGFuIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X3JlbGF0aXZlXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTU0MjMwOTI3Lm9heC1mbGF0LXNuaXBwZXQub2F4LXRyYWNrLWNvbnRlbnQgPiBzcGFuID4gLm9heF9yZWxhdGl2ZSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPG91dHB1dCBjbGFzcz1cIm9heC1vbnNjcm9sbC1pbWctbG9hZCBqcy1vbnNjcm9sbC1pbWdcIj48aW5wdXQgdHlwZT1cImhpZGRlblwiIGNsYXNzPVwib2F4LWxvYWQtcGF0aFwiIHZhbHVlPVwie3NyYzogJnF1b3Q7aHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzU0MjMwOTk4LzQyMHgyMzdyL3ZhcmlhbnQuanBnJnF1b3Q7LCBhbHQ6ICZxdW90OyZxdW90Oywgd2lkdGg6IDQyMCwgaGVpZ2h0OiAyMzd9XCIgZGF0YS1pbWdjb3VudD1cIjM2XCI+PC9vdXRwdXQ+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTU0MjMwOTI3Lm9heC1mbGF0LXNuaXBwZXQub2F4LXRyYWNrLWNvbnRlbnQgPiBzcGFuID4gLm9heF9yZWxhdGl2ZSA+IG91dHB1dCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9nYWxsZXJ5X3NoYWRvd19ob3ZcIj48L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNTQyMzA5Mjcub2F4LWZsYXQtc25pcHBldC5vYXgtdHJhY2stY29udGVudCA+IHNwYW4gPiAub2F4X3JlbGF0aXZlID4gLm9heF9nYWxsZXJ5X3NoYWRvd19ob3YiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfZmxhdF9xdWlja2ZhY3RzXCI+IFxuIFx0PGRpdiBjbGFzcz1cIm9heF9zbWFsbF9jYXBzIG9heF9tYXJnX3RvcF8xMSBvYXhfZWxsaXBzaXNcIj5cbiBcdFx0XG4gXHRcdFxuIFx0PC9kaXY+XG4gXG5cdCA8c3Ryb25nIGNsYXNzPVwib2F4X2Jsb2NrIG9heF9zZW1pX2JvbGQgb2F4X3dvcmRicmVhayBvYXhfZmxhdF9zbmlwcGV0X3RpdGxlXCI+XG5cdCBcdDxzcGFuIGNsYXNzPVwib2F4X2hvdmVybGluayBvYXhfZm9udF9kYXJrXCI+UGFyYWRpc3VyaSBtb3VudGFpbmJpa2U8L3NwYW4+XHRcblx0IDwvc3Ryb25nPlxuIDwvZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC01NDIzMDkyNy5vYXgtZmxhdC1zbmlwcGV0Lm9heC10cmFjay1jb250ZW50ID4gLm9heF9mbGF0X3F1aWNrZmFjdHMiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfc21hbGxfY2FwcyBvYXhfbWFyZ190b3BfMTEgb2F4X2VsbGlwc2lzXCI+XG4gXHRcdFxuIFx0XHRcbiBcdDwvZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC01NDIzMDkyNy5vYXgtZmxhdC1zbmlwcGV0Lm9heC10cmFjay1jb250ZW50ID4gLm9heF9mbGF0X3F1aWNrZmFjdHMgPiAub2F4X3NtYWxsX2NhcHMub2F4X21hcmdfdG9wXzExLm9heF9lbGxpcHNpcyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHN0cm9uZyBjbGFzcz1cIm9heF9ibG9jayBvYXhfc2VtaV9ib2xkIG9heF93b3JkYnJlYWsgb2F4X2ZsYXRfc25pcHBldF90aXRsZVwiPlxuXHQgXHQ8c3BhbiBjbGFzcz1cIm9heF9ob3Zlcmxpbmsgb2F4X2ZvbnRfZGFya1wiPlBhcmFkaXN1cmkgbW91bnRhaW5iaWtlPC9zcGFuPlx0XG5cdCA8L3N0cm9uZz4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNTQyMzA5Mjcub2F4LWZsYXQtc25pcHBldC5vYXgtdHJhY2stY29udGVudCA+IC5vYXhfZmxhdF9xdWlja2ZhY3RzID4gLm9heF93b3JkYnJlYWsub2F4X2ZsYXRfc25pcHBldF90aXRsZS5vYXhfYmxvY2siCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxzcGFuIGNsYXNzPVwib2F4X2hvdmVybGluayBvYXhfZm9udF9kYXJrXCI+UGFyYWRpc3VyaSBtb3VudGFpbmJpa2U8L3NwYW4+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTU0MjMwOTI3Lm9heC1mbGF0LXNuaXBwZXQub2F4LXRyYWNrLWNvbnRlbnQgPiAub2F4X2ZsYXRfcXVpY2tmYWN0cyA+IC5vYXhfd29yZGJyZWFrLm9heF9mbGF0X3NuaXBwZXRfdGl0bGUub2F4X2Jsb2NrID4gLm9heF9ob3Zlcmxpbmsub2F4X2ZvbnRfZGFyayIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9jb2xfb2Zmc2V0X25lZyBvYXhfY29sX29mZnNldF9uZWdfZnVsbCBvYXhfY29sX2Z1bGx3aWR0aF9vZmZzZXRfbmVnXzIgb2F4X2NlbnRlcmVkXCI+XG5cdFx0XHRcdFx0IFx0XHRcdDwvZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9jZW50ZXJlZC5vYXhfY29sX2Z1bGx3aWR0aF9vZmZzZXRfbmVnXzIub2F4X2NvbF9vZmZzZXRfbmVnX2Z1bGwiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXggb2F4X29wdGlvbmFsX2Z1bGx3aWR0aCBvYXhfbWFyZ190b3BfNDRcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgub2F4X29wdGlvbmFsX2Z1bGx3aWR0aC5vYXhfbWFyZ190b3BfNDQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxmb290ZXIgY2xhc3M9XCJvYXhfbWFyZ19ib3R0b21fNjZcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImZvb3RlciIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9wb3J0YWxfd3JhcHBlclwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiZm9vdGVyID4gLm9heF9wb3J0YWxfd3JhcHBlciIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9jb250YWluZXJfZmx1aWRcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfcG9ydGFsX3dyYXBwZXIgPiAub2F4X2NvbnRhaW5lcl9mbHVpZCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9yb3cgb2F4X21hcmdfdG9wXzQ0IG9heF9tYXJnX2JvdHRvbV8zM1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9tYXJnX2JvdHRvbV8zMyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9jb2wgb2F4X2NvbF9kXzggb2F4X2NvbF9kX29mZnNldF8yXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X21hcmdfYm90dG9tXzMzID4gLm9heF9jb2xfZF84Lm9heF9jb2xfZF9vZmZzZXRfMi5vYXhfY29sIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2NvbF9vZmZzZXRfbmVnIG9heF9jb2xfb2Zmc2V0X25lZ19mdWxsIG9heF9jb2xfZnVsbHdpZHRoX29mZnNldF9uZWdfMiBvYXhfZm9udF9zbWFsbCBvYXhfZm9vdGVyX3NlY3Rpb25cIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfZm9vdGVyX3NlY3Rpb24iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjx1bCBjbGFzcz1cIm9heF91bnN0eWxlZF9saXN0IG9heF9jbGVhcmZpeCBvYXhfbm9fbWFyZyBvYXhfbWVudV9mb290ZXJfbGlzdCBvYXhfZmxleGJveFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF91bnN0eWxlZF9saXN0Lm9heF9tZW51X2Zvb3Rlcl9saXN0Lm9heF9ub19tYXJnIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGkgY2xhc3M9XCJvYXhfaGFzX3N1YiBvYXgtdG9nZ2xlLXRyYW5zXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X3Vuc3R5bGVkX2xpc3Qub2F4X21lbnVfZm9vdGVyX2xpc3Qub2F4X25vX21hcmcgPiAub2F4X2hhc19zdWIub2F4LXRvZ2dsZS10cmFuczpudGgtY2hpbGQoMSkiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxzcGFuIGNsYXNzPVwib2F4LW5hdi10b2dnbGVcIj5TZXJ2aWNlPC9zcGFuPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF91bnN0eWxlZF9saXN0Lm9heF9tZW51X2Zvb3Rlcl9saXN0Lm9heF9ub19tYXJnID4gLm9heF9oYXNfc3ViLm9heC10b2dnbGUtdHJhbnM6bnRoLWNoaWxkKDEpID4gLm9heC1uYXYtdG9nZ2xlIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8dWwgY2xhc3M9XCJvYXhfc3ViX25hdlwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF91bnN0eWxlZF9saXN0Lm9heF9tZW51X2Zvb3Rlcl9saXN0Lm9heF9ub19tYXJnID4gLm9heF9oYXNfc3ViLm9heC10b2dnbGUtdHJhbnM6bnRoLWNoaWxkKDEpID4gLm9heF9zdWJfbmF2IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGk+PGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby90b3VycGxhbm5lci9cIiB0aXRsZT1cIlBsYW5pZmljYXRvciB0cmFzZWVcIj5QbGFuaWZpY2F0b3IgdHJhc2VlPC9hPjwvbGk+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X3Vuc3R5bGVkX2xpc3Qub2F4X21lbnVfZm9vdGVyX2xpc3Qub2F4X25vX21hcmcgPiAub2F4X2hhc19zdWIub2F4LXRvZ2dsZS10cmFuczpudGgtY2hpbGQoMSkgPiAub2F4X3N1Yl9uYXYgPiBsaTpudGgtY2hpbGQoMSkiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vdG91cnBsYW5uZXIvXCIgdGl0bGU9XCJQbGFuaWZpY2F0b3IgdHJhc2VlXCI+UGxhbmlmaWNhdG9yIHRyYXNlZTwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImxpOm50aC1jaGlsZCgxKSA+IGFbdGl0bGU9XCJQbGFuaWZpY2F0b3IgdHJhc2VlXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGk+PGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9wL2ZhY3RzLWFib3V0LXJvbWFuaWEvMzU5NjM2OTQvXCIgdGl0bGU9XCJGYWN0cyBhYm91dCBSb21hbmlhXCI+RmFjdHMgYWJvdXQgUm9tYW5pYTwvYT48L2xpPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF91bnN0eWxlZF9saXN0Lm9heF9tZW51X2Zvb3Rlcl9saXN0Lm9heF9ub19tYXJnID4gLm9heF9oYXNfc3ViLm9heC10b2dnbGUtdHJhbnM6bnRoLWNoaWxkKDEpID4gLm9heF9zdWJfbmF2ID4gbGk6bnRoLWNoaWxkKDIpIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL3AvZmFjdHMtYWJvdXQtcm9tYW5pYS8zNTk2MzY5NC9cIiB0aXRsZT1cIkZhY3RzIGFib3V0IFJvbWFuaWFcIj5GYWN0cyBhYm91dCBSb21hbmlhPC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAibGk6bnRoLWNoaWxkKDIpID4gYVt0aXRsZT1cIkZhY3RzIGFib3V0IFJvbWFuaWFcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaT48YSBocmVmPVwiaHR0cDovL3d3dy5hbnBjLmdvdi5yb1wiIHRpdGxlPVwiQU5QQyAtIFByb3RlY8ibaWEgQ29uc3VtYXRvcmlsb3JcIj5BTlBDIC0gUHJvdGVjyJtpYSBDb25zdW1hdG9yaWxvcjwvYT48L2xpPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF91bnN0eWxlZF9saXN0Lm9heF9tZW51X2Zvb3Rlcl9saXN0Lm9heF9ub19tYXJnID4gLm9heF9oYXNfc3ViLm9heC10b2dnbGUtdHJhbnM6bnRoLWNoaWxkKDEpID4gLm9heF9zdWJfbmF2ID4gbGk6bnRoLWNoaWxkKDMpIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cDovL3d3dy5hbnBjLmdvdi5yb1wiIHRpdGxlPVwiQU5QQyAtIFByb3RlY8ibaWEgQ29uc3VtYXRvcmlsb3JcIj5BTlBDIC0gUHJvdGVjyJtpYSBDb25zdW1hdG9yaWxvcjwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImFbaHJlZiQ9XCJ3d3cuYW5wYy5nb3Yucm9cIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaSBjbGFzcz1cIm9heF9oYXNfc3ViIG9heC10b2dnbGUtdHJhbnNcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfdW5zdHlsZWRfbGlzdC5vYXhfbWVudV9mb290ZXJfbGlzdC5vYXhfbm9fbWFyZyA+IC5vYXhfaGFzX3N1Yi5vYXgtdG9nZ2xlLXRyYW5zOm50aC1jaGlsZCgyKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHNwYW4gY2xhc3M9XCJvYXgtbmF2LXRvZ2dsZVwiPkluZm9ybWHIm2lpPC9zcGFuPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF91bnN0eWxlZF9saXN0Lm9heF9tZW51X2Zvb3Rlcl9saXN0Lm9heF9ub19tYXJnID4gLm9heF9oYXNfc3ViLm9heC10b2dnbGUtdHJhbnM6bnRoLWNoaWxkKDIpID4gLm9heC1uYXYtdG9nZ2xlIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8dWwgY2xhc3M9XCJvYXhfc3ViX25hdlwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF91bnN0eWxlZF9saXN0Lm9heF9tZW51X2Zvb3Rlcl9saXN0Lm9heF9ub19tYXJnID4gLm9heF9oYXNfc3ViLm9heC10b2dnbGUtdHJhbnM6bnRoLWNoaWxkKDIpID4gLm9heF9zdWJfbmF2IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGk+PGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9wL2Vjb3Npc3RlbXVsLXJvbWFuaWF0cmF2ZWwuZ3VpZGUvNDY1MTY4OTYvXCIgdGl0bGU9XCJFY29zaXN0ZW11bCBUdXJpc3RpY1wiPkVjb3Npc3RlbXVsIFR1cmlzdGljPC9hPjwvbGk+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X3Vuc3R5bGVkX2xpc3Qub2F4X21lbnVfZm9vdGVyX2xpc3Qub2F4X25vX21hcmcgPiAub2F4X2hhc19zdWIub2F4LXRvZ2dsZS10cmFuczpudGgtY2hpbGQoMikgPiAub2F4X3N1Yl9uYXYgPiBsaTpudGgtY2hpbGQoMSkiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vcC9lY29zaXN0ZW11bC1yb21hbmlhdHJhdmVsLmd1aWRlLzQ2NTE2ODk2L1wiIHRpdGxlPVwiRWNvc2lzdGVtdWwgVHVyaXN0aWNcIj5FY29zaXN0ZW11bCBUdXJpc3RpYzwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImFbdGl0bGU9XCJFY29zaXN0ZW11bCBUdXJpc3RpY1wiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpPjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vcC9tYXJrZXRpbmctb25saW5lLXByaW4tcm9tYW5pYXRyYXZlbC5ndWlkZS80NjQ5NzE1Ny9cIiB0aXRsZT1cIk1hcmtldGluZyBPbmxpbmVcIj5NYXJrZXRpbmcgT25saW5lPC9hPjwvbGk+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X3Vuc3R5bGVkX2xpc3Qub2F4X21lbnVfZm9vdGVyX2xpc3Qub2F4X25vX21hcmcgPiAub2F4X2hhc19zdWIub2F4LXRvZ2dsZS10cmFuczpudGgtY2hpbGQoMikgPiAub2F4X3N1Yl9uYXYgPiBsaTpudGgtY2hpbGQoMikiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vcC9tYXJrZXRpbmctb25saW5lLXByaW4tcm9tYW5pYXRyYXZlbC5ndWlkZS80NjQ5NzE1Ny9cIiB0aXRsZT1cIk1hcmtldGluZyBPbmxpbmVcIj5NYXJrZXRpbmcgT25saW5lPC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiYVt0aXRsZT1cIk1hcmtldGluZyBPbmxpbmVcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaT48YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL2VuL2NvbnRhY3QuaHRtbFwiIHRpdGxlPVwiQ29udGFjdFwiPkNvbnRhY3Q8L2E+PC9saT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfdW5zdHlsZWRfbGlzdC5vYXhfbWVudV9mb290ZXJfbGlzdC5vYXhfbm9fbWFyZyA+IC5vYXhfaGFzX3N1Yi5vYXgtdG9nZ2xlLXRyYW5zOm50aC1jaGlsZCgyKSA+IC5vYXhfc3ViX25hdiA+IGxpOm50aC1jaGlsZCgzKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9lbi9jb250YWN0Lmh0bWxcIiB0aXRsZT1cIkNvbnRhY3RcIj5Db250YWN0PC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiYVt0aXRsZT1cIkNvbnRhY3RcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaSBjbGFzcz1cIm9heF9oYXNfc3ViIG9heC10b2dnbGUtdHJhbnNcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfdW5zdHlsZWRfbGlzdC5vYXhfbWVudV9mb290ZXJfbGlzdC5vYXhfbm9fbWFyZyA+IC5vYXhfaGFzX3N1Yi5vYXgtdG9nZ2xlLXRyYW5zOm50aC1jaGlsZCgzKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPHNwYW4gY2xhc3M9XCJvYXgtbmF2LXRvZ2dsZVwiPkJ1c2luZXNzPC9zcGFuPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF91bnN0eWxlZF9saXN0Lm9heF9tZW51X2Zvb3Rlcl9saXN0Lm9heF9ub19tYXJnID4gLm9heF9oYXNfc3ViLm9heC10b2dnbGUtdHJhbnM6bnRoLWNoaWxkKDMpID4gLm9heC1uYXYtdG9nZ2xlIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8dWwgY2xhc3M9XCJvYXhfc3ViX25hdlwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF91bnN0eWxlZF9saXN0Lm9heF9tZW51X2Zvb3Rlcl9saXN0Lm9heF9ub19tYXJnID4gLm9heF9oYXNfc3ViLm9heC10b2dnbGUtdHJhbnM6bnRoLWNoaWxkKDMpID4gLm9heF9zdWJfbmF2IgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGk+PGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9wL3JvbWFuaWF0cmF2ZWwuZ3VpZGUtc3ByaWppbmEtb3JnYW5pemF0aWlsZS1zZWFyY2gtcmVzY3VlLzUyMjU3MTY1L1wiIHRpdGxlPVwiU2VhcmNoICZhbXA7IFJlc2N1ZVwiPlNlYXJjaCAmYW1wOyBSZXNjdWU8L2E+PC9saT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfdW5zdHlsZWRfbGlzdC5vYXhfbWVudV9mb290ZXJfbGlzdC5vYXhfbm9fbWFyZyA+IC5vYXhfaGFzX3N1Yi5vYXgtdG9nZ2xlLXRyYW5zOm50aC1jaGlsZCgzKSA+IC5vYXhfc3ViX25hdiA+IGxpOm50aC1jaGlsZCgxKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9wL3JvbWFuaWF0cmF2ZWwuZ3VpZGUtc3ByaWppbmEtb3JnYW5pemF0aWlsZS1zZWFyY2gtcmVzY3VlLzUyMjU3MTY1L1wiIHRpdGxlPVwiU2VhcmNoICZhbXA7IFJlc2N1ZVwiPlNlYXJjaCAmYW1wOyBSZXNjdWU8L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJhW3RpdGxlPVwiU2VhcmNoICYgUmVzY3VlXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGk+PGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9wL3BhZ2luaS1naGlkLXR1cmlzdGljLzQ2NTYxMDg3L1wiIHRpdGxlPVwiUGFnaW5pIEdoaWQgVHVyaXN0aWNcIj5QYWdpbmkgR2hpZCBUdXJpc3RpYzwvYT48L2xpPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF91bnN0eWxlZF9saXN0Lm9heF9tZW51X2Zvb3Rlcl9saXN0Lm9heF9ub19tYXJnID4gLm9heF9oYXNfc3ViLm9heC10b2dnbGUtdHJhbnM6bnRoLWNoaWxkKDMpID4gLm9heF9zdWJfbmF2ID4gbGk6bnRoLWNoaWxkKDIpIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL3AvcGFnaW5pLWdoaWQtdHVyaXN0aWMvNDY1NjEwODcvXCIgdGl0bGU9XCJQYWdpbmkgR2hpZCBUdXJpc3RpY1wiPlBhZ2luaSBHaGlkIFR1cmlzdGljPC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiYVt0aXRsZT1cIlBhZ2luaSBHaGlkIFR1cmlzdGljXCJdIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8bGk+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X3Vuc3R5bGVkX2xpc3Qub2F4X21lbnVfZm9vdGVyX2xpc3Qub2F4X25vX21hcmcgPiBsaTpudGgtY2hpbGQoNCkiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxzcGFuPiZuYnNwOzwvc3Bhbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImxpOm50aC1jaGlsZCg0KSA+IHNwYW4iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfZGV0YWlsX3NvY2lhbFwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9kZXRhaWxfc29jaWFsIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL0RpZ2l0YWxUcmF2ZWxHdWlkZVNSTFwiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vZm9sbG93IG5vb3BlbmVyXCIgY2xhc3M9XCJvYXgtaWNvbi1mYWNlYm9vayBvYXhfZGV0YWlsX3NvY2lhbF9mYiBvYXhfZm9vdGVyX2ljb25cIiB0aXRsZT1cIkPEg3RyZSBwcm9maWx1bCBGYWNlYm9va1wiIGFyaWEtbGFiZWw9XCJmYWNlYm9va1wiPjwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWNvbi1mYWNlYm9vayIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vZWNoaXBhX3JvbWFuaWF0cmF2ZWwuZ3VpZGUvXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9mb2xsb3cgbm9vcGVuZXJcIiBjbGFzcz1cIm9heC1pY29uLWluc3RhZ3JhbSBvYXhfZGV0YWlsX3NvY2lhbF9pbnN0YWdyYW0gb2F4X2Zvb3Rlcl9pY29uXCIgdGl0bGU9XCJDxIN0cmUgcHJvZmlsdWwgSW5zdGFncmFtXCIgYXJpYS1sYWJlbD1cImluc3RhZ3JhbVwiPjwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWNvbi1pbnN0YWdyYW0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9jaGFubmVsL1VDQ1NfR1VPbFl5WnhzQzBubWh5MXdJd1wiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vZm9sbG93IG5vb3BlbmVyXCIgY2xhc3M9XCJvYXgtaWNvbi15b3V0dWJlIG9heF9kZXRhaWxfc29jaWFsX3lvdXR1YmUgb2F4X2Zvb3Rlcl9pY29uXCIgdGl0bGU9XCJDxIN0cmUgY2FuYWx1bCBZb3VUdWJlXCIgYXJpYS1sYWJlbD1cInlvdXR1YmVcIj48L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWljb24teW91dHViZSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vdHdpdHRlci5jb20vUm9tYW5pYVRyYXZlbEdcIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub2ZvbGxvdyBub29wZW5lclwiIGNsYXNzPVwib2F4LWljb24teCBvYXhfZGV0YWlsX3NvY2lhbF94IG9heF9mb290ZXJfaWNvblwiIHRpdGxlPVwiQ8SDdHJlIGNvbnR1bCBYXCIgYXJpYS1sYWJlbD1cInhcIj48L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWljb24teCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9jb21wYW55L2RpZ2l0YWwtdHJhdmVsLWd1aWRlL1wiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vZm9sbG93IG5vb3BlbmVyXCIgY2xhc3M9XCJvYXgtaWNvbi1saW5rZWRpbiBvYXhfZGV0YWlsX3NvY2lhbF9saW5rZWRpbiBvYXhfZm9vdGVyX2ljb25cIiB0aXRsZT1cIkPEg3RyZSBjb250dWwgTGlua2VkSW5cIiBhcmlhLWxhYmVsPVwibGlua2VkaW5cIj48L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWljb24tbGlua2VkaW4iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfZnIgb2F4X21lbnVfZm9vdGVyX2xpc3Qgb2F4X21hcmdfcmlnaHRfbmVnXzEwIG9heF9tYXJnX3RvcF8zM1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9tYXJnX3JpZ2h0X25lZ18xMCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgY2xhc3M9XCJvYXhfZnIgb2F4X21hcmdfcmlnaHRfMTAgb2F4X21hcmdfYm90dG9tXzIyXCIgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vYXBwcy5hcHBsZS5jb20vcm8vYXBwL3JvbWFuaWEtb3V0ZG9vci10cmF2ZWwtZ3VpZGUvaWQxNDkwMDc1MTI4XCIgdGl0bGU9XCJcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfbWFyZ19yaWdodF8xMC5vYXhfbWFyZ19ib3R0b21fMjJbdGl0bGU9XCJcIl06bnRoLWNoaWxkKDEpIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW1nIGNsYXNzPVwiXCIgc3JjPVwiaHR0cHM6Ly9yZXMyLm9hc3RhdGljLmNvbS92My9hcHBTdG9yZV9idXR0b25AMngucG5nPzZjMzZhY2UxXCIgaGVpZ2h0PVwiNDRweFwiIGFsdD1cIkFwcCBTdG9yZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiaW1nW2FsdD1cIkFwcCBTdG9yZVwiXSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGJyPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9tYXJnX3JpZ2h0XzEwLm9heF9tYXJnX2JvdHRvbV8yMlt0aXRsZT1cIlwiXTpudGgtY2hpbGQoMSkgPiBiciIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgY2xhc3M9XCJvYXhfZnIgb2F4X21hcmdfcmlnaHRfMTAgb2F4X21hcmdfYm90dG9tXzIyXCIgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vcGxheS5nb29nbGUuY29tL3N0b3JlL2FwcHMvZGV0YWlscz9pZD1jb20ub3V0ZG9vcmFjdGl2ZS5yb21hbmlhdHJhdmVsZ3VpZGVcIiB0aXRsZT1cIlwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9tYXJnX3JpZ2h0XzEwLm9heF9tYXJnX2JvdHRvbV8yMlt0aXRsZT1cIlwiXTpudGgtY2hpbGQoMikiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbWcgY2xhc3M9XCJcIiBzcmM9XCJodHRwczovL3Jlcy5vYXN0YXRpYy5jb20vdjMvZ29vZ2xlUGxheV9idXR0b25AMngucG5nPzZjMzZhY2UxXCIgaGVpZ2h0PVwiNDRweFwiIGFsdD1cIkdvb2dsZSBQbGF5IFN0b3JlXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJpbWdbYWx0PVwiR29vZ2xlIFBsYXkgU3RvcmVcIl0iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxicj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfbWFyZ19yaWdodF8xMC5vYXhfbWFyZ19ib3R0b21fMjJbdGl0bGU9XCJcIl06bnRoLWNoaWxkKDIpID4gYnIiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjx1bCBjbGFzcz1cIm9heF91bnN0eWxlZF9saXN0IG9heF9jbGVhcmZpeCBvYXhfbm9fbWFyZ1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9tYXJnX3JpZ2h0X25lZ18xMCA+IC5vYXhfdW5zdHlsZWRfbGlzdC5vYXhfbm9fbWFyZy5vYXhfY2xlYXJmaXgiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaSBjbGFzcz1cIm9heF9mbCBvYXhfbWFyZ19yaWdodF8xMFwiPlxuXHRcdDxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vdGVybXMtYW5kLWNvbmRpdGlvbnMuaHRtbFwiIGNsYXNzPVwib2F4LTRtYXAtdGVybXNcIj5UZXJtZW5pIMiZaSBjb25kacibaWk8L2E+XG5cdDwvbGk+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X21hcmdfcmlnaHRfMTAub2F4X2ZsOm50aC1jaGlsZCgxKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby90ZXJtcy1hbmQtY29uZGl0aW9ucy5odG1sXCIgY2xhc3M9XCJvYXgtNG1hcC10ZXJtc1wiPlRlcm1lbmkgyJlpIGNvbmRpyJtpaTwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtNG1hcC10ZXJtcyIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGxpIGNsYXNzPVwib2F4X2ZsIG9heF9tYXJnX3JpZ2h0XzEwXCI+XG5cdFx0PGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9tYXAtY29weXJpZ2h0Lmh0bWxcIj5JbmZvcm1hyJtpaSBoYXJ0xIM8L2E+XG5cdDwvbGk+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X21hcmdfcmlnaHRfMTAub2F4X2ZsOm50aC1jaGlsZCgyKSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9tYXAtY29weXJpZ2h0Lmh0bWxcIj5JbmZvcm1hyJtpaSBoYXJ0xIM8L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X21hcmdfcmlnaHRfMTAub2F4X2ZsOm50aC1jaGlsZCgyKSA+IGEiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaSBjbGFzcz1cIm9heF9mbCBvYXhfbWFyZ19yaWdodF8xMFwiPlxuXHRcdDxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vcHJpdmFjeS5odG1sXCIgY2xhc3M9XCJvYXgtNG1hcC1wcml2YWN5XCI+UG9saXRpY2EgZGUgY29uZmlkZW7Im2lhbGl0YXRlPC9hPlxuXHQ8L2xpPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9tYXJnX3JpZ2h0XzEwLm9heF9mbDpudGgtY2hpbGQoMykiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vcHJpdmFjeS5odG1sXCIgY2xhc3M9XCJvYXgtNG1hcC1wcml2YWN5XCI+UG9saXRpY2EgZGUgY29uZmlkZW7Im2lhbGl0YXRlPC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC00bWFwLXByaXZhY3kiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkFsbCBwYWdlIGNvbnRlbnQgaXMgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxsaSBjbGFzcz1cIm9heF9mbCBvYXhfbWFyZ19yaWdodF8xMFwiPlxuXHRcdDxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vaW1wcmludC5odG1sXCIgY2xhc3M9XCJvYXgtNG1hcC1pbXByaW50XCI+TWVuyJtpdW5pIGxlZ2FsZTwvYT5cblx0PC9saT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfbWFyZ19yaWdodF8xMC5vYXhfZmw6bnRoLWNoaWxkKDQpIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJBbGwgcGFnZSBjb250ZW50IGlzIGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL2ltcHJpbnQuaHRtbFwiIGNsYXNzPVwib2F4LTRtYXAtaW1wcmludFwiPk1lbsibaXVuaSBsZWdhbGU8L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LTRtYXAtaW1wcmludCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiQWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGltZyBzcmM9XCJodHRwczovL3Jlcy5vYXN0YXRpYy5jb20vdGhlbWVzL29hZC1yb21hbmlhdHJhdmVsL2Nzcy9pbWFnZXMvRVUtUk8tbG9nby5wbmdcIiBzdHlsZT1cInBvc2l0aW9uOiBhYnNvbHV0ZTsgd2lkdGg6IDM1JTsgbGVmdDogMzJweDsgYm90dG9tOiAzN3B4O1wiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9wb3J0YWxfd3JhcHBlciA+IGltZyIKICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJza2lwLWxpbmsiLAogICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5rZXlib2FyZCIsCiAgICAgICAgImJlc3QtcHJhY3RpY2UiCiAgICAgIF0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnN1cmUgYWxsIHNraXAgbGlua3MgaGF2ZSBhIGZvY3VzYWJsZSB0YXJnZXQiLAogICAgICAiaGVscCI6ICJUaGUgc2tpcC1saW5rIHRhcmdldCBzaG91bGQgZXhpc3QgYW5kIGJlIGZvY3VzYWJsZSIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L3NraXAtbGluaz9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAic2tpcC1saW5rIiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIlNraXAgbGluayB0YXJnZXQgZXhpc3RzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cIiNtYWluQ29udGVudFwiIGNsYXNzPVwib2F4X3NraXBMaW5rIG9heF92aXN1YWxseV9oaWRkZW5cIj5TYXJpIGxhIGNvbsibaW51dFxuPC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9za2lwTGluayIKICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJ0YWJpbmRleCIsCiAgICAgICJpbXBhY3QiOiBudWxsLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0LmtleWJvYXJkIiwKICAgICAgICAiYmVzdC1wcmFjdGljZSIKICAgICAgXSwKICAgICAgImRlc2NyaXB0aW9uIjogIkVuc3VyZXMgdGFiaW5kZXggYXR0cmlidXRlIHZhbHVlcyBhcmUgbm90IGdyZWF0ZXIgdGhhbiAwIiwKICAgICAgImhlbHAiOiAiRWxlbWVudHMgc2hvdWxkIG5vdCBoYXZlIHRhYmluZGV4IGdyZWF0ZXIgdGhhbiB6ZXJvIiwKICAgICAgImhlbHBVcmwiOiAiaHR0cHM6Ly9kZXF1ZXVuaXZlcnNpdHkuY29tL3J1bGVzL2F4ZS80LjgvdGFiaW5kZXg/YXBwbGljYXRpb249cGxheXdyaWdodCIsCiAgICAgICJub2RlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInRhYmluZGV4IiwKICAgICAgICAgICAgICAiZGF0YSI6IG51bGwsCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBkb2VzIG5vdCBoYXZlIGEgdGFiaW5kZXggZ3JlYXRlciB0aGFuIDAiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6IG51bGwsCiAgICAgICAgICAiaHRtbCI6ICI8aW5wdXQgdGFiaW5kZXg9XCItMVwiIHR5cGU9XCJzdWJtaXRcIiBhcmlhLWxhYmVsPVwiUG9ybmXImXRlIGPEg3V0YXJlYVwiIGNsYXNzPVwib2F4X2ljb25fZm9udCBvYXhfZm9udF9sYXJnZTI4XCIgdmFsdWU9XCLwn5SNXCI+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2ljb25fZm9udCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAidGFiaW5kZXgiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50IGRvZXMgbm90IGhhdmUgYSB0YWJpbmRleCBncmVhdGVyIHRoYW4gMCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogbnVsbCwKICAgICAgICAgICJodG1sIjogIjxpbnB1dCB0YWJpbmRleD1cIi0xXCIgaWQ9XCJzZWFyY2hGaWVsZFwiIHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJvYXhfc2VhcmNoZm9ybV90ZXh0IG9heC1zZWFyY2hmb3JtLXRleHRcIiBuYW1lPVwicVwiIHZhbHVlPVwiXCIgcGxhY2Vob2xkZXI9XCJDxIN1dGFyZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiI3NlYXJjaEZpZWxkIgogICAgICAgICAgXQogICAgICAgIH0KICAgICAgXQogICAgfQogIF0sCiAgImluY29tcGxldGUiOiBbCiAgICB7CiAgICAgICJpZCI6ICJjb2xvci1jb250cmFzdCIsCiAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICJ0YWdzIjogWwogICAgICAgICJjYXQuY29sb3IiLAogICAgICAgICJ3Y2FnMmFhIiwKICAgICAgICAid2NhZzE0MyIsCiAgICAgICAgIlRUdjUiLAogICAgICAgICJUVDEzLmMiLAogICAgICAgICJFTi0zMDEtNTQ5IiwKICAgICAgICAiRU4tOS4xLjQuMyIsCiAgICAgICAgIkFDVCIKICAgICAgXSwKICAgICAgImRlc2NyaXB0aW9uIjogIkVuc3VyZXMgdGhlIGNvbnRyYXN0IGJldHdlZW4gZm9yZWdyb3VuZCBhbmQgYmFja2dyb3VuZCBjb2xvcnMgbWVldHMgV0NBRyAyIEFBIG1pbmltdW0gY29udHJhc3QgcmF0aW8gdGhyZXNob2xkcyIsCiAgICAgICJoZWxwIjogIkVsZW1lbnRzIG11c3QgbWVldCBtaW5pbXVtIGNvbG9yIGNvbnRyYXN0IHJhdGlvIHRocmVzaG9sZHMiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9jb2xvci1jb250cmFzdD9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImNvbnRyYXN0UmF0aW8iOiAwLAogICAgICAgICAgICAgICAgImZvbnRTaXplIjogIjEwLjVwdCAoMTRweCkiLAogICAgICAgICAgICAgICAgImZvbnRXZWlnaHQiOiAibm9ybWFsIiwKICAgICAgICAgICAgICAgICJtZXNzYWdlS2V5IjogImJnR3JhZGllbnQiLAogICAgICAgICAgICAgICAgImV4cGVjdGVkQ29udHJhc3RSYXRpbyI6ICI0LjU6MSIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vZ2hpZC1kZS1jYWxhdG9yaWUvcm9tYW5pYS8xMDM2OTkxL1wiIHRpdGxlPVwiR2hpZCB0dXJpc3RpY1wiPkdoaWQgdHVyaXN0aWM8L2E+IiwKICAgICAgICAgICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgICAgICAgICAiLm9heF9oZWFkZXJfbmF2ID4gbGk6bnRoLWNoaWxkKDEpID4gYVt0aXRsZT1cIkdoaWQgdHVyaXN0aWNcIl0iCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCdzIGJhY2tncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgZHVlIHRvIGEgYmFja2dyb3VuZCBncmFkaWVudCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby9naGlkLWRlLWNhbGF0b3JpZS9yb21hbmlhLzEwMzY5OTEvXCIgdGl0bGU9XCJHaGlkIHR1cmlzdGljXCI+R2hpZCB0dXJpc3RpYzwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfaGVhZGVyX25hdiA+IGxpOm50aC1jaGlsZCgxKSA+IGFbdGl0bGU9XCJHaGlkIHR1cmlzdGljXCJdIgogICAgICAgICAgXSwKICAgICAgICAgICJmYWlsdXJlU3VtbWFyeSI6ICJGaXggYW55IG9mIHRoZSBmb2xsb3dpbmc6XG4gIEVsZW1lbnQncyBiYWNrZ3JvdW5kIGNvbG9yIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkIGR1ZSB0byBhIGJhY2tncm91bmQgZ3JhZGllbnQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImNvbG9yLWNvbnRyYXN0IiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJjb250cmFzdFJhdGlvIjogMCwKICAgICAgICAgICAgICAgICJmb250U2l6ZSI6ICIxMC41cHQgKDE0cHgpIiwKICAgICAgICAgICAgICAgICJmb250V2VpZ2h0IjogIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAibWVzc2FnZUtleSI6ICJiZ0dyYWRpZW50IiwKICAgICAgICAgICAgICAgICJleHBlY3RlZENvbnRyYXN0UmF0aW8iOiAiNC41OjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL3BvaXMvXCIgdGl0bGU9XCJEZXN0aW5hyJtpaVwiPkRlc3RpbmHIm2lpPC9hPiIsCiAgICAgICAgICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICAgICAgICAgImFbdGl0bGU9XCJEZXN0aW5hyJtpaVwiXSIKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50J3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBkdWUgdG8gYSBiYWNrZ3JvdW5kIGdyYWRpZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL3BvaXMvXCIgdGl0bGU9XCJEZXN0aW5hyJtpaVwiPkRlc3RpbmHIm2lpPC9hPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiYVt0aXRsZT1cIkRlc3RpbmHIm2lpXCJdIgogICAgICAgICAgXSwKICAgICAgICAgICJmYWlsdXJlU3VtbWFyeSI6ICJGaXggYW55IG9mIHRoZSBmb2xsb3dpbmc6XG4gIEVsZW1lbnQncyBiYWNrZ3JvdW5kIGNvbG9yIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkIGR1ZSB0byBhIGJhY2tncm91bmQgZ3JhZGllbnQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImNvbG9yLWNvbnRyYXN0IiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJjb250cmFzdFJhdGlvIjogMCwKICAgICAgICAgICAgICAgICJmb250U2l6ZSI6ICIxMC41cHQgKDE0cHgpIiwKICAgICAgICAgICAgICAgICJmb250V2VpZ2h0IjogIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAibWVzc2FnZUtleSI6ICJiZ0dyYWRpZW50IiwKICAgICAgICAgICAgICAgICJleHBlY3RlZENvbnRyYXN0UmF0aW8iOiAiNC41OjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL3RvdXJzL1wiIHRpdGxlPVwiVHJhc2VlXCI+VHJhc2VlPC9hPiIsCiAgICAgICAgICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICAgICAgICAgImFbdGl0bGU9XCJUcmFzZWVcIl0iCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCdzIGJhY2tncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgZHVlIHRvIGEgYmFja2dyb3VuZCBncmFkaWVudCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgImh0bWwiOiAiPGEgaHJlZj1cImh0dHBzOi8vcm9tYW5pYXRyYXZlbC5ndWlkZS9yby90b3Vycy9cIiB0aXRsZT1cIlRyYXNlZVwiPlRyYXNlZTwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImFbdGl0bGU9XCJUcmFzZWVcIl0iCiAgICAgICAgICBdLAogICAgICAgICAgImZhaWx1cmVTdW1tYXJ5IjogIkZpeCBhbnkgb2YgdGhlIGZvbGxvd2luZzpcbiAgRWxlbWVudCdzIGJhY2tncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgZHVlIHRvIGEgYmFja2dyb3VuZCBncmFkaWVudCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImNvbnRyYXN0UmF0aW8iOiAwLAogICAgICAgICAgICAgICAgImZvbnRTaXplIjogIjEwLjVwdCAoMTRweCkiLAogICAgICAgICAgICAgICAgImZvbnRXZWlnaHQiOiAibm9ybWFsIiwKICAgICAgICAgICAgICAgICJtZXNzYWdlS2V5IjogImJnR3JhZGllbnQiLAogICAgICAgICAgICAgICAgImV4cGVjdGVkQ29udHJhc3RSYXRpbyI6ICI0LjU6MSIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJodG1sIjogIjxhIGhyZWY9XCJodHRwczovL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvcm8vc291cmNlL3JvbWFuaWF0cmF2ZWwuZ3VpZGUvMzM2ODA4MTYvXCIgdGl0bGU9XCJEZXNwcmUgbm9pXCI+RGVzcHJlIG5vaTwvYT4iLAogICAgICAgICAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAgICAgICAgICJhW3RpdGxlPVwiRGVzcHJlIG5vaVwiXSIKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50J3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBkdWUgdG8gYSBiYWNrZ3JvdW5kIGdyYWRpZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL3NvdXJjZS9yb21hbmlhdHJhdmVsLmd1aWRlLzMzNjgwODE2L1wiIHRpdGxlPVwiRGVzcHJlIG5vaVwiPkRlc3ByZSBub2k8L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICJhW3RpdGxlPVwiRGVzcHJlIG5vaVwiXSIKICAgICAgICAgIF0sCiAgICAgICAgICAiZmFpbHVyZVN1bW1hcnkiOiAiRml4IGFueSBvZiB0aGUgZm9sbG93aW5nOlxuICBFbGVtZW50J3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBkdWUgdG8gYSBiYWNrZ3JvdW5kIGdyYWRpZW50IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJjb2xvci1jb250cmFzdCIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiY29udHJhc3RSYXRpbyI6IDAsCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMTAuNXB0ICgxNHB4KSIsCiAgICAgICAgICAgICAgICAiZm9udFdlaWdodCI6ICJub3JtYWwiLAogICAgICAgICAgICAgICAgIm1lc3NhZ2VLZXkiOiAiYmdPdmVybGFwIiwKICAgICAgICAgICAgICAgICJleHBlY3RlZENvbnRyYXN0UmF0aW8iOiAiNC41OjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50J3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBiZWNhdXNlIGl0IGlzIG92ZXJsYXBwZWQgYnkgYW5vdGhlciBlbGVtZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAiaHRtbCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9yb21hbmlhdHJhdmVsLmd1aWRlL3JvL2NvbW11bml0eS9zaWduLWluLmh0bWxcIiBjbGFzcz1cIm9heC1sb2dpbi1jb25uZWN0b3ItbGluayBvYXhfYnRuIG9heF9idG5fbGFyZ2Ugb2F4X2J0bl9jdXN0b20gb2F4X2hlYWRlcl9idXR0b24gb2F4X21hcmdfdG9wXzJcIj7Djm5yZWdpc3RyZWF6xIMtdGUgc2F1IGF1dGVudGlmaWPEgy10ZTwvYT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtbG9naW4tY29ubmVjdG9yLWxpbmsiCiAgICAgICAgICBdLAogICAgICAgICAgImZhaWx1cmVTdW1tYXJ5IjogIkZpeCBhbnkgb2YgdGhlIGZvbGxvd2luZzpcbiAgRWxlbWVudCdzIGJhY2tncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgYmVjYXVzZSBpdCBpcyBvdmVybGFwcGVkIGJ5IGFub3RoZXIgZWxlbWVudCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImNvbnRyYXN0UmF0aW8iOiAwLAogICAgICAgICAgICAgICAgImZvbnRTaXplIjogIjEwLjVwdCAoMTRweCkiLAogICAgICAgICAgICAgICAgImZvbnRXZWlnaHQiOiAibm9ybWFsIiwKICAgICAgICAgICAgICAgICJtZXNzYWdlS2V5IjogImJnT3ZlcmxhcCIsCiAgICAgICAgICAgICAgICAiZXhwZWN0ZWRDb250cmFzdFJhdGlvIjogIjQuNToxIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCdzIGJhY2tncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgYmVjYXVzZSBpdCBpcyBvdmVybGFwcGVkIGJ5IGFub3RoZXIgZWxlbWVudCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgImh0bWwiOiAiPGEgY2xhc3M9XCJvYXhfc2VsZWN0aW9uIG9heF9oZWFkZXJfYnV0dG9uIG9heF9idG4gb2F4X2J0bl9tZWRpdW0gb2F4X2J0bl9kYXJrXCI+Uk88L2E+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X3NlbGVjdGlvbiIKICAgICAgICAgIF0sCiAgICAgICAgICAiZmFpbHVyZVN1bW1hcnkiOiAiRml4IGFueSBvZiB0aGUgZm9sbG93aW5nOlxuICBFbGVtZW50J3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBiZWNhdXNlIGl0IGlzIG92ZXJsYXBwZWQgYnkgYW5vdGhlciBlbGVtZW50IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJjb2xvci1jb250cmFzdCIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiY29udHJhc3RSYXRpbyI6IDAsCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMzMuMHB0ICg0NHB4KSIsCiAgICAgICAgICAgICAgICAiZm9udFdlaWdodCI6ICJib2xkIiwKICAgICAgICAgICAgICAgICJtZXNzYWdlS2V5IjogImltZ05vZGUiLAogICAgICAgICAgICAgICAgImV4cGVjdGVkQ29udHJhc3RSYXRpbyI6ICIzOjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiaHRtbCI6ICI8aW1nIHNyYz1cImh0dHBzOi8vaW1nMi5vYXN0YXRpYy5jb20vaW1nMi8yNTk0MzQwMy8xMDgweDQxMHIvdmFyaWFudC5qcGdcIiB3aWR0aD1cIjEwODBcIiBoZWlnaHQ9XCI0MTBcIiBzcmNzZXQ9XCJodHRwczovL2ltZzIub2FzdGF0aWMuY29tL2ltZzIvMjU5NDM0MDMvMTA4MHg0MTByL3ZhcmlhbnQuanBnIDEwODB3LGh0dHBzOi8vaW1nMi5vYXN0YXRpYy5jb20vaW1nMi8yNTk0MzQwMy8xMjUweDQ3NXIvdmFyaWFudC5qcGcgMTI1MHcsaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzI1OTQzNDAzLzIxNjB4ODIxci92YXJpYW50LmpwZyAyMTYwdyxodHRwczovL2ltZzIub2FzdGF0aWMuY29tL2ltZzIvMjU5NDM0MDMvMjUwMHg5NTByL3ZhcmlhbnQuanBnIDI1MDB3XCIgc2l6ZXM9XCIxMDB2d1wiIGFsdD1cIlByaXZlbGnImXRlIHNwcmUgU2VtZW5pY1wiIGNsYXNzPVwib2F4X3dpZHRoX2Z1bGxcIiBkYXRhLWltZ2NvdW50PVwiMVwiPiIsCiAgICAgICAgICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICAgICAgICAgImltZ1thbHQ9XCJQcml2ZWxpyJl0ZSBzcHJlIFNlbWVuaWNcIl0iCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCdzIGJhY2tncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgYmVjYXVzZSBlbGVtZW50IGNvbnRhaW5zIGFuIGltYWdlIG5vZGUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICJodG1sIjogIjxoMSBjbGFzcz1cIm9heF9ib2xkIG9heF9jdXN0b21fZm9udFwiPlxuXHRcdFx0XHRcdFx0U3RhaSBhY3RpdiDImWkgw65uIHNlem9udWwgcmVjZTogQXZlbnR1cmkgyJlpIHBlaXNhamUgZGUgdmlzIGlhcm5hPC9oMT4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgImgxIgogICAgICAgICAgXSwKICAgICAgICAgICJmYWlsdXJlU3VtbWFyeSI6ICJGaXggYW55IG9mIHRoZSBmb2xsb3dpbmc6XG4gIEVsZW1lbnQncyBiYWNrZ3JvdW5kIGNvbG9yIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkIGJlY2F1c2UgZWxlbWVudCBjb250YWlucyBhbiBpbWFnZSBub2RlIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJjb2xvci1jb250cmFzdCIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiY29udHJhc3RSYXRpbyI6IDAsCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMTguMHB0ICgyNHB4KSIsCiAgICAgICAgICAgICAgICAiZm9udFdlaWdodCI6ICJub3JtYWwiLAogICAgICAgICAgICAgICAgIm1lc3NhZ2VLZXkiOiAiYmdPdmVybGFwIiwKICAgICAgICAgICAgICAgICJleHBlY3RlZENvbnRyYXN0UmF0aW8iOiAiMzoxIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCdzIGJhY2tncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgYmVjYXVzZSBpdCBpcyBvdmVybGFwcGVkIGJ5IGFub3RoZXIgZWxlbWVudCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9tZW51X2JlbHRfdGl0bGVcIj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdEdoaWQgdHVyaXN0aWM8YnI+PHNwYW4gY2xhc3M9XCJvYXgtaWNvbi1hcnJvdy1yaWdodFwiPjwvc3Bhbj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0IFx0PC9kaXY+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X21hcmdfYm90dG9tXzQ0Om50aC1jaGlsZCgxKSA+IGEgPiAub2F4X21lbnVfYmVsdF9pdGVtID4gLm9heF9tZW51X2JlbHRfdGl0bGUiCiAgICAgICAgICBdLAogICAgICAgICAgImZhaWx1cmVTdW1tYXJ5IjogIkZpeCBhbnkgb2YgdGhlIGZvbGxvd2luZzpcbiAgRWxlbWVudCdzIGJhY2tncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgYmVjYXVzZSBpdCBpcyBvdmVybGFwcGVkIGJ5IGFub3RoZXIgZWxlbWVudCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImNvbnRyYXN0UmF0aW8iOiAwLAogICAgICAgICAgICAgICAgImZvbnRTaXplIjogIjE4LjBwdCAoMjRweCkiLAogICAgICAgICAgICAgICAgImZvbnRXZWlnaHQiOiAibm9ybWFsIiwKICAgICAgICAgICAgICAgICJtZXNzYWdlS2V5IjogImJnT3ZlcmxhcCIsCiAgICAgICAgICAgICAgICAiZXhwZWN0ZWRDb250cmFzdFJhdGlvIjogIjM6MSIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQncyBiYWNrZ3JvdW5kIGNvbG9yIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkIGJlY2F1c2UgaXQgaXMgb3ZlcmxhcHBlZCBieSBhbm90aGVyIGVsZW1lbnQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfbWVudV9iZWx0X3RpdGxlXCI+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRQYXRyaW1vbml1IFVORVNDTzxicj48c3BhbiBjbGFzcz1cIm9heC1pY29uLWFycm93LXJpZ2h0XCI+PC9zcGFuPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgXHQ8L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfbWFyZ19ib3R0b21fNDQ6bnRoLWNoaWxkKDIpID4gYSA+IC5vYXhfbWVudV9iZWx0X2l0ZW0gPiAub2F4X21lbnVfYmVsdF90aXRsZSIKICAgICAgICAgIF0sCiAgICAgICAgICAiZmFpbHVyZVN1bW1hcnkiOiAiRml4IGFueSBvZiB0aGUgZm9sbG93aW5nOlxuICBFbGVtZW50J3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBiZWNhdXNlIGl0IGlzIG92ZXJsYXBwZWQgYnkgYW5vdGhlciBlbGVtZW50IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJjb2xvci1jb250cmFzdCIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiY29udHJhc3RSYXRpbyI6IDAsCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMTguMHB0ICgyNHB4KSIsCiAgICAgICAgICAgICAgICAiZm9udFdlaWdodCI6ICJub3JtYWwiLAogICAgICAgICAgICAgICAgIm1lc3NhZ2VLZXkiOiAiYmdPdmVybGFwIiwKICAgICAgICAgICAgICAgICJleHBlY3RlZENvbnRyYXN0UmF0aW8iOiAiMzoxIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCdzIGJhY2tncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgYmVjYXVzZSBpdCBpcyBvdmVybGFwcGVkIGJ5IGFub3RoZXIgZWxlbWVudCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9tZW51X2JlbHRfdGl0bGVcIj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFByb2dyYW11bCBkZSBhZmlsaWVyZTxicj48c3BhbiBjbGFzcz1cIm9heC1pY29uLWFycm93LXJpZ2h0XCI+PC9zcGFuPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgXHQ8L2Rpdj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfbWFyZ19ib3R0b21fNDQ6bnRoLWNoaWxkKDMpID4gYSA+IC5vYXhfbWVudV9iZWx0X2l0ZW0gPiAub2F4X21lbnVfYmVsdF90aXRsZSIKICAgICAgICAgIF0sCiAgICAgICAgICAiZmFpbHVyZVN1bW1hcnkiOiAiRml4IGFueSBvZiB0aGUgZm9sbG93aW5nOlxuICBFbGVtZW50J3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBiZWNhdXNlIGl0IGlzIG92ZXJsYXBwZWQgYnkgYW5vdGhlciBlbGVtZW50IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJjb2xvci1jb250cmFzdCIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiY29udHJhc3RSYXRpbyI6IDAsCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMTAuMXB0ICgxMy41cHgpIiwKICAgICAgICAgICAgICAgICJmb250V2VpZ2h0IjogIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAibWVzc2FnZUtleSI6ICJpbWdOb2RlIiwKICAgICAgICAgICAgICAgICJleHBlY3RlZENvbnRyYXN0UmF0aW8iOiAiNC41OjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X3NuaXBwZXRfbG9jYXRvciBvYXhfaW1hZ2Vfc25pcHBldF9sb2NhdG9yXCI+IiwKICAgICAgICAgICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgICAgICAgICAiLm9heC1pZC0zNDQyMDQxMiA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiAub2F4X3NuaXBwZXRfbG9jYXRvci5vYXhfaW1hZ2Vfc25pcHBldF9sb2NhdG9yIgogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiaHRtbCI6ICI8aW1nIHdpZHRoPVwiNDIwXCIgaGVpZ2h0PVwiMjM3XCIgc3JjPVwiaHR0cHM6Ly9pbWcub2FzdGF0aWMuY29tL2ltZzIvMzQ0MjA0OTAvNDIweDIzN3IvdmFyaWFudC5qcGdcIiBzcmNzZXQ9XCJodHRwczovL2ltZy5vYXN0YXRpYy5jb20vaW1nMi8zNDQyMDQ5MC80MjB4MjM3ci92YXJpYW50LmpwZyA0MjB3LGh0dHBzOi8vaW1nLm9hc3RhdGljLmNvbS9pbWcyLzM0NDIwNDkwLzcyOHg0MTByL3ZhcmlhbnQuanBnIDcyOHcsaHR0cHM6Ly9pbWcub2FzdGF0aWMuY29tL2ltZzIvMzQ0MjA0OTAvMTA4MHg2MTByL3ZhcmlhbnQuanBnIDEwODB3XCIgYWx0PVwiXCIgc2l6ZXM9XCIobWluLXdpZHRoOiA4MDBweCkgNjAwcHgsIChtaW4td2lkdGg6IDY0MHB4KSA1MHZ3LCAxMDB2d1wiIGRhdGEtb2F4X2ltZ19sb2FkPVwiZG9uZVwiPiIsCiAgICAgICAgICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICAgICAgICAgIi5vYXgtaWQtMzQ0MjA0MTIgPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gb3V0cHV0W2RhdGEtb2F4X2xhenlfbG9hZD1cImRvbmVcIl06bnRoLWNoaWxkKDMpID4gaW1nW2FsdD1cIlwiXVt3aWR0aD1cIjQyMFwiXVtoZWlnaHQ9XCIyMzdcIl0iCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCdzIGJhY2tncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgYmVjYXVzZSBlbGVtZW50IGNvbnRhaW5zIGFuIGltYWdlIG5vZGUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICJodG1sIjogIjxzcGFuIGNsYXNzPVwib2F4X2VsbGlwc2lzXCI+QmFuYXR1bCBtb250YW48L3NwYW4+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM0NDIwNDEyID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IC5vYXhfc25pcHBldF9sb2NhdG9yLm9heF9pbWFnZV9zbmlwcGV0X2xvY2F0b3IgPiAub2F4X2VsbGlwc2lzIgogICAgICAgICAgXSwKICAgICAgICAgICJmYWlsdXJlU3VtbWFyeSI6ICJGaXggYW55IG9mIHRoZSBmb2xsb3dpbmc6XG4gIEVsZW1lbnQncyBiYWNrZ3JvdW5kIGNvbG9yIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkIGJlY2F1c2UgZWxlbWVudCBjb250YWlucyBhbiBpbWFnZSBub2RlIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJjb2xvci1jb250cmFzdCIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiY29udHJhc3RSYXRpbyI6IDAsCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMTAuNXB0ICgxNHB4KSIsCiAgICAgICAgICAgICAgICAiZm9udFdlaWdodCI6ICJub3JtYWwiLAogICAgICAgICAgICAgICAgIm1lc3NhZ2VLZXkiOiAiYmdHcmFkaWVudCIsCiAgICAgICAgICAgICAgICAiZXhwZWN0ZWRDb250cmFzdFJhdGlvIjogIjQuNToxIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9nYWxsZXJ5X3NoYWRvd1wiPjwvZGl2PiIsCiAgICAgICAgICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICAgICAgICAgIi5vYXgtaWQtMzQ0MjA0MTIgPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gLm9heF9nYWxsZXJ5X3NoYWRvdyIKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50J3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBkdWUgdG8gYSBiYWNrZ3JvdW5kIGdyYWRpZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAiaHRtbCI6ICI8c3BhbiBjbGFzcz1cIm9heF9mb250X3NtYWxsIG9heF9pbmxpbmVfYmxvY2sgb2F4X21hcmdfYm90dG9tXzZcIj5SZWNvbWFuZGFyZSByZWdpdW5lIGRlIHNjaGk8L3NwYW4+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM0NDIwNDEyID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IGZpZ2NhcHRpb24gPiAub2F4X21hcmdfYm90dG9tXzYub2F4X2lubGluZV9ibG9jay5vYXhfZm9udF9zbWFsbCIKICAgICAgICAgIF0sCiAgICAgICAgICAiZmFpbHVyZVN1bW1hcnkiOiAiRml4IGFueSBvZiB0aGUgZm9sbG93aW5nOlxuICBFbGVtZW50J3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBkdWUgdG8gYSBiYWNrZ3JvdW5kIGdyYWRpZW50IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJjb2xvci1jb250cmFzdCIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiY29udHJhc3RSYXRpbyI6IDAsCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMTIuMHB0ICgxNnB4KSIsCiAgICAgICAgICAgICAgICAiZm9udFdlaWdodCI6ICJib2xkIiwKICAgICAgICAgICAgICAgICJtZXNzYWdlS2V5IjogImJnR3JhZGllbnQiLAogICAgICAgICAgICAgICAgImV4cGVjdGVkQ29udHJhc3RSYXRpbyI6ICI0LjU6MSIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfZ2FsbGVyeV9zaGFkb3dcIj48L2Rpdj4iLAogICAgICAgICAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAgICAgICAgICIub2F4LWlkLTM0NDIwNDEyID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IC5vYXhfZ2FsbGVyeV9zaGFkb3ciCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCdzIGJhY2tncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgZHVlIHRvIGEgYmFja2dyb3VuZCBncmFkaWVudCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgImh0bWwiOiAiPHN0cm9uZyBjbGFzcz1cIm9heF9ibG9jayBvYXhfc2VtaV9ib2xkXCI+XG5cdFx0IFx0IFx0XHRTdGHIm2l1bmVhIMiZaSBQw6JydGlhIFNlbWVuaWNcblx0XHQgXHQgXHQ8L3N0cm9uZz4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtMzQ0MjA0MTIgPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gZmlnY2FwdGlvbiA+IC5vYXhfYmxvY2sub2F4X3NlbWlfYm9sZCIKICAgICAgICAgIF0sCiAgICAgICAgICAiZmFpbHVyZVN1bW1hcnkiOiAiRml4IGFueSBvZiB0aGUgZm9sbG93aW5nOlxuICBFbGVtZW50J3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBkdWUgdG8gYSBiYWNrZ3JvdW5kIGdyYWRpZW50IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJjb2xvci1jb250cmFzdCIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiY29udHJhc3RSYXRpbyI6IDAsCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMTAuMXB0ICgxMy41cHgpIiwKICAgICAgICAgICAgICAgICJmb250V2VpZ2h0IjogIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAibWVzc2FnZUtleSI6ICJpbWdOb2RlIiwKICAgICAgICAgICAgICAgICJleHBlY3RlZENvbnRyYXN0UmF0aW8iOiAiNC41OjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X3NuaXBwZXRfbG9jYXRvciBvYXhfaW1hZ2Vfc25pcHBldF9sb2NhdG9yXCI+IiwKICAgICAgICAgICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgICAgICAgICAiLm9heC1pZC0zNTc0NjIzNyA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiAub2F4X3NuaXBwZXRfbG9jYXRvci5vYXhfaW1hZ2Vfc25pcHBldF9sb2NhdG9yIgogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiaHRtbCI6ICI8aW1nIHdpZHRoPVwiNDIwXCIgaGVpZ2h0PVwiMjM3XCIgc3JjPVwiaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzM1NzQ2MzI4LzQyMHgyMzdyL3ZhcmlhbnQuanBnXCIgc3Jjc2V0PVwiaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzM1NzQ2MzI4LzQyMHgyMzdyL3ZhcmlhbnQuanBnIDQyMHcsaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzM1NzQ2MzI4LzcyOHg0MTByL3ZhcmlhbnQuanBnIDcyOHcsaHR0cHM6Ly9pbWcyLm9hc3RhdGljLmNvbS9pbWcyLzM1NzQ2MzI4LzEwODB4NjEwci92YXJpYW50LmpwZyAxMDgwd1wiIGFsdD1cIlwiIHNpemVzPVwiKG1pbi13aWR0aDogODAwcHgpIDYwMHB4LCAobWluLXdpZHRoOiA2NDBweCkgNTB2dywgMTAwdndcIiBkYXRhLW9heF9pbWdfbG9hZD1cImRvbmVcIj4iLAogICAgICAgICAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAgICAgICAgICIub2F4LWlkLTM1NzQ2MjM3ID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IG91dHB1dFtkYXRhLW9heF9sYXp5X2xvYWQ9XCJkb25lXCJdOm50aC1jaGlsZCgzKSA+IGltZ1thbHQ9XCJcIl1bd2lkdGg9XCI0MjBcIl1baGVpZ2h0PVwiMjM3XCJdIgogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQncyBiYWNrZ3JvdW5kIGNvbG9yIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkIGJlY2F1c2UgZWxlbWVudCBjb250YWlucyBhbiBpbWFnZSBub2RlIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAiaHRtbCI6ICI8c3BhbiBjbGFzcz1cIm9heF9lbGxpcHNpc1wiPlZhbGVhIEppdWx1aTwvc3Bhbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtMzU3NDYyMzcgPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gLm9heF9zbmlwcGV0X2xvY2F0b3Iub2F4X2ltYWdlX3NuaXBwZXRfbG9jYXRvciA+IC5vYXhfZWxsaXBzaXMiCiAgICAgICAgICBdLAogICAgICAgICAgImZhaWx1cmVTdW1tYXJ5IjogIkZpeCBhbnkgb2YgdGhlIGZvbGxvd2luZzpcbiAgRWxlbWVudCdzIGJhY2tncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgYmVjYXVzZSBlbGVtZW50IGNvbnRhaW5zIGFuIGltYWdlIG5vZGUiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImNvbG9yLWNvbnRyYXN0IiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJjb250cmFzdFJhdGlvIjogMCwKICAgICAgICAgICAgICAgICJmb250U2l6ZSI6ICIxMC41cHQgKDE0cHgpIiwKICAgICAgICAgICAgICAgICJmb250V2VpZ2h0IjogIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAibWVzc2FnZUtleSI6ICJiZ0dyYWRpZW50IiwKICAgICAgICAgICAgICAgICJleHBlY3RlZENvbnRyYXN0UmF0aW8iOiAiNC41OjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2dhbGxlcnlfc2hhZG93XCI+PC9kaXY+IiwKICAgICAgICAgICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgICAgICAgICAiLm9heC1pZC0zNTc0NjIzNyA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiAub2F4X2dhbGxlcnlfc2hhZG93IgogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQncyBiYWNrZ3JvdW5kIGNvbG9yIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkIGR1ZSB0byBhIGJhY2tncm91bmQgZ3JhZGllbnQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICJodG1sIjogIjxzcGFuIGNsYXNzPVwib2F4X2ZvbnRfc21hbGwgb2F4X2lubGluZV9ibG9jayBvYXhfbWFyZ19ib3R0b21fNlwiPlJlY29tYW5kYXJlIHJlZ2l1bmUgZGUgc2NoaTwvc3Bhbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtMzU3NDYyMzcgPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gZmlnY2FwdGlvbiA+IC5vYXhfbWFyZ19ib3R0b21fNi5vYXhfaW5saW5lX2Jsb2NrLm9heF9mb250X3NtYWxsIgogICAgICAgICAgXSwKICAgICAgICAgICJmYWlsdXJlU3VtbWFyeSI6ICJGaXggYW55IG9mIHRoZSBmb2xsb3dpbmc6XG4gIEVsZW1lbnQncyBiYWNrZ3JvdW5kIGNvbG9yIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkIGR1ZSB0byBhIGJhY2tncm91bmQgZ3JhZGllbnQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImNvbG9yLWNvbnRyYXN0IiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJjb250cmFzdFJhdGlvIjogMCwKICAgICAgICAgICAgICAgICJmb250U2l6ZSI6ICIxMi4wcHQgKDE2cHgpIiwKICAgICAgICAgICAgICAgICJmb250V2VpZ2h0IjogImJvbGQiLAogICAgICAgICAgICAgICAgIm1lc3NhZ2VLZXkiOiAiYmdHcmFkaWVudCIsCiAgICAgICAgICAgICAgICAiZXhwZWN0ZWRDb250cmFzdFJhdGlvIjogIjQuNToxIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9nYWxsZXJ5X3NoYWRvd1wiPjwvZGl2PiIsCiAgICAgICAgICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICAgICAgICAgIi5vYXgtaWQtMzU3NDYyMzcgPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gLm9heF9nYWxsZXJ5X3NoYWRvdyIKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50J3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBkdWUgdG8gYSBiYWNrZ3JvdW5kIGdyYWRpZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAiaHRtbCI6ICI8c3Ryb25nIGNsYXNzPVwib2F4X2Jsb2NrIG9heF9zZW1pX2JvbGRcIj5cblx0XHQgXHQgXHRcdFN0YcibaXVuZWEgU3RyYWphXG5cdFx0IFx0IFx0PC9zdHJvbmc+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTM1NzQ2MjM3ID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IGZpZ2NhcHRpb24gPiAub2F4X2Jsb2NrLm9heF9zZW1pX2JvbGQiCiAgICAgICAgICBdLAogICAgICAgICAgImZhaWx1cmVTdW1tYXJ5IjogIkZpeCBhbnkgb2YgdGhlIGZvbGxvd2luZzpcbiAgRWxlbWVudCdzIGJhY2tncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgZHVlIHRvIGEgYmFja2dyb3VuZCBncmFkaWVudCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImNvbnRyYXN0UmF0aW8iOiAwLAogICAgICAgICAgICAgICAgImZvbnRTaXplIjogIjEwLjVwdCAoMTRweCkiLAogICAgICAgICAgICAgICAgImZvbnRXZWlnaHQiOiAibm9ybWFsIiwKICAgICAgICAgICAgICAgICJtZXNzYWdlS2V5IjogImJnR3JhZGllbnQiLAogICAgICAgICAgICAgICAgImV4cGVjdGVkQ29udHJhc3RSYXRpbyI6ICI0LjU6MSIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfZ2FsbGVyeV9zaGFkb3dcIj48L2Rpdj4iLAogICAgICAgICAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAgICAgICAgICIub2F4LWlkLTQ0NDI1NjU4ID4gYSA+IC5vYXhfaW1hZ2Vfc25pcHBldCA+IC5vYXhfZ2FsbGVyeV9zaGFkb3ciCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCdzIGJhY2tncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgZHVlIHRvIGEgYmFja2dyb3VuZCBncmFkaWVudCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgImh0bWwiOiAiPHNwYW4gY2xhc3M9XCJvYXhfZm9udF9zbWFsbCBvYXhfaW5saW5lX2Jsb2NrIG9heF9tYXJnX2JvdHRvbV82XCI+UmVjb21hbmRhcmUgcmVnaXVuZSBkZSBzY2hpPC9zcGFuPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC00NDQyNTY1OCA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiBmaWdjYXB0aW9uID4gLm9heF9tYXJnX2JvdHRvbV82Lm9heF9pbmxpbmVfYmxvY2sub2F4X2ZvbnRfc21hbGwiCiAgICAgICAgICBdLAogICAgICAgICAgImZhaWx1cmVTdW1tYXJ5IjogIkZpeCBhbnkgb2YgdGhlIGZvbGxvd2luZzpcbiAgRWxlbWVudCdzIGJhY2tncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgZHVlIHRvIGEgYmFja2dyb3VuZCBncmFkaWVudCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImNvbnRyYXN0UmF0aW8iOiAwLAogICAgICAgICAgICAgICAgImZvbnRTaXplIjogIjEyLjBwdCAoMTZweCkiLAogICAgICAgICAgICAgICAgImZvbnRXZWlnaHQiOiAiYm9sZCIsCiAgICAgICAgICAgICAgICAibWVzc2FnZUtleSI6ICJiZ0dyYWRpZW50IiwKICAgICAgICAgICAgICAgICJleHBlY3RlZENvbnRyYXN0UmF0aW8iOiAiNC41OjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2dhbGxlcnlfc2hhZG93XCI+PC9kaXY+IiwKICAgICAgICAgICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgICAgICAgICAiLm9heC1pZC00NDQyNTY1OCA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiAub2F4X2dhbGxlcnlfc2hhZG93IgogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQncyBiYWNrZ3JvdW5kIGNvbG9yIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkIGR1ZSB0byBhIGJhY2tncm91bmQgZ3JhZGllbnQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICJodG1sIjogIjxzdHJvbmcgY2xhc3M9XCJvYXhfYmxvY2sgb2F4X3NlbWlfYm9sZFwiPlxuXHRcdCBcdCBcdFx0RG9tZW5pdWwgc2NoaWFiaWwgUHJlZGVhbFxuXHRcdCBcdCBcdDwvc3Ryb25nPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC00NDQyNTY1OCA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiBmaWdjYXB0aW9uID4gLm9heF9ibG9jay5vYXhfc2VtaV9ib2xkIgogICAgICAgICAgXSwKICAgICAgICAgICJmYWlsdXJlU3VtbWFyeSI6ICJGaXggYW55IG9mIHRoZSBmb2xsb3dpbmc6XG4gIEVsZW1lbnQncyBiYWNrZ3JvdW5kIGNvbG9yIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkIGR1ZSB0byBhIGJhY2tncm91bmQgZ3JhZGllbnQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImNvbG9yLWNvbnRyYXN0IiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJjb250cmFzdFJhdGlvIjogMCwKICAgICAgICAgICAgICAgICJmb250U2l6ZSI6ICIxMC41cHQgKDE0cHgpIiwKICAgICAgICAgICAgICAgICJmb250V2VpZ2h0IjogIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAibWVzc2FnZUtleSI6ICJiZ0dyYWRpZW50IiwKICAgICAgICAgICAgICAgICJleHBlY3RlZENvbnRyYXN0UmF0aW8iOiAiNC41OjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2dhbGxlcnlfc2hhZG93XCI+PC9kaXY+IiwKICAgICAgICAgICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgICAgICAgICAiLm9heC1pZC00NDQyNTMzOCA+IGEgPiAub2F4X2ltYWdlX3NuaXBwZXQgPiAub2F4X2dhbGxlcnlfc2hhZG93IgogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQncyBiYWNrZ3JvdW5kIGNvbG9yIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkIGR1ZSB0byBhIGJhY2tncm91bmQgZ3JhZGllbnQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICJodG1sIjogIjxzcGFuIGNsYXNzPVwib2F4X2ZvbnRfc21hbGwgb2F4X2lubGluZV9ibG9jayBvYXhfbWFyZ19ib3R0b21fNlwiPlJlY29tYW5kYXJlIHJlZ2l1bmUgZGUgc2NoaTwvc3Bhbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNDQ0MjUzMzggPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gZmlnY2FwdGlvbiA+IC5vYXhfbWFyZ19ib3R0b21fNi5vYXhfaW5saW5lX2Jsb2NrLm9heF9mb250X3NtYWxsIgogICAgICAgICAgXSwKICAgICAgICAgICJmYWlsdXJlU3VtbWFyeSI6ICJGaXggYW55IG9mIHRoZSBmb2xsb3dpbmc6XG4gIEVsZW1lbnQncyBiYWNrZ3JvdW5kIGNvbG9yIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkIGR1ZSB0byBhIGJhY2tncm91bmQgZ3JhZGllbnQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImNvbG9yLWNvbnRyYXN0IiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJjb250cmFzdFJhdGlvIjogMCwKICAgICAgICAgICAgICAgICJmb250U2l6ZSI6ICIxMi4wcHQgKDE2cHgpIiwKICAgICAgICAgICAgICAgICJmb250V2VpZ2h0IjogImJvbGQiLAogICAgICAgICAgICAgICAgIm1lc3NhZ2VLZXkiOiAiYmdHcmFkaWVudCIsCiAgICAgICAgICAgICAgICAiZXhwZWN0ZWRDb250cmFzdFJhdGlvIjogIjQuNToxIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9nYWxsZXJ5X3NoYWRvd1wiPjwvZGl2PiIsCiAgICAgICAgICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICAgICAgICAgIi5vYXgtaWQtNDQ0MjUzMzggPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gLm9heF9nYWxsZXJ5X3NoYWRvdyIKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50J3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBkdWUgdG8gYSBiYWNrZ3JvdW5kIGdyYWRpZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAiaHRtbCI6ICI8c3Ryb25nIGNsYXNzPVwib2F4X2Jsb2NrIG9heF9zZW1pX2JvbGRcIj5cblx0XHQgXHQgXHRcdEPDonJsaWJhYmFcblx0XHQgXHQgXHQ8L3N0cm9uZz4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNDQ0MjUzMzggPiBhID4gLm9heF9pbWFnZV9zbmlwcGV0ID4gZmlnY2FwdGlvbiA+IC5vYXhfYmxvY2sub2F4X3NlbWlfYm9sZCIKICAgICAgICAgIF0sCiAgICAgICAgICAiZmFpbHVyZVN1bW1hcnkiOiAiRml4IGFueSBvZiB0aGUgZm9sbG93aW5nOlxuICBFbGVtZW50J3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBkdWUgdG8gYSBiYWNrZ3JvdW5kIGdyYWRpZW50IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJjb2xvci1jb250cmFzdCIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiY29udHJhc3RSYXRpbyI6IDAsCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMTIuMHB0ICgxNnB4KSIsCiAgICAgICAgICAgICAgICAiZm9udFdlaWdodCI6ICJub3JtYWwiLAogICAgICAgICAgICAgICAgIm1lc3NhZ2VLZXkiOiAiYmdPdmVybGFwIiwKICAgICAgICAgICAgICAgICJleHBlY3RlZENvbnRyYXN0UmF0aW8iOiAiNC41OjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50J3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBiZWNhdXNlIGl0IGlzIG92ZXJsYXBwZWQgYnkgYW5vdGhlciBlbGVtZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAiaHRtbCI6ICI8ZmlnY2FwdGlvbj5cblx0IFx0XHRcblx0IFx0IFx0RHJ1bWV0aWUgZGUgNCB6aWxlIGluIFJldGV6YXRcblx0IFx0PC9maWdjYXB0aW9uPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC04MDM2MTM3MDAub2F4LXRpbGUtc25pcHBldC5vYXhfaGVpZ2h0X2Z1bGwgPiBzcGFuID4gLm9heF90aWxlX3NuaXBwZXQgPiBmaWdjYXB0aW9uIgogICAgICAgICAgXSwKICAgICAgICAgICJmYWlsdXJlU3VtbWFyeSI6ICJGaXggYW55IG9mIHRoZSBmb2xsb3dpbmc6XG4gIEVsZW1lbnQncyBiYWNrZ3JvdW5kIGNvbG9yIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkIGJlY2F1c2UgaXQgaXMgb3ZlcmxhcHBlZCBieSBhbm90aGVyIGVsZW1lbnQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImNvbG9yLWNvbnRyYXN0IiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJjb250cmFzdFJhdGlvIjogMCwKICAgICAgICAgICAgICAgICJmb250U2l6ZSI6ICIxMi4wcHQgKDE2cHgpIiwKICAgICAgICAgICAgICAgICJmb250V2VpZ2h0IjogIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAibWVzc2FnZUtleSI6ICJiZ092ZXJsYXAiLAogICAgICAgICAgICAgICAgImV4cGVjdGVkQ29udHJhc3RSYXRpbyI6ICI0LjU6MSIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQncyBiYWNrZ3JvdW5kIGNvbG9yIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkIGJlY2F1c2UgaXQgaXMgb3ZlcmxhcHBlZCBieSBhbm90aGVyIGVsZW1lbnQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICJodG1sIjogIjxmaWdjYXB0aW9uPlxuXHQgXHRcdFxuXHQgXHQgXHRQaWNuaWMgbGEgY29saWJlXG5cdCBcdDwvZmlnY2FwdGlvbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAwNDk3NDEwLm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsID4gc3BhbiA+IC5vYXhfdGlsZV9zbmlwcGV0ID4gZmlnY2FwdGlvbiIKICAgICAgICAgIF0sCiAgICAgICAgICAiZmFpbHVyZVN1bW1hcnkiOiAiRml4IGFueSBvZiB0aGUgZm9sbG93aW5nOlxuICBFbGVtZW50J3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBiZWNhdXNlIGl0IGlzIG92ZXJsYXBwZWQgYnkgYW5vdGhlciBlbGVtZW50IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJjb2xvci1jb250cmFzdCIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiY29udHJhc3RSYXRpbyI6IDAsCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMTIuMHB0ICgxNnB4KSIsCiAgICAgICAgICAgICAgICAiZm9udFdlaWdodCI6ICJub3JtYWwiLAogICAgICAgICAgICAgICAgIm1lc3NhZ2VLZXkiOiAiYmdPdmVybGFwIiwKICAgICAgICAgICAgICAgICJleHBlY3RlZENvbnRyYXN0UmF0aW8iOiAiNC41OjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50J3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBiZWNhdXNlIGl0IGlzIG92ZXJsYXBwZWQgYnkgYW5vdGhlciBlbGVtZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAiaHRtbCI6ICI8ZmlnY2FwdGlvbj5cblx0IFx0XHRcblx0IFx0IFx0QXRlbGllciBDZXJhbWljxIMgQ29ydW5kXG5cdCBcdDwvZmlnY2FwdGlvbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtODAxMTM5NzM5Lm9heC10aWxlLXNuaXBwZXQub2F4X2hlaWdodF9mdWxsID4gc3BhbiA+IC5vYXhfdGlsZV9zbmlwcGV0ID4gZmlnY2FwdGlvbiIKICAgICAgICAgIF0sCiAgICAgICAgICAiZmFpbHVyZVN1bW1hcnkiOiAiRml4IGFueSBvZiB0aGUgZm9sbG93aW5nOlxuICBFbGVtZW50J3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBiZWNhdXNlIGl0IGlzIG92ZXJsYXBwZWQgYnkgYW5vdGhlciBlbGVtZW50IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJjb2xvci1jb250cmFzdCIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiY29udHJhc3RSYXRpbyI6IDAsCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMTIuMHB0ICgxNnB4KSIsCiAgICAgICAgICAgICAgICAiZm9udFdlaWdodCI6ICJub3JtYWwiLAogICAgICAgICAgICAgICAgIm1lc3NhZ2VLZXkiOiAiYmdPdmVybGFwIiwKICAgICAgICAgICAgICAgICJleHBlY3RlZENvbnRyYXN0UmF0aW8iOiAiNC41OjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50J3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBiZWNhdXNlIGl0IGlzIG92ZXJsYXBwZWQgYnkgYW5vdGhlciBlbGVtZW50IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAiaHRtbCI6ICI8ZmlnY2FwdGlvbj5cblx0IFx0XHRcblx0IFx0IFx0Rm9yYWdpbmcgw65uIHDEg2R1cmUgYWzEg3R1cmkgZGUgdW4gYmlvbG9nOiBDdWxlcyBmbG9yxIMgc3BvbnRhbsSDIMiZaSBjaXVwZXJjaVxuXHQgXHQ8L2ZpZ2NhcHRpb24+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTgwMDQ5NzQ2OS5vYXgtdGlsZS1zbmlwcGV0Lm9heF9oZWlnaHRfZnVsbCA+IHNwYW4gPiAub2F4X3RpbGVfc25pcHBldCA+IGZpZ2NhcHRpb24iCiAgICAgICAgICBdLAogICAgICAgICAgImZhaWx1cmVTdW1tYXJ5IjogIkZpeCBhbnkgb2YgdGhlIGZvbGxvd2luZzpcbiAgRWxlbWVudCdzIGJhY2tncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgYmVjYXVzZSBpdCBpcyBvdmVybGFwcGVkIGJ5IGFub3RoZXIgZWxlbWVudCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImNvbnRyYXN0UmF0aW8iOiAwLAogICAgICAgICAgICAgICAgImZvbnRTaXplIjogIjE4LjBwdCAoMjRweCkiLAogICAgICAgICAgICAgICAgImZvbnRXZWlnaHQiOiAiYm9sZCIsCiAgICAgICAgICAgICAgICAibWVzc2FnZUtleSI6ICJlbG1QYXJ0aWFsbHlPYnNjdXJpbmciLAogICAgICAgICAgICAgICAgImV4cGVjdGVkQ29udHJhc3RSYXRpbyI6ICIzOjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJFbGVtZW50J3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBiZWNhdXNlIGl0IHBhcnRpYWxseSBvdmVybGFwcyBvdGhlciBlbGVtZW50cyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgImh0bWwiOiAiPGgzIGNsYXNzPVwib2F4X2ggb2F4X2N1c3RvbV9mb250IG9heF9oMiBvYXhfbWFyZ19ib3R0b21fMTEgb2F4X21hcmdfdG9wXzAgb2F4X2h5cGhlbnNfYXV0b1wiPkdhdGEgZGUgZHJ1bWXIm2llPzwvaDM+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4X2gyIgogICAgICAgICAgXSwKICAgICAgICAgICJmYWlsdXJlU3VtbWFyeSI6ICJGaXggYW55IG9mIHRoZSBmb2xsb3dpbmc6XG4gIEVsZW1lbnQncyBiYWNrZ3JvdW5kIGNvbG9yIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkIGJlY2F1c2UgaXQgcGFydGlhbGx5IG92ZXJsYXBzIG90aGVyIGVsZW1lbnRzIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJjb2xvci1jb250cmFzdCIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiY29udHJhc3RSYXRpbyI6IDAsCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMTIuMHB0ICgxNnB4KSIsCiAgICAgICAgICAgICAgICAiZm9udFdlaWdodCI6ICJib2xkIiwKICAgICAgICAgICAgICAgICJtZXNzYWdlS2V5IjogImJnT3ZlcmxhcCIsCiAgICAgICAgICAgICAgICAiZXhwZWN0ZWRDb250cmFzdFJhdGlvIjogIjQuNToxIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCdzIGJhY2tncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgYmVjYXVzZSBpdCBpcyBvdmVybGFwcGVkIGJ5IGFub3RoZXIgZWxlbWVudCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgImh0bWwiOiAiPHNwYW4gY2xhc3M9XCJvYXhfaG92ZXJsaW5rIG9heF9mb250X2RhcmtcIj5EZXN0aW5hyJtpaSBkZSBuZXJhdGF0PC9zcGFuPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC01NDIzMTEyMy5vYXgtZmxhdC1zbmlwcGV0Lm9heC10cmFjay1jb250ZW50ID4gLm9heF9mbGF0X3F1aWNrZmFjdHMgPiAub2F4X3dvcmRicmVhay5vYXhfZmxhdF9zbmlwcGV0X3RpdGxlLm9heF9ibG9jayA+IC5vYXhfaG92ZXJsaW5rLm9heF9mb250X2RhcmsiCiAgICAgICAgICBdLAogICAgICAgICAgImZhaWx1cmVTdW1tYXJ5IjogIkZpeCBhbnkgb2YgdGhlIGZvbGxvd2luZzpcbiAgRWxlbWVudCdzIGJhY2tncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgYmVjYXVzZSBpdCBpcyBvdmVybGFwcGVkIGJ5IGFub3RoZXIgZWxlbWVudCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImNvbnRyYXN0UmF0aW8iOiAwLAogICAgICAgICAgICAgICAgImZvbnRTaXplIjogIjEyLjBwdCAoMTZweCkiLAogICAgICAgICAgICAgICAgImZvbnRXZWlnaHQiOiAiYm9sZCIsCiAgICAgICAgICAgICAgICAibWVzc2FnZUtleSI6ICJiZ092ZXJsYXAiLAogICAgICAgICAgICAgICAgImV4cGVjdGVkQ29udHJhc3RSYXRpbyI6ICI0LjU6MSIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQncyBiYWNrZ3JvdW5kIGNvbG9yIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkIGJlY2F1c2UgaXQgaXMgb3ZlcmxhcHBlZCBieSBhbm90aGVyIGVsZW1lbnQiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgICAgICJodG1sIjogIjxzcGFuIGNsYXNzPVwib2F4X2hvdmVybGluayBvYXhfZm9udF9kYXJrXCI+VmFjYW7Im8SDIMOubiBmYW1pbGU8L3NwYW4+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWlkLTU0MjMwODkxLm9heC1mbGF0LXNuaXBwZXQub2F4LXRyYWNrLWNvbnRlbnQgPiAub2F4X2ZsYXRfcXVpY2tmYWN0cyA+IC5vYXhfd29yZGJyZWFrLm9heF9mbGF0X3NuaXBwZXRfdGl0bGUub2F4X2Jsb2NrID4gLm9heF9ob3Zlcmxpbmsub2F4X2ZvbnRfZGFyayIKICAgICAgICAgIF0sCiAgICAgICAgICAiZmFpbHVyZVN1bW1hcnkiOiAiRml4IGFueSBvZiB0aGUgZm9sbG93aW5nOlxuICBFbGVtZW50J3MgYmFja2dyb3VuZCBjb2xvciBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBiZWNhdXNlIGl0IGlzIG92ZXJsYXBwZWQgYnkgYW5vdGhlciBlbGVtZW50IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJjb2xvci1jb250cmFzdCIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiY29udHJhc3RSYXRpbyI6IDAsCiAgICAgICAgICAgICAgICAiZm9udFNpemUiOiAiMTIuMHB0ICgxNnB4KSIsCiAgICAgICAgICAgICAgICAiZm9udFdlaWdodCI6ICJib2xkIiwKICAgICAgICAgICAgICAgICJtZXNzYWdlS2V5IjogImJnT3ZlcmxhcCIsCiAgICAgICAgICAgICAgICAiZXhwZWN0ZWRDb250cmFzdFJhdGlvIjogIjQuNToxIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCdzIGJhY2tncm91bmQgY29sb3IgY291bGQgbm90IGJlIGRldGVybWluZWQgYmVjYXVzZSBpdCBpcyBvdmVybGFwcGVkIGJ5IGFub3RoZXIgZWxlbWVudCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgImh0bWwiOiAiPHNwYW4gY2xhc3M9XCJvYXhfaG92ZXJsaW5rIG9heF9mb250X2RhcmtcIj5QYXJhZGlzdXJpIG1vdW50YWluYmlrZTwvc3Bhbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNTQyMzA5Mjcub2F4LWZsYXQtc25pcHBldC5vYXgtdHJhY2stY29udGVudCA+IC5vYXhfZmxhdF9xdWlja2ZhY3RzID4gLm9heF93b3JkYnJlYWsub2F4X2ZsYXRfc25pcHBldF90aXRsZS5vYXhfYmxvY2sgPiAub2F4X2hvdmVybGluay5vYXhfZm9udF9kYXJrIgogICAgICAgICAgXSwKICAgICAgICAgICJmYWlsdXJlU3VtbWFyeSI6ICJGaXggYW55IG9mIHRoZSBmb2xsb3dpbmc6XG4gIEVsZW1lbnQncyBiYWNrZ3JvdW5kIGNvbG9yIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkIGJlY2F1c2UgaXQgaXMgb3ZlcmxhcHBlZCBieSBhbm90aGVyIGVsZW1lbnQiCiAgICAgICAgfQogICAgICBdCiAgICB9CiAgXSwKICAidmlvbGF0aW9ucyI6IFsKICAgIHsKICAgICAgImlkIjogImNvbG9yLWNvbnRyYXN0IiwKICAgICAgImltcGFjdCI6ICJzZXJpb3VzIiwKICAgICAgInRhZ3MiOiBbCiAgICAgICAgImNhdC5jb2xvciIsCiAgICAgICAgIndjYWcyYWEiLAogICAgICAgICJ3Y2FnMTQzIiwKICAgICAgICAiVFR2NSIsCiAgICAgICAgIlRUMTMuYyIsCiAgICAgICAgIkVOLTMwMS01NDkiLAogICAgICAgICJFTi05LjEuNC4zIiwKICAgICAgICAiQUNUIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyB0aGUgY29udHJhc3QgYmV0d2VlbiBmb3JlZ3JvdW5kIGFuZCBiYWNrZ3JvdW5kIGNvbG9ycyBtZWV0cyBXQ0FHIDIgQUEgbWluaW11bSBjb250cmFzdCByYXRpbyB0aHJlc2hvbGRzIiwKICAgICAgImhlbHAiOiAiRWxlbWVudHMgbXVzdCBtZWV0IG1pbmltdW0gY29sb3IgY29udHJhc3QgcmF0aW8gdGhyZXNob2xkcyIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L2NvbG9yLWNvbnRyYXN0P2FwcGxpY2F0aW9uPXBsYXl3cmlnaHQiLAogICAgICAibm9kZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJjb2xvci1jb250cmFzdCIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiZmdDb2xvciI6ICIjZmZmZmZmIiwKICAgICAgICAgICAgICAgICJiZ0NvbG9yIjogIiNjZmNmZDciLAogICAgICAgICAgICAgICAgImNvbnRyYXN0UmF0aW8iOiAxLjU0LAogICAgICAgICAgICAgICAgImZvbnRTaXplIjogIjEzLjVwdCAoMThweCkiLAogICAgICAgICAgICAgICAgImZvbnRXZWlnaHQiOiAibm9ybWFsIiwKICAgICAgICAgICAgICAgICJtZXNzYWdlS2V5IjogbnVsbCwKICAgICAgICAgICAgICAgICJleHBlY3RlZENvbnRyYXN0UmF0aW8iOiAiNC41OjEiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X3BvcnRhbF9zdGFnZSBvYXhfcGFkX3RvcF8xIG9heC1zY3JvbGwtY29udGFpbmVyXCI+IiwKICAgICAgICAgICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgICAgICAgICAiLm9heF9wb3J0YWxfc3RhZ2UiCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgaW5zdWZmaWNpZW50IGNvbG9yIGNvbnRyYXN0IG9mIDEuNTQgKGZvcmVncm91bmQgY29sb3I6ICNmZmZmZmYsIGJhY2tncm91bmQgY29sb3I6ICNjZmNmZDcsIGZvbnQgc2l6ZTogMTMuNXB0ICgxOHB4KSwgZm9udCB3ZWlnaHQ6IG5vcm1hbCkuIEV4cGVjdGVkIGNvbnRyYXN0IHJhdGlvIG9mIDQuNToxIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiAic2VyaW91cyIsCiAgICAgICAgICAiaHRtbCI6ICI8cD5HaGlkdWwgbm9zdHJ1IHRlIHZhIGR1Y2Ugw65uIGNlbGUgbWFpIGludGVyZXNhbnRlIGxvY3VyaSZuYnNwO2RpbiBSb23Dom5hIMiZaSB0ZSZuYnNwO3ZhIGFqdXRhIHPEgy3Im2kgcGxhbmlmaWNpIGPEg2zEg3RvcmlhLjwvcD4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgInNlY3Rpb24gPiBwIgogICAgICAgICAgXSwKICAgICAgICAgICJmYWlsdXJlU3VtbWFyeSI6ICJGaXggYW55IG9mIHRoZSBmb2xsb3dpbmc6XG4gIEVsZW1lbnQgaGFzIGluc3VmZmljaWVudCBjb2xvciBjb250cmFzdCBvZiAxLjU0IChmb3JlZ3JvdW5kIGNvbG9yOiAjZmZmZmZmLCBiYWNrZ3JvdW5kIGNvbG9yOiAjY2ZjZmQ3LCBmb250IHNpemU6IDEzLjVwdCAoMThweCksIGZvbnQgd2VpZ2h0OiBub3JtYWwpLiBFeHBlY3RlZCBjb250cmFzdCByYXRpbyBvZiA0LjU6MSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiY29sb3ItY29udHJhc3QiLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImZnQ29sb3IiOiAiIzZmNmY2ZiIsCiAgICAgICAgICAgICAgICAiYmdDb2xvciI6ICIjZThlOWYyIiwKICAgICAgICAgICAgICAgICJjb250cmFzdFJhdGlvIjogNC4xNSwKICAgICAgICAgICAgICAgICJmb250U2l6ZSI6ICIxMC41cHQgKDE0cHgpIiwKICAgICAgICAgICAgICAgICJmb250V2VpZ2h0IjogIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAibWVzc2FnZUtleSI6IG51bGwsCiAgICAgICAgICAgICAgICAiZXhwZWN0ZWRDb250cmFzdFJhdGlvIjogIjQuNToxIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImh0bWwiOiAiPGRpdiBjbGFzcz1cIm9heF9wb3J0YWxfc3RhZ2Ugb2F4X3BhZF90b3BfMSBvYXgtc2Nyb2xsLWNvbnRhaW5lclwiPiIsCiAgICAgICAgICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICAgICAgICAgIi5vYXhfcG9ydGFsX3N0YWdlIgogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIkVsZW1lbnQgaGFzIGluc3VmZmljaWVudCBjb2xvciBjb250cmFzdCBvZiA0LjE1IChmb3JlZ3JvdW5kIGNvbG9yOiAjNmY2ZjZmLCBiYWNrZ3JvdW5kIGNvbG9yOiAjZThlOWYyLCBmb250IHNpemU6IDEwLjVwdCAoMTRweCksIGZvbnQgd2VpZ2h0OiBub3JtYWwpLiBFeHBlY3RlZCBjb250cmFzdCByYXRpbyBvZiA0LjU6MSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogInNlcmlvdXMiLAogICAgICAgICAgImh0bWwiOiAiPHNwYW4gY2xhc3M9XCJvYXhfY29weXJpZ2h0X29uX2xpZ2h0XCI+XG5cdFx0XG5cdEZvdG86XHRBZ25lcyBFbGVuYSBDcsSDY2l1biwgVW5zcGxhc2hcblx0PC9zcGFuPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9jb3B5cmlnaHRfb25fbGlnaHQiCiAgICAgICAgICBdLAogICAgICAgICAgImZhaWx1cmVTdW1tYXJ5IjogIkZpeCBhbnkgb2YgdGhlIGZvbGxvd2luZzpcbiAgRWxlbWVudCBoYXMgaW5zdWZmaWNpZW50IGNvbG9yIGNvbnRyYXN0IG9mIDQuMTUgKGZvcmVncm91bmQgY29sb3I6ICM2ZjZmNmYsIGJhY2tncm91bmQgY29sb3I6ICNlOGU5ZjIsIGZvbnQgc2l6ZTogMTAuNXB0ICgxNHB4KSwgZm9udCB3ZWlnaHQ6IG5vcm1hbCkuIEV4cGVjdGVkIGNvbnRyYXN0IHJhdGlvIG9mIDQuNToxIgogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImlkIjogImltYWdlLWFsdCIsCiAgICAgICJpbXBhY3QiOiAiY3JpdGljYWwiLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0LnRleHQtYWx0ZXJuYXRpdmVzIiwKICAgICAgICAid2NhZzJhIiwKICAgICAgICAid2NhZzExMSIsCiAgICAgICAgInNlY3Rpb241MDgiLAogICAgICAgICJzZWN0aW9uNTA4LjIyLmEiLAogICAgICAgICJUVHY1IiwKICAgICAgICAiVFQ3LmEiLAogICAgICAgICJUVDcuYiIsCiAgICAgICAgIkVOLTMwMS01NDkiLAogICAgICAgICJFTi05LjEuMS4xIiwKICAgICAgICAiQUNUIgogICAgICBdLAogICAgICAiZGVzY3JpcHRpb24iOiAiRW5zdXJlcyA8aW1nPiBlbGVtZW50cyBoYXZlIGFsdGVybmF0ZSB0ZXh0IG9yIGEgcm9sZSBvZiBub25lIG9yIHByZXNlbnRhdGlvbiIsCiAgICAgICJoZWxwIjogIkltYWdlcyBtdXN0IGhhdmUgYWx0ZXJuYXRlIHRleHQiLAogICAgICAiaGVscFVybCI6ICJodHRwczovL2RlcXVldW5pdmVyc2l0eS5jb20vcnVsZXMvYXhlLzQuOC9pbWFnZS1hbHQ/YXBwbGljYXRpb249cGxheXdyaWdodCIsCiAgICAgICJub2RlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogImhhcy1hbHQiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBkb2VzIG5vdCBoYXZlIGFuIGFsdCBhdHRyaWJ1dGUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAiYXJpYS1sYWJlbCIsCiAgICAgICAgICAgICAgImRhdGEiOiBudWxsLAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJhcmlhLWxhYmVsIGF0dHJpYnV0ZSBkb2VzIG5vdCBleGlzdCBvciBpcyBlbXB0eSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJhcmlhLWxhYmVsbGVkYnkiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiYXJpYS1sYWJlbGxlZGJ5IGF0dHJpYnV0ZSBkb2VzIG5vdCBleGlzdCwgcmVmZXJlbmNlcyBlbGVtZW50cyB0aGF0IGRvIG5vdCBleGlzdCBvciByZWZlcmVuY2VzIGVsZW1lbnRzIHRoYXQgYXJlIGVtcHR5IgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogIm5vbi1lbXB0eS10aXRsZSIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAibWVzc2FnZUtleSI6ICJub0F0dHIiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCBoYXMgbm8gdGl0bGUgYXR0cmlidXRlIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInByZXNlbnRhdGlvbmFsLXJvbGUiLAogICAgICAgICAgICAgICJkYXRhIjogbnVsbCwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJjcml0aWNhbCIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiRWxlbWVudCdzIGRlZmF1bHQgc2VtYW50aWNzIHdlcmUgbm90IG92ZXJyaWRkZW4gd2l0aCByb2xlPVwibm9uZVwiIG9yIHJvbGU9XCJwcmVzZW50YXRpb25cIiIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogImNyaXRpY2FsIiwKICAgICAgICAgICJodG1sIjogIjxpbWcgc3JjPVwiaHR0cHM6Ly9yZXMub2FzdGF0aWMuY29tL3RoZW1lcy9vYWQtcm9tYW5pYXRyYXZlbC9jc3MvaW1hZ2VzL0VVLVJPLWxvZ28ucG5nXCIgc3R5bGU9XCJwb3NpdGlvbjogYWJzb2x1dGU7IHdpZHRoOiAzNSU7IGxlZnQ6IDMycHg7IGJvdHRvbTogMzdweDtcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXhfcG9ydGFsX3dyYXBwZXIgPiBpbWciCiAgICAgICAgICBdLAogICAgICAgICAgImZhaWx1cmVTdW1tYXJ5IjogIkZpeCBhbnkgb2YgdGhlIGZvbGxvd2luZzpcbiAgRWxlbWVudCBkb2VzIG5vdCBoYXZlIGFuIGFsdCBhdHRyaWJ1dGVcbiAgYXJpYS1sYWJlbCBhdHRyaWJ1dGUgZG9lcyBub3QgZXhpc3Qgb3IgaXMgZW1wdHlcbiAgYXJpYS1sYWJlbGxlZGJ5IGF0dHJpYnV0ZSBkb2VzIG5vdCBleGlzdCwgcmVmZXJlbmNlcyBlbGVtZW50cyB0aGF0IGRvIG5vdCBleGlzdCBvciByZWZlcmVuY2VzIGVsZW1lbnRzIHRoYXQgYXJlIGVtcHR5XG4gIEVsZW1lbnQgaGFzIG5vIHRpdGxlIGF0dHJpYnV0ZVxuICBFbGVtZW50J3MgZGVmYXVsdCBzZW1hbnRpY3Mgd2VyZSBub3Qgb3ZlcnJpZGRlbiB3aXRoIHJvbGU9XCJub25lXCIgb3Igcm9sZT1cInByZXNlbnRhdGlvblwiIgogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAidGFncyI6IFsKICAgICAgICAiY2F0LmtleWJvYXJkIiwKICAgICAgICAiYmVzdC1wcmFjdGljZSIKICAgICAgXSwKICAgICAgImRlc2NyaXB0aW9uIjogIkVuc3VyZXMgYWxsIHBhZ2UgY29udGVudCBpcyBjb250YWluZWQgYnkgbGFuZG1hcmtzIiwKICAgICAgImhlbHAiOiAiQWxsIHBhZ2UgY29udGVudCBzaG91bGQgYmUgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIsCiAgICAgICJoZWxwVXJsIjogImh0dHBzOi8vZGVxdWV1bml2ZXJzaXR5LmNvbS9ydWxlcy9heGUvNC44L3JlZ2lvbj9hcHBsaWNhdGlvbj1wbGF5d3JpZ2h0IiwKICAgICAgIm5vZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiU29tZSBwYWdlIGNvbnRlbnQgaXMgbm90IGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X2N1c3RvbXBhZ2VfaGVhZGVyX2NvbnQgb2F4X2luZGV4X3RpdGxlIG9heF9tYXJnX3RvcF9uZWdfMjJcIj5cblx0XHRcdFx0XHQ8aDEgY2xhc3M9XCJvYXhfYm9sZCBvYXhfY3VzdG9tX2ZvbnRcIj5cblx0XHRcdFx0XHRcdFN0YWkgYWN0aXYgyJlpIMOubiBzZXpvbnVsIHJlY2U6IEF2ZW50dXJpIMiZaSBwZWlzYWplIGRlIHZpcyBpYXJuYTwvaDE+XG5cdFx0XHRcdDwvZGl2PiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heF9jdXN0b21wYWdlX2hlYWRlcl9jb250IgogICAgICAgICAgXSwKICAgICAgICAgICJmYWlsdXJlU3VtbWFyeSI6ICJGaXggYW55IG9mIHRoZSBmb2xsb3dpbmc6XG4gIFNvbWUgcGFnZSBjb250ZW50IGlzIG5vdCBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJTb21lIHBhZ2UgY29udGVudCBpcyBub3QgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfc2xpZGVfaW1hZ2Vfd3JhcHBlciBvYXhfc2xpZGVfaW1hZ2Vfd3JhcHBlcl93aGl0ZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC0yNTk0MzQwMyA+IC5vYXgtZG9tYXctcmVzdHJpY3Qub2F4LW9uZS1pbWFnZSA+IC5vYXhfc2xpZGVfaW1hZ2Vfd3JhcHBlci5vYXhfc2xpZGVfaW1hZ2Vfd3JhcHBlcl93aGl0ZSIKICAgICAgICAgIF0sCiAgICAgICAgICAiZmFpbHVyZVN1bW1hcnkiOiAiRml4IGFueSBvZiB0aGUgZm9sbG93aW5nOlxuICBTb21lIHBhZ2UgY29udGVudCBpcyBub3QgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiU29tZSBwYWdlIGNvbnRlbnQgaXMgbm90IGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAiaHRtbCI6ICI8c3Ryb25nIGNsYXNzPVwib2F4X3NlbWlfYm9sZCBvYXhfZmwgb2F4X2hhbGYgb2F4X2VsbGlwc2lzIG9heC1vbmUtaW1hZ2UtdGl0bGVcIj5cblx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwib2F4LWljb24taW1hZ2Ugb2F4X2lubGluZV9ibG9jayBvYXhfbWVkaWFfaWNvblwiPjwvc3Bhbj5cblx0XHRcdFx0XHRcdFx0UHJpdmVsaciZdGUgc3ByZSBTZW1lbmljPC9zdHJvbmc+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWNsYWltLTI1OTQzNDAzID4gLm9heC1vbmUtaW1hZ2UtdGl0bGUub2F4X2hhbGYub2F4X3NlbWlfYm9sZCIKICAgICAgICAgIF0sCiAgICAgICAgICAiZmFpbHVyZVN1bW1hcnkiOiAiRml4IGFueSBvZiB0aGUgZm9sbG93aW5nOlxuICBTb21lIHBhZ2UgY29udGVudCBpcyBub3QgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiU29tZSBwYWdlIGNvbnRlbnQgaXMgbm90IGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAiaHRtbCI6ICI8c3BhbiBjbGFzcz1cIm9heF9mb250X2dyZXlfZGFyayBvYXhfZnIgb2F4X2hhbGYgb2F4X2VsbGlwc2lzIG9heC1vbmUtaW1hZ2UtYXV0aG9yXCI+XG5cdFx0XHRcdFx0XHRGb3RvOlx0UGF1bCBXYXNpY3NlaywgPGEgY2xhc3M9XCJvYXhfdW5kZXJsaW5lIG9heF9mb250X2dyZXlfZGFya1wiIGhyZWY9XCJodHRwczovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvYnkvNC4wL2RlZWQuZW5cIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub2ZvbGxvdyBub29wZW5lclwiPkNDIEJZPC9hPiwgUmVkYWPIm2lhIE91dGRvb3JhY3RpdmU8L3NwYW4+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWNsYWltLTI1OTQzNDAzID4gLm9heC1vbmUtaW1hZ2UtYXV0aG9yLm9heF9mci5vYXhfaGFsZiIKICAgICAgICAgIF0sCiAgICAgICAgICAiZmFpbHVyZVN1bW1hcnkiOiAiRml4IGFueSBvZiB0aGUgZm9sbG93aW5nOlxuICBTb21lIHBhZ2UgY29udGVudCBpcyBub3QgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiU29tZSBwYWdlIGNvbnRlbnQgaXMgbm90IGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAiaHRtbCI6ICI8ZGl2IGNsYXNzPVwib2F4X3NsaWRlX2ltYWdlX3dyYXBwZXIgb2F4X3NsaWRlX2ltYWdlX3dyYXBwZXJfd2hpdGVcIj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtaWQtNjQ1Nzk5MjkgPiAub2F4LWRvbWF3LXJlc3RyaWN0Lm9heC1vbmUtaW1hZ2UgPiAub2F4X3NsaWRlX2ltYWdlX3dyYXBwZXIub2F4X3NsaWRlX2ltYWdlX3dyYXBwZXJfd2hpdGUiCiAgICAgICAgICBdLAogICAgICAgICAgImZhaWx1cmVTdW1tYXJ5IjogIkZpeCBhbnkgb2YgdGhlIGZvbGxvd2luZzpcbiAgU29tZSBwYWdlIGNvbnRlbnQgaXMgbm90IGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIlNvbWUgcGFnZSBjb250ZW50IGlzIG5vdCBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgImh0bWwiOiAiPHN0cm9uZyBjbGFzcz1cIm9heF9zZW1pX2JvbGQgb2F4X2ZsIG9heF9oYWxmIG9heF9lbGxpcHNpcyBvYXgtb25lLWltYWdlLXRpdGxlXCI+XG5cdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cIm9heC1pY29uLWltYWdlIG9heF9pbmxpbmVfYmxvY2sgb2F4X21lZGlhX2ljb25cIj48L3NwYW4+XG5cdFx0XHRcdFx0XHRcdE11bsibaWkgRsSDZ8SDcmHImTwvc3Ryb25nPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1jbGFpbS02NDU3OTkyOSA+IC5vYXgtb25lLWltYWdlLXRpdGxlLm9heF9oYWxmLm9heF9zZW1pX2JvbGQiCiAgICAgICAgICBdLAogICAgICAgICAgImZhaWx1cmVTdW1tYXJ5IjogIkZpeCBhbnkgb2YgdGhlIGZvbGxvd2luZzpcbiAgU29tZSBwYWdlIGNvbnRlbnQgaXMgbm90IGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIlNvbWUgcGFnZSBjb250ZW50IGlzIG5vdCBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgImh0bWwiOiAiPHNwYW4gY2xhc3M9XCJvYXhfZm9udF9ncmV5X2Rhcmsgb2F4X2ZyIG9heF9oYWxmIG9heF9lbGxpcHNpcyBvYXgtb25lLWltYWdlLWF1dGhvclwiPlxuXHRcdFx0XHRcdFx0Rm90bzpcdEx1Y2lhbiBEYWNobWFuLCA8YSBjbGFzcz1cIm9heF91bmRlcmxpbmUgb2F4X2ZvbnRfZ3JleV9kYXJrXCIgaHJlZj1cImh0dHBzOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS80LjAvZGVlZC5lblwiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vZm9sbG93IG5vb3BlbmVyXCI+Q0MgQlk8L2E+LCBVbnNwbGFzaDwvc3Bhbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtY2xhaW0tNjQ1Nzk5MjkgPiAub2F4LW9uZS1pbWFnZS1hdXRob3Iub2F4X2ZyLm9heF9oYWxmIgogICAgICAgICAgXSwKICAgICAgICAgICJmYWlsdXJlU3VtbWFyeSI6ICJGaXggYW55IG9mIHRoZSBmb2xsb3dpbmc6XG4gIFNvbWUgcGFnZSBjb250ZW50IGlzIG5vdCBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFueSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpZCI6ICJyZWdpb24iLAogICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgImlzSWZyYW1lIjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZWxhdGVkTm9kZXMiOiBbXSwKICAgICAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICAgICAibWVzc2FnZSI6ICJTb21lIHBhZ2UgY29udGVudCBpcyBub3QgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJhbGwiOiBbXSwKICAgICAgICAgICJub25lIjogW10sCiAgICAgICAgICAiaW1wYWN0IjogIm1vZGVyYXRlIiwKICAgICAgICAgICJodG1sIjogIjxkaXYgY2xhc3M9XCJvYXhfc2xpZGVfaW1hZ2Vfd3JhcHBlciBvYXhfc2xpZGVfaW1hZ2Vfd3JhcHBlcl93aGl0ZVwiPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1pZC0zNTkyOTE2OCA+IC5vYXgtZG9tYXctcmVzdHJpY3Qub2F4LW9uZS1pbWFnZSA+IC5vYXhfc2xpZGVfaW1hZ2Vfd3JhcHBlci5vYXhfc2xpZGVfaW1hZ2Vfd3JhcHBlcl93aGl0ZSIKICAgICAgICAgIF0sCiAgICAgICAgICAiZmFpbHVyZVN1bW1hcnkiOiAiRml4IGFueSBvZiB0aGUgZm9sbG93aW5nOlxuICBTb21lIHBhZ2UgY29udGVudCBpcyBub3QgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiU29tZSBwYWdlIGNvbnRlbnQgaXMgbm90IGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAiaHRtbCI6ICI8c3Ryb25nIGNsYXNzPVwib2F4X3NlbWlfYm9sZCBvYXhfZmwgb2F4X2hhbGYgb2F4X2VsbGlwc2lzIG9heC1vbmUtaW1hZ2UtdGl0bGVcIj5cblx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwib2F4LWljb24taW1hZ2Ugb2F4X2lubGluZV9ibG9jayBvYXhfbWVkaWFfaWNvblwiPjwvc3Bhbj5cblx0XHRcdFx0XHRcdFx0TXVudGVsZSBCxINpyJlvcmlpLCBDbHVqLCBSb21hbmlhPC9zdHJvbmc+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWNsYWltLTM1OTI5MTY4ID4gLm9heC1vbmUtaW1hZ2UtdGl0bGUub2F4X2hhbGYub2F4X3NlbWlfYm9sZCIKICAgICAgICAgIF0sCiAgICAgICAgICAiZmFpbHVyZVN1bW1hcnkiOiAiRml4IGFueSBvZiB0aGUgZm9sbG93aW5nOlxuICBTb21lIHBhZ2UgY29udGVudCBpcyBub3QgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiU29tZSBwYWdlIGNvbnRlbnQgaXMgbm90IGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAiaHRtbCI6ICI8c3BhbiBjbGFzcz1cIm9heF9mb250X2dyZXlfZGFyayBvYXhfZnIgb2F4X2hhbGYgb2F4X2VsbGlwc2lzIG9heC1vbmUtaW1hZ2UtYXV0aG9yXCI+XG5cdFx0XHRcdFx0XHRGb3RvOlx0TGF1cmVudGl1IEdhbGRhdSwgPGEgY2xhc3M9XCJvYXhfdW5kZXJsaW5lIG9heF9mb250X2dyZXlfZGFya1wiIGhyZWY9XCJodHRwczovL2NyZWF0aXZlY29tbW9ucy5vcmcvcHVibGljZG9tYWluL3plcm8vMS4wL2RlZWQuZW5cIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub2ZvbGxvdyBub29wZW5lclwiPkNDMDwvYT4sIFVuc3BsYXNoPC9zcGFuPiIsCiAgICAgICAgICAidGFyZ2V0IjogWwogICAgICAgICAgICAiLm9heC1jbGFpbS0zNTkyOTE2OCA+IC5vYXgtb25lLWltYWdlLWF1dGhvci5vYXhfZnIub2F4X2hhbGYiCiAgICAgICAgICBdLAogICAgICAgICAgImZhaWx1cmVTdW1tYXJ5IjogIkZpeCBhbnkgb2YgdGhlIGZvbGxvd2luZzpcbiAgU29tZSBwYWdlIGNvbnRlbnQgaXMgbm90IGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYW55IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImlkIjogInJlZ2lvbiIsCiAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAiaXNJZnJhbWUiOiBmYWxzZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlbGF0ZWROb2RlcyI6IFtdLAogICAgICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgICAgICJtZXNzYWdlIjogIlNvbWUgcGFnZSBjb250ZW50IGlzIG5vdCBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgImFsbCI6IFtdLAogICAgICAgICAgIm5vbmUiOiBbXSwKICAgICAgICAgICJpbXBhY3QiOiAibW9kZXJhdGUiLAogICAgICAgICAgImh0bWwiOiAiPHN0cm9uZyBjbGFzcz1cIm9heF9zZW1pX2JvbGQgb2F4X2ZsIG9heF9oYWxmIG9heF9lbGxpcHNpcyBvYXgtb25lLWltYWdlLXRpdGxlXCI+XG5cdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cIm9heC1pY29uLWltYWdlIG9heF9pbmxpbmVfYmxvY2sgb2F4X21lZGlhX2ljb25cIj48L3NwYW4+XG5cdFx0XHRcdFx0XHRcdFDEg2R1cmUgbMOibmfEgyBNZWRpYciZPC9zdHJvbmc+IiwKICAgICAgICAgICJ0YXJnZXQiOiBbCiAgICAgICAgICAgICIub2F4LWNsYWltLTU1MTI0MjM5ID4gLm9heC1vbmUtaW1hZ2UtdGl0bGUub2F4X2hhbGYub2F4X3NlbWlfYm9sZCIKICAgICAgICAgIF0sCiAgICAgICAgICAiZmFpbHVyZVN1bW1hcnkiOiAiRml4IGFueSBvZiB0aGUgZm9sbG93aW5nOlxuICBTb21lIHBhZ2UgY29udGVudCBpcyBub3QgY29udGFpbmVkIGJ5IGxhbmRtYXJrcyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbnkiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaWQiOiAicmVnaW9uIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJpc0lmcmFtZSI6IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVsYXRlZE5vZGVzIjogW10sCiAgICAgICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAgICAgIm1lc3NhZ2UiOiAiU29tZSBwYWdlIGNvbnRlbnQgaXMgbm90IGNvbnRhaW5lZCBieSBsYW5kbWFya3MiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAiYWxsIjogW10sCiAgICAgICAgICAibm9uZSI6IFtdLAogICAgICAgICAgImltcGFjdCI6ICJtb2RlcmF0ZSIsCiAgICAgICAgICAiaHRtbCI6ICI8c3BhbiBjbGFzcz1cIm9heF9mb250X2dyZXlfZGFyayBvYXhfZnIgb2F4X2hhbGYgb2F4X2VsbGlwc2lzIG9heC1vbmUtaW1hZ2UtYXV0aG9yXCI+XG5cdFx0XHRcdFx0XHRGb3RvOlx0PGEgY2xhc3M9XCJvYXhfdW5kZXJsaW5lIG9heF9mb250X2dyZXlfZGFya1wiIGhyZWY9XCJodHRwczovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvYnktbmQvNC4wL2RlZWQuZW5cIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub2ZvbGxvdyBub29wZW5lclwiPkNDIEJZLU5EPC9hPiwgUm9tYW5pYVRyYXZlbC5ndWlkZTwvc3Bhbj4iLAogICAgICAgICAgInRhcmdldCI6IFsKICAgICAgICAgICAgIi5vYXgtY2xhaW0tNTUxMjQyMzkgPiAub2F4LW9uZS1pbWFnZS1hdXRob3Iub2F4X2ZyLm9heF9oYWxmIgogICAgICAgICAgXSwKICAgICAgICAgICJmYWlsdXJlU3VtbWFyeSI6ICJGaXggYW55IG9mIHRoZSBmb2xsb3dpbmc6XG4gIFNvbWUgcGFnZSBjb250ZW50IGlzIG5vdCBjb250YWluZWQgYnkgbGFuZG1hcmtzIgogICAgICAgIH0KICAgICAgXQogICAgfQogIF0KfQ=="
                    },
                    {
                      "name": "screenshot",
                      "contentType": "image/png",
                      "path": "C:\\Learning\\Playwright\\playwright-stuff\\test-results\\rom_travel-acces-should-not-have-any-automatically-detectable-accessibility-issues-chromium-retry1\\test-failed-1.png"
                    },
                    {
                      "name": "trace",
                      "contentType": "application/zip",
                      "path": "C:\\Learning\\Playwright\\playwright-stuff\\test-results\\rom_travel-acces-should-not-have-any-automatically-detectable-accessibility-issues-chromium-retry1\\trace.zip"
                    }
                  ],
                  "errorLocation": {
                    "file": "C:\\Learning\\Playwright\\playwright-stuff\\tests\\rom_travel\\acces.test.ts",
                    "column": 47,
                    "line": 26
                  }
                },
                {
                  "workerIndex": 2,
                  "status": "failed",
                  "duration": 5442,
                  "error": {
                    "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected  -   1\u001b[39m\n\u001b[31m+ Received  + 498\u001b[39m\n\n\u001b[32m- Array []\u001b[39m\n\u001b[31m+ Array [\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensures the contrast between foreground and background colors meets WCAG 2 AA minimum contrast ratio thresholds\",\u001b[39m\n\u001b[31m+     \"help\": \"Elements must meet minimum color contrast ratio thresholds\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/color-contrast?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+     \"impact\": \"serious\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"bgColor\": \"#cfcfd7\",\u001b[39m\n\u001b[31m+               \"contrastRatio\": 1.54,\u001b[39m\n\u001b[31m+               \"expectedContrastRatio\": \"4.5:1\",\u001b[39m\n\u001b[31m+               \"fgColor\": \"#ffffff\",\u001b[39m\n\u001b[31m+               \"fontSize\": \"13.5pt (18px)\",\u001b[39m\n\u001b[31m+               \"fontWeight\": \"normal\",\u001b[39m\n\u001b[31m+               \"messageKey\": null,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element has insufficient color contrast of 1.54 (foreground color: #ffffff, background color: #cfcfd7, font size: 13.5pt (18px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [\u001b[39m\n\u001b[31m+               Object {\u001b[39m\n\u001b[31m+                 \"html\": \"<div class=\\\"oax_portal_stage oax_pad_top_1 oax-scroll-container\\\">\",\u001b[39m\n\u001b[31m+                 \"target\": Array [\u001b[39m\n\u001b[31m+                   \".oax_portal_stage\",\u001b[39m\n\u001b[31m+                 ],\u001b[39m\n\u001b[31m+               },\u001b[39m\n\u001b[31m+             ],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element has insufficient color contrast of 1.54 (foreground color: #ffffff, background color: #cfcfd7, font size: 13.5pt (18px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+         \"html\": \"<p>Ghidul nostru te va duce în cele mai interesante locuri&nbsp;din Româna și te&nbsp;va ajuta să-ți planifici călătoria.</p>\",\u001b[39m\n\u001b[31m+         \"impact\": \"serious\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \"section > p\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"bgColor\": \"#e8e9f2\",\u001b[39m\n\u001b[31m+               \"contrastRatio\": 4.15,\u001b[39m\n\u001b[31m+               \"expectedContrastRatio\": \"4.5:1\",\u001b[39m\n\u001b[31m+               \"fgColor\": \"#6f6f6f\",\u001b[39m\n\u001b[31m+               \"fontSize\": \"10.5pt (14px)\",\u001b[39m\n\u001b[31m+               \"fontWeight\": \"normal\",\u001b[39m\n\u001b[31m+               \"messageKey\": null,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element has insufficient color contrast of 4.15 (foreground color: #6f6f6f, background color: #e8e9f2, font size: 10.5pt (14px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [\u001b[39m\n\u001b[31m+               Object {\u001b[39m\n\u001b[31m+                 \"html\": \"<div class=\\\"oax_portal_stage oax_pad_top_1 oax-scroll-container\\\">\",\u001b[39m\n\u001b[31m+                 \"target\": Array [\u001b[39m\n\u001b[31m+                   \".oax_portal_stage\",\u001b[39m\n\u001b[31m+                 ],\u001b[39m\n\u001b[31m+               },\u001b[39m\n\u001b[31m+             ],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element has insufficient color contrast of 4.15 (foreground color: #6f6f6f, background color: #e8e9f2, font size: 10.5pt (14px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_copyright_on_light\\\">\u001b[39m\n\u001b[31m+ \t\t\u001b[39m\n\u001b[31m+ \tFoto:\tAgnes Elena Crăciun, Unsplash\u001b[39m\n\u001b[31m+ \t</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"serious\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_copyright_on_light\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.color\",\u001b[39m\n\u001b[31m+       \"wcag2aa\",\u001b[39m\n\u001b[31m+       \"wcag143\",\u001b[39m\n\u001b[31m+       \"TTv5\",\u001b[39m\n\u001b[31m+       \"TT13.c\",\u001b[39m\n\u001b[31m+       \"EN-301-549\",\u001b[39m\n\u001b[31m+       \"EN-9.1.4.3\",\u001b[39m\n\u001b[31m+       \"ACT\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensures all page content is contained by landmarks\",\u001b[39m\n\u001b[31m+     \"help\": \"All page content should be contained by landmarks\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/region?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"region\",\u001b[39m\n\u001b[31m+     \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_custompage_header_cont oax_index_title oax_marg_top_neg_22\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t<h1 class=\\\"oax_bold oax_custom_font\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tStai activ și în sezonul rece: Aventuri și peisaje de vis iarna</h1>\u001b[39m\n\u001b[31m+ \t\t\t\t</div>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_custompage_header_cont\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-25943403 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tPriveliște spre Semenic</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-25943403 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tPaul Wasicsek, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY</a>, Redacția Outdooractive</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-25943403 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-64579929 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tMunții Făgăraș</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-64579929 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tLucian Dachman, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY</a>, Unsplash</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-64579929 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-35929168 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tMuntele Băișorii, Cluj, Romania</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-35929168 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tLaurentiu Galdau, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/publicdomain/zero/1.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC0</a>, Unsplash</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-35929168 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tPădure lângă Mediaș</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-55124239 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\t<a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by-nd/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY-ND</a>, RomaniaTravel.guide</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-55124239 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_modal_content_wrap oax_modal_scroll\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_modal_content_wrap\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax-cookie-consent-open oax_hoverlink_colored oax_marg_left_12 oax_marg_bottom_11 oax_font_default oax_inline_block oax_marg_top_10\\\">Personalizează</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-cookie-consent-open\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_modal_actions oax_modal_footer oax_font_small\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_modal_actions\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.keyboard\",\u001b[39m\n\u001b[31m+       \"best-practice\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensure elements that have scrollable content are accessible by keyboard\",\u001b[39m\n\u001b[31m+     \"help\": \"Scrollable region must have keyboard access\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/scrollable-region-focusable?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"scrollable-region-focusable\",\u001b[39m\n\u001b[31m+     \"impact\": \"serious\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": null,\u001b[39m\n\u001b[31m+             \"id\": \"focusable-content\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element should have focusable content\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": null,\u001b[39m\n\u001b[31m+             \"id\": \"focusable-element\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element should be focusable\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element should have focusable content\u001b[39m\n\u001b[31m+   Element should be focusable\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_modal_content_wrap oax_modal_scroll\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"serious\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_modal_content_wrap\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.keyboard\",\u001b[39m\n\u001b[31m+       \"wcag2a\",\u001b[39m\n\u001b[31m+       \"wcag211\",\u001b[39m\n\u001b[31m+       \"TTv5\",\u001b[39m\n\u001b[31m+       \"TT4.a\",\u001b[39m\n\u001b[31m+       \"EN-301-549\",\u001b[39m\n\u001b[31m+       \"EN-9.2.1.1\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+ ]\u001b[39m",
                    "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected  -   1\u001b[39m\n\u001b[31m+ Received  + 498\u001b[39m\n\n\u001b[32m- Array []\u001b[39m\n\u001b[31m+ Array [\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensures the contrast between foreground and background colors meets WCAG 2 AA minimum contrast ratio thresholds\",\u001b[39m\n\u001b[31m+     \"help\": \"Elements must meet minimum color contrast ratio thresholds\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/color-contrast?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+     \"impact\": \"serious\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"bgColor\": \"#cfcfd7\",\u001b[39m\n\u001b[31m+               \"contrastRatio\": 1.54,\u001b[39m\n\u001b[31m+               \"expectedContrastRatio\": \"4.5:1\",\u001b[39m\n\u001b[31m+               \"fgColor\": \"#ffffff\",\u001b[39m\n\u001b[31m+               \"fontSize\": \"13.5pt (18px)\",\u001b[39m\n\u001b[31m+               \"fontWeight\": \"normal\",\u001b[39m\n\u001b[31m+               \"messageKey\": null,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element has insufficient color contrast of 1.54 (foreground color: #ffffff, background color: #cfcfd7, font size: 13.5pt (18px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [\u001b[39m\n\u001b[31m+               Object {\u001b[39m\n\u001b[31m+                 \"html\": \"<div class=\\\"oax_portal_stage oax_pad_top_1 oax-scroll-container\\\">\",\u001b[39m\n\u001b[31m+                 \"target\": Array [\u001b[39m\n\u001b[31m+                   \".oax_portal_stage\",\u001b[39m\n\u001b[31m+                 ],\u001b[39m\n\u001b[31m+               },\u001b[39m\n\u001b[31m+             ],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element has insufficient color contrast of 1.54 (foreground color: #ffffff, background color: #cfcfd7, font size: 13.5pt (18px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+         \"html\": \"<p>Ghidul nostru te va duce în cele mai interesante locuri&nbsp;din Româna și te&nbsp;va ajuta să-ți planifici călătoria.</p>\",\u001b[39m\n\u001b[31m+         \"impact\": \"serious\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \"section > p\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"bgColor\": \"#e8e9f2\",\u001b[39m\n\u001b[31m+               \"contrastRatio\": 4.15,\u001b[39m\n\u001b[31m+               \"expectedContrastRatio\": \"4.5:1\",\u001b[39m\n\u001b[31m+               \"fgColor\": \"#6f6f6f\",\u001b[39m\n\u001b[31m+               \"fontSize\": \"10.5pt (14px)\",\u001b[39m\n\u001b[31m+               \"fontWeight\": \"normal\",\u001b[39m\n\u001b[31m+               \"messageKey\": null,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element has insufficient color contrast of 4.15 (foreground color: #6f6f6f, background color: #e8e9f2, font size: 10.5pt (14px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [\u001b[39m\n\u001b[31m+               Object {\u001b[39m\n\u001b[31m+                 \"html\": \"<div class=\\\"oax_portal_stage oax_pad_top_1 oax-scroll-container\\\">\",\u001b[39m\n\u001b[31m+                 \"target\": Array [\u001b[39m\n\u001b[31m+                   \".oax_portal_stage\",\u001b[39m\n\u001b[31m+                 ],\u001b[39m\n\u001b[31m+               },\u001b[39m\n\u001b[31m+             ],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element has insufficient color contrast of 4.15 (foreground color: #6f6f6f, background color: #e8e9f2, font size: 10.5pt (14px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_copyright_on_light\\\">\u001b[39m\n\u001b[31m+ \t\t\u001b[39m\n\u001b[31m+ \tFoto:\tAgnes Elena Crăciun, Unsplash\u001b[39m\n\u001b[31m+ \t</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"serious\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_copyright_on_light\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.color\",\u001b[39m\n\u001b[31m+       \"wcag2aa\",\u001b[39m\n\u001b[31m+       \"wcag143\",\u001b[39m\n\u001b[31m+       \"TTv5\",\u001b[39m\n\u001b[31m+       \"TT13.c\",\u001b[39m\n\u001b[31m+       \"EN-301-549\",\u001b[39m\n\u001b[31m+       \"EN-9.1.4.3\",\u001b[39m\n\u001b[31m+       \"ACT\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensures all page content is contained by landmarks\",\u001b[39m\n\u001b[31m+     \"help\": \"All page content should be contained by landmarks\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/region?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"region\",\u001b[39m\n\u001b[31m+     \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_custompage_header_cont oax_index_title oax_marg_top_neg_22\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t<h1 class=\\\"oax_bold oax_custom_font\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tStai activ și în sezonul rece: Aventuri și peisaje de vis iarna</h1>\u001b[39m\n\u001b[31m+ \t\t\t\t</div>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_custompage_header_cont\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-25943403 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tPriveliște spre Semenic</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-25943403 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tPaul Wasicsek, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY</a>, Redacția Outdooractive</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-25943403 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-64579929 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tMunții Făgăraș</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-64579929 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tLucian Dachman, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY</a>, Unsplash</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-64579929 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-35929168 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tMuntele Băișorii, Cluj, Romania</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-35929168 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tLaurentiu Galdau, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/publicdomain/zero/1.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC0</a>, Unsplash</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-35929168 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tPădure lângă Mediaș</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-55124239 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\t<a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by-nd/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY-ND</a>, RomaniaTravel.guide</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-55124239 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_modal_content_wrap oax_modal_scroll\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_modal_content_wrap\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax-cookie-consent-open oax_hoverlink_colored oax_marg_left_12 oax_marg_bottom_11 oax_font_default oax_inline_block oax_marg_top_10\\\">Personalizează</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-cookie-consent-open\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_modal_actions oax_modal_footer oax_font_small\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_modal_actions\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.keyboard\",\u001b[39m\n\u001b[31m+       \"best-practice\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensure elements that have scrollable content are accessible by keyboard\",\u001b[39m\n\u001b[31m+     \"help\": \"Scrollable region must have keyboard access\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/scrollable-region-focusable?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"scrollable-region-focusable\",\u001b[39m\n\u001b[31m+     \"impact\": \"serious\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": null,\u001b[39m\n\u001b[31m+             \"id\": \"focusable-content\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element should have focusable content\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": null,\u001b[39m\n\u001b[31m+             \"id\": \"focusable-element\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element should be focusable\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element should have focusable content\u001b[39m\n\u001b[31m+   Element should be focusable\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_modal_content_wrap oax_modal_scroll\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"serious\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_modal_content_wrap\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.keyboard\",\u001b[39m\n\u001b[31m+       \"wcag2a\",\u001b[39m\n\u001b[31m+       \"wcag211\",\u001b[39m\n\u001b[31m+       \"TTv5\",\u001b[39m\n\u001b[31m+       \"TT4.a\",\u001b[39m\n\u001b[31m+       \"EN-301-549\",\u001b[39m\n\u001b[31m+       \"EN-9.2.1.1\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+ ]\u001b[39m\n    at C:\\Learning\\Playwright\\playwright-stuff\\tests\\rom_travel\\acces.test.ts:26:47",
                    "location": {
                      "file": "C:\\Learning\\Playwright\\playwright-stuff\\tests\\rom_travel\\acces.test.ts",
                      "column": 47,
                      "line": 26
                    },
                    "snippet": "\u001b[0m \u001b[90m 24 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 25 |\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 26 |\u001b[39m   expect(accessibilityScanResults\u001b[33m.\u001b[39mviolations)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m \u001b[90m// 5\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 27 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 28 |\u001b[39m\u001b[0m"
                  },
                  "errors": [
                    {
                      "location": {
                        "file": "C:\\Learning\\Playwright\\playwright-stuff\\tests\\rom_travel\\acces.test.ts",
                        "column": 47,
                        "line": 26
                      },
                      "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected  -   1\u001b[39m\n\u001b[31m+ Received  + 498\u001b[39m\n\n\u001b[32m- Array []\u001b[39m\n\u001b[31m+ Array [\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensures the contrast between foreground and background colors meets WCAG 2 AA minimum contrast ratio thresholds\",\u001b[39m\n\u001b[31m+     \"help\": \"Elements must meet minimum color contrast ratio thresholds\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/color-contrast?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+     \"impact\": \"serious\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"bgColor\": \"#cfcfd7\",\u001b[39m\n\u001b[31m+               \"contrastRatio\": 1.54,\u001b[39m\n\u001b[31m+               \"expectedContrastRatio\": \"4.5:1\",\u001b[39m\n\u001b[31m+               \"fgColor\": \"#ffffff\",\u001b[39m\n\u001b[31m+               \"fontSize\": \"13.5pt (18px)\",\u001b[39m\n\u001b[31m+               \"fontWeight\": \"normal\",\u001b[39m\n\u001b[31m+               \"messageKey\": null,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element has insufficient color contrast of 1.54 (foreground color: #ffffff, background color: #cfcfd7, font size: 13.5pt (18px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [\u001b[39m\n\u001b[31m+               Object {\u001b[39m\n\u001b[31m+                 \"html\": \"<div class=\\\"oax_portal_stage oax_pad_top_1 oax-scroll-container\\\">\",\u001b[39m\n\u001b[31m+                 \"target\": Array [\u001b[39m\n\u001b[31m+                   \".oax_portal_stage\",\u001b[39m\n\u001b[31m+                 ],\u001b[39m\n\u001b[31m+               },\u001b[39m\n\u001b[31m+             ],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element has insufficient color contrast of 1.54 (foreground color: #ffffff, background color: #cfcfd7, font size: 13.5pt (18px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+         \"html\": \"<p>Ghidul nostru te va duce în cele mai interesante locuri&nbsp;din Româna și te&nbsp;va ajuta să-ți planifici călătoria.</p>\",\u001b[39m\n\u001b[31m+         \"impact\": \"serious\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \"section > p\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"bgColor\": \"#e8e9f2\",\u001b[39m\n\u001b[31m+               \"contrastRatio\": 4.15,\u001b[39m\n\u001b[31m+               \"expectedContrastRatio\": \"4.5:1\",\u001b[39m\n\u001b[31m+               \"fgColor\": \"#6f6f6f\",\u001b[39m\n\u001b[31m+               \"fontSize\": \"10.5pt (14px)\",\u001b[39m\n\u001b[31m+               \"fontWeight\": \"normal\",\u001b[39m\n\u001b[31m+               \"messageKey\": null,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"color-contrast\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element has insufficient color contrast of 4.15 (foreground color: #6f6f6f, background color: #e8e9f2, font size: 10.5pt (14px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [\u001b[39m\n\u001b[31m+               Object {\u001b[39m\n\u001b[31m+                 \"html\": \"<div class=\\\"oax_portal_stage oax_pad_top_1 oax-scroll-container\\\">\",\u001b[39m\n\u001b[31m+                 \"target\": Array [\u001b[39m\n\u001b[31m+                   \".oax_portal_stage\",\u001b[39m\n\u001b[31m+                 ],\u001b[39m\n\u001b[31m+               },\u001b[39m\n\u001b[31m+             ],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element has insufficient color contrast of 4.15 (foreground color: #6f6f6f, background color: #e8e9f2, font size: 10.5pt (14px), font weight: normal). Expected contrast ratio of 4.5:1\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_copyright_on_light\\\">\u001b[39m\n\u001b[31m+ \t\t\u001b[39m\n\u001b[31m+ \tFoto:\tAgnes Elena Crăciun, Unsplash\u001b[39m\n\u001b[31m+ \t</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"serious\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_copyright_on_light\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.color\",\u001b[39m\n\u001b[31m+       \"wcag2aa\",\u001b[39m\n\u001b[31m+       \"wcag143\",\u001b[39m\n\u001b[31m+       \"TTv5\",\u001b[39m\n\u001b[31m+       \"TT13.c\",\u001b[39m\n\u001b[31m+       \"EN-301-549\",\u001b[39m\n\u001b[31m+       \"EN-9.1.4.3\",\u001b[39m\n\u001b[31m+       \"ACT\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensures all page content is contained by landmarks\",\u001b[39m\n\u001b[31m+     \"help\": \"All page content should be contained by landmarks\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/region?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"region\",\u001b[39m\n\u001b[31m+     \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_custompage_header_cont oax_index_title oax_marg_top_neg_22\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t<h1 class=\\\"oax_bold oax_custom_font\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tStai activ și în sezonul rece: Aventuri și peisaje de vis iarna</h1>\u001b[39m\n\u001b[31m+ \t\t\t\t</div>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_custompage_header_cont\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-25943403 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tPriveliște spre Semenic</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-25943403 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tPaul Wasicsek, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY</a>, Redacția Outdooractive</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-25943403 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-64579929 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tMunții Făgăraș</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-64579929 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tLucian Dachman, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY</a>, Unsplash</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-64579929 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_slide_image_wrapper oax_slide_image_wrapper_white\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-id-35929168 > .oax-domaw-restrict.oax-one-image > .oax_slide_image_wrapper.oax_slide_image_wrapper_white\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tMuntele Băișorii, Cluj, Romania</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-35929168 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\tLaurentiu Galdau, <a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/publicdomain/zero/1.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC0</a>, Unsplash</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-35929168 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<strong class=\\\"oax_semi_bold oax_fl oax_half oax_ellipsis oax-one-image-title\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t<span class=\\\"oax-icon-image oax_inline_block oax_media_icon\\\"></span>\u001b[39m\n\u001b[31m+ \t\t\t\t\t\t\tPădure lângă Mediaș</strong>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-55124239 > .oax-one-image-title.oax_half.oax_semi_bold\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax_font_grey_dark oax_fr oax_half oax_ellipsis oax-one-image-author\\\">\u001b[39m\n\u001b[31m+ \t\t\t\t\t\tFoto:\t<a class=\\\"oax_underline oax_font_grey_dark\\\" href=\\\"https://creativecommons.org/licenses/by-nd/4.0/deed.en\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener\\\">CC BY-ND</a>, RomaniaTravel.guide</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-claim-55124239 > .oax-one-image-author.oax_fr.oax_half\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_modal_content_wrap oax_modal_scroll\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_modal_content_wrap\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<span class=\\\"oax-cookie-consent-open oax_hoverlink_colored oax_marg_left_12 oax_marg_bottom_11 oax_font_default oax_inline_block oax_marg_top_10\\\">Personalizează</span>\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax-cookie-consent-open\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": Object {\u001b[39m\n\u001b[31m+               \"isIframe\": false,\u001b[39m\n\u001b[31m+             },\u001b[39m\n\u001b[31m+             \"id\": \"region\",\u001b[39m\n\u001b[31m+             \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+             \"message\": \"Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Some page content is not contained by landmarks\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_modal_actions oax_modal_footer oax_font_small\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"moderate\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_modal_actions\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.keyboard\",\u001b[39m\n\u001b[31m+       \"best-practice\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+   Object {\u001b[39m\n\u001b[31m+     \"description\": \"Ensure elements that have scrollable content are accessible by keyboard\",\u001b[39m\n\u001b[31m+     \"help\": \"Scrollable region must have keyboard access\",\u001b[39m\n\u001b[31m+     \"helpUrl\": \"https://dequeuniversity.com/rules/axe/4.8/scrollable-region-focusable?application=playwright\",\u001b[39m\n\u001b[31m+     \"id\": \"scrollable-region-focusable\",\u001b[39m\n\u001b[31m+     \"impact\": \"serious\",\u001b[39m\n\u001b[31m+     \"nodes\": Array [\u001b[39m\n\u001b[31m+       Object {\u001b[39m\n\u001b[31m+         \"all\": Array [],\u001b[39m\n\u001b[31m+         \"any\": Array [\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": null,\u001b[39m\n\u001b[31m+             \"id\": \"focusable-content\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element should have focusable content\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+           Object {\u001b[39m\n\u001b[31m+             \"data\": null,\u001b[39m\n\u001b[31m+             \"id\": \"focusable-element\",\u001b[39m\n\u001b[31m+             \"impact\": \"serious\",\u001b[39m\n\u001b[31m+             \"message\": \"Element should be focusable\",\u001b[39m\n\u001b[31m+             \"relatedNodes\": Array [],\u001b[39m\n\u001b[31m+           },\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+         \"failureSummary\": \"Fix any of the following:\u001b[39m\n\u001b[31m+   Element should have focusable content\u001b[39m\n\u001b[31m+   Element should be focusable\",\u001b[39m\n\u001b[31m+         \"html\": \"<div class=\\\"oax_modal_content_wrap oax_modal_scroll\\\">\",\u001b[39m\n\u001b[31m+         \"impact\": \"serious\",\u001b[39m\n\u001b[31m+         \"none\": Array [],\u001b[39m\n\u001b[31m+         \"target\": Array [\u001b[39m\n\u001b[31m+           \".oax_modal_content_wrap\",\u001b[39m\n\u001b[31m+         ],\u001b[39m\n\u001b[31m+       },\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+     \"tags\": Array [\u001b[39m\n\u001b[31m+       \"cat.keyboard\",\u001b[39m\n\u001b[31m+       \"wcag2a\",\u001b[39m\n\u001b[31m+       \"wcag211\",\u001b[39m\n\u001b[31m+       \"TTv5\",\u001b[39m\n\u001b[31m+       \"TT4.a\",\u001b[39m\n\u001b[31m+       \"EN-301-549\",\u001b[39m\n\u001b[31m+       \"EN-9.2.1.1\",\u001b[39m\n\u001b[31m+     ],\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[31m+ ]\u001b[39m\n\n\u001b[0m \u001b[90m 24 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 25 |\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 26 |\u001b[39m   expect(accessibilityScanResults\u001b[33m.\u001b[39mviolations)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m \u001b[90m// 5\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 27 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 28 |\u001b[39m\u001b[0m\n\n\u001b[2m    at C:\\Learning\\Playwright\\playwright-stuff\\tests\\rom_travel\\acces.test.ts:26:47\u001b[22m"
                    }
                  ],
                  "stdout": [],
                  "stderr": [],
                  "retry": 2,
                  "startTime": "2024-03-03T13:02:53.111Z",
                  "attachments": [
                    {
                      "name": "accessibility-scan-results",
                      "contentType": "application/json",
                      "body": ""
                    },
                    {
                      "name": "screenshot",
                      "contentType": "image/png",
                      "path": "C:\\Learning\\Playwright\\playwright-stuff\\test-results\\rom_travel-acces-should-not-have-any-automatically-detectable-accessibility-issues-chromium-retry2\\test-failed-1.png"
                    }
                  ],
                  "errorLocation": {
                    "file": "C:\\Learning\\Playwright\\playwright-stuff\\tests\\rom_travel\\acces.test.ts",
                    "column": 47,
                    "line": 26
                  }
                }
              ],
              "status": "unexpected"
            }
          ],
          "id": "771ea3b89d0f08002b38-4575157426e5870169a9",
          "file": "rom_travel/acces.test.ts",
          "line": 12,
          "column": 5
        }
      ]
    }
  ],
  "errors": [],
  "stats": {
    "startTime": "2024-03-03T13:02:26.511Z",
    "duration": 33279.311,
    "expected": 1,
    "skipped": 0,
    "unexpected": 1,
    "flaky": 0
  }
}